/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
/* Generated By:JavaCC: Do not edit this line. StepParserTokenManager.java */
package ifc2x3javatoolbox.step.parser;
import ifc2x3javatoolbox.ifc2x3tc1.*;
import java.io.*;
import java.util.*;
import ifc2x3javatoolbox.step.parser.util.*;
/** Token Manager. *
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class StepParserTokenManager implements StepParserConstants
{
  private static StepParserTokenManager mgr = null;

  private static SimpleCharStream scs = null;

  private static boolean reinit = false;

  private static long linesToRead = 0;

  private static long stepCounter = 0;

  private static double progressStep = 10;

  private static int progress = 0;

  private static HashMap < Integer, InternalAccessClass > nodeMap = null;

  private static Vector < StepParserProgressListener > listenerList = null;

  private static ProgressEvent event = new ProgressEvent(0, "");

  private static final NodeObject node = new NodeObject();

  private static File_Schema file_Schema = null;
  private static File_Description file_Description = null;
  private static File_Name file_Name = null;

  public StepParserTokenManager()
  {}

  public static void destruct()
  {
    nodeMap = null;
    listenerList = null;
    mgr = null;
    file_Schema = null;
    file_Description = null;
    file_Name = null;
    node.reset();
  }

        public static File_Schema getFile_Schema() {
                return file_Schema;
        }

        public static File_Description getFile_Description() {
                return file_Description;
        }

        public static File_Name getFile_Name() {
                return file_Name;
        }

  private static InternalAccessClass instanciateNode(NodeObject node1)
{
    stepCounter++;
    InternalAccessClass object = null;
    try
    {
        object = (InternalAccessClass)ObjectFactory.createInstance(node1.getClassName());
        InternalAccess.setStepParameter(object, node1.getParameter());
        InternalAccess.setStepLineNumber(object, node1.getLineNumber());
        nodeMap.put(node1.getLineNumber(), object);
        if (stepCounter >= progressStep)
        {
            stepCounter = 0;
            progress++;
            event.setValues(progress, "parsing file...");
            fireProgressEvent();
        }
    }
    catch (Exception e)
    {
        e.printStackTrace();
    }
    return object;
}

  public static void addStepParserProgressListener(StepParserProgressListener listener)
  {
    if (listenerList == null) listenerList = new Vector < StepParserProgressListener > ();
    listenerList.add(listener);
  }

  public static void removeStepParserProgressListener(StepParserProgressListener listener)
  {
    if (listenerList != null) listenerList.remove(listener);
  }

  public static void removeAllStepParserPogressListeners()
  {
    listenerList = null;
  }

  private static void fireProgressEvent()
  {
    if (listenerList != null)
    {
      for (int i = 0;
      i < listenerList.size();
        i++)
        {
          StepParserProgressListener listener = (StepParserProgressListener) listenerList.get(i);
          listener.progressActionPerformed(event);
        }
      }
    }

    private static void initLinesToRead(File file)
                        throws FileNotFoundException, IOException
        {
                linesToRead = 0;
                BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
                while (bufferedReader.readLine() != null)
                {
                        linesToRead++;
                }
                progressStep = linesToRead / 100;
        }

    public static HashMap<Integer, InternalAccessClass> startParsing(URLFileCache urlFileCache) throws Exception
        {
                //init
                progress = 0;
                linesToRead = urlFileCache.getLineNumberCount();
                progressStep = linesToRead / 100;

                //parse
                nodeMap = new HashMap<Integer, InternalAccessClass>((int) linesToRead + 1);
                parse(urlFileCache.getBufferedReader());
                return nodeMap;
        }

    public static HashMap < Integer, InternalAccessClass > startParsing(File file) throws Exception
    {
        progress = 0;
                initLinesToRead(file);
                nodeMap = new HashMap<Integer, InternalAccessClass>((int) linesToRead + 1);
                parse(new BufferedReader(new FileReader(file)));
                return nodeMap;
    }

    private static void parseHeader(Token t) throws Exception
    {
        StepParserTokenManager.getNextToken(); // ";"
        node.reset();
        node.setClassName(StepParserTokenManager.getNextToken().image);
        StepParserTokenManager.getNextToken(); // "("
        parseParameters(t);
        file_Description = (File_Description)ObjectFactory.createInstance(node.getClassName());
        InternalAccess.setStepParameter(file_Description, node.getParameter());
        node.reset();

        node.reset();
        node.setClassName(StepParserTokenManager.getNextToken().image);
        StepParserTokenManager.getNextToken(); // "("
        parseParameters(t);
        file_Name = (File_Name)ObjectFactory.createInstance(node.getClassName());
        InternalAccess.setStepParameter(file_Name, node.getParameter());
        node.reset();

        node.reset();
        node.setClassName(StepParserTokenManager.getNextToken().image);
        StepParserTokenManager.getNextToken(); // "("
        parseParameters(t);
        file_Schema = (File_Schema)ObjectFactory.createInstance(node.getClassName());
        InternalAccess.setStepParameter(file_Schema, node.getParameter());
        LIST<STRING> fileSchemes = (LIST<STRING>) InternalAccess.getStepParameter(file_Schema).get(0);
        String fileSchema = fileSchemes.get(0).getDecodedValue();
        if(!fileSchema.startsWith("IFC2X3")) throw new Exception("File schema" + fileSchema + " is not supported");
    }

    private static void parseParameters(Token t)
    {
        boolean entityEnd = false;
        while (!entityEnd)
        {
          t = StepParserTokenManager.getNextToken();
          int kind = t.kind;
          switch (t.kind)
          {
            case ENTITY_INSTANCE_NAME :
            {
              node.addParameter(new InstanceLineNrReference(t.image.replace("#", "")));
              break;
            }
            case STANDARD_KEYWORD :
            {
              NodeObject typedParameter = new NodeObject();
              typedParameter.setClassName(t.image);
              boolean inlineEnd = false;
              while (!inlineEnd)
              {
                t = StepParserTokenManager.getNextToken();
                switch (t.kind)
                {
                  case COMMA :
                  break;
                  case RPAREN :
                  {
                    inlineEnd = true;
                    break;
                  }
                  case LPAREN :
                  break;
                  default :
                  {
                    typedParameter.addParameter(getType(t));
                    break;
                  }
                }
              }
              node.addParameter(typedParameter);
              break;
            }
            case REAL :
            {
              node.addParameter(new DOUBLE(Double.parseDouble(t.image)));
              break;
            }
            case DOLLAR :
            {
              node.addParameter(null);
              break;
            }
            case STAR :
            {
              node.addParameter(null);
              break;
            }
            case LPAREN :
            {
              LIST list = new LIST();
              node.addParameter(list);
              boolean listEnd = false;
              while (!listEnd)
              {
                t = StepParserTokenManager.getNextToken();
                switch (t.kind)
                {
                  case COMMA :
                  break;
                  case RPAREN :
                  {
                    listEnd = true;
                    break;
                  }
                  default :
                  {
                    list.add(getType(t));
                    break;
                  }
                }
              }
              break;
            }
            case SEMICOLON :
            {
              entityEnd = true;

              break;
            }
            case STRING :
            {
              node.addParameter(new STRING(t.image.substring(1, t.image.length()-1), false));
              break;
            }
            case BINARY :
            {
              node.addParameter(new BINARY(t.image.substring(1, t.image.length()-1)));
              break;
            }
            case INTEGER :
            {
              node.addParameter(new INTEGER(Integer.parseInt(t.image)));
              break;
            }
            case ENUMERATION :
            {
              if (t.image.equals(".T.")) node.addParameter(new LOGICAL("T")); //type = type.concat(t.image);
              else if (t.image.equals(".F.")) node.addParameter(new LOGICAL("F"));
              else if (t.image.equals(".U.")) node.addParameter(new LOGICAL("U")); //type = type.concat(t.image);
              else node.addParameter(new ENUM(t.image.replaceAll("[.]", ""))); //type = type.concat("ENUM: " + t.image);	
              break;
            }
            default :
            break;
          }
        }
    }

    public static void parse(BufferedReader bufferedReader) throws Exception
    {
      boolean lexer = true;
      if (lexer)
      {
        if (reinit == false)
        {
          reinit = true;
          scs = new SimpleCharStream(bufferedReader);
          mgr = new StepParserTokenManager(scs);
        }
        else
        {
          scs.ReInit(bufferedReader);
          StepParserTokenManager.ReInit(scs);
        }
        for (Token t = StepParserTokenManager.getNextToken();
        t.kind != EOF;
        t = StepParserTokenManager.getNextToken())
        {
          if(t.image.startsWith("HEADER")) parseHeader(t);
          if (t.image.startsWith("#"))
          {
            node.reset();

                node.setLineNumber(t.image.replace("#", ""));
                StepParserTokenManager.getNextToken(); // "="

            node.setClassName(StepParserTokenManager.getNextToken().image);
            StepParserTokenManager.getNextToken(); // "("         
            parseParameters(t);
            instanciateNode(node);
          }
        }
      }
      else
      {
        for (String line = bufferedReader.readLine();
        line != null;
        line = bufferedReader.readLine())
        {
          linesToRead++;
        }
      }
    }

    private static CloneableObject getType(Token t)
    {
      switch (t.kind)
      {
        case DOLLAR :
        return null;
        case STAR :
        return null;
        case ENTITY_INSTANCE_NAME :
        return new InstanceLineNrReference(t.image.replace("#", ""));
        case STANDARD_KEYWORD :
        {
          NodeObject typedParameter = new NodeObject();
          typedParameter.setClassName(t.image);
          StepParserTokenManager.getNextToken();
          boolean inlineEnd = false;
          while (!inlineEnd)
          {
            t = StepParserTokenManager.getNextToken();
            switch (t.kind)
            {
              case COMMA :
              break;
              case RPAREN :
              {
                inlineEnd = true;
                break;
              }
              default :
              {
                typedParameter.addParameter(getType(t));
                break;
              }
            }
          }
          return typedParameter;
        }
        case LPAREN :
        {
          LIST list = new LIST();
          boolean listEnd = false;
          while (!listEnd)
          {
            t = StepParserTokenManager.getNextToken();
            switch (t.kind)
            {
              case RPAREN :
              {
                listEnd = true;
                break;
              }
              default :
              {
                list.add(getType(t));
                break;
              }
            }
          }
          return list;
        }
        case STRING : return new STRING(t.image.substring(1, t.image.length()-1), false);
        case BINARY : return new BINARY(t.image.substring(1, t.image.length()-1));
        case INTEGER : return new INTEGER(Integer.parseInt(t.image));
        case REAL :    return new DOUBLE(Double.parseDouble(t.image));
        case ENUMERATION :
        {
          if (t.image.equals(".T.")) return new LOGICAL("T"); //type = type.concat(t.image);
          else if (t.image.equals(".F.")) return new LOGICAL("F");
          else if (t.image.equals(".U.")) return new LOGICAL("U"); //type = type.concat(t.image);
          else new ENUM(t.image.replaceAll("[.]", "")); //type = type.concat("ENUM: " + t.image);
        }
        default :
        return null;
      }
    }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000L) != 0L)
            return 57;
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 25;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 6);
      case 32:
         return jjStopAtPos(0, 1);
      case 36:
         return jjStopAtPos(0, 20);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 21);
      case 44:
         return jjStopAtPos(0, 17);
      case 46:
         return jjStartNfaWithStates_0(0, 18, 57);
      case 47:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 58:
         return jjStopAtPos(0, 16);
      case 59:
         return jjStopAtPos(0, 15);
      case 61:
         return jjStopAtPos(0, 19);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 91:
         return jjStopAtPos(0, 13);
      case 93:
         return jjStopAtPos(0, 14);
      case 123:
         return jjStopAtPos(0, 11);
      case 125:
         return jjStopAtPos(0, 12);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 73;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffff7f00000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAddStates(3, 5);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 61;
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 35)
                     jjCheckNAdd(55);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0xffffff7f00000000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 6:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  if ((0xffffff7f00002400L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if (curChar != 39)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
               case 46:
                  if (curChar == 48)
                     jjCheckNAdd(10);
                  break;
               case 36:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 53:
                  if ((0xffffffff00000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 54:
                  if (curChar == 35)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 59:
                  if (curChar == 46 && kind > 32)
                     kind = 32;
                  break;
               case 60:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0xf000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 34 && kind > 34)
                     kind = 34;
                  break;
               case 64:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(65);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar != 46)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(68, 69);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffffefffffffL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  if ((0x87fffffeL & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAdd(4);
                  }
                  break;
               case 1:
               case 2:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(2);
                  break;
               case 3:
               case 4:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if ((0x7fffffffefffffffL & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 7:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 9:
                  if (curChar == 92)
                     jjCheckNAddStates(12, 17);
                  break;
               case 10:
                  if (curChar == 92)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
               case 31:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7eL & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 25:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 37:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
               case 44:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x7eL & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 42:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 49:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x87fffffeL & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 51:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 57:
               case 58:
                  if ((0x87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 62:
                  if ((0x7eL & l) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 69:
                  if (curChar == 69)
                     jjAddStates(20, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 73 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   7, 8, 9, 65, 66, 67, 25, 32, 42, 45, 58, 59, 10, 11, 35, 48, 
   49, 51, 62, 63, 70, 71, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\50", "\51", "\173", 
"\175", "\133", "\135", "\73", "\72", "\54", "\56", "\75", "\44", "\52", "\57", 
"\105\116\104\123\103\117\120\105", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WITHIN_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0x5fbfffe01L, 
};
static final long[] jjtoSkip = {
   0xfeL, 
};
static final long[] jjtoSpecial = {
   0xe0L, 
};
static final long[] jjtoMore = {
   0x100L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[73];
static private final int[] jjstateSet = new int[146];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public StepParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public StepParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 73; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 13 && (0x3200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
