/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcOwnerHistory<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcOwnerHistory extends InternalAccessClass implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcPersonAndOrganization","IfcApplication","IfcStateEnum","IfcChangeActionEnum","IfcTimeStamp","IfcPersonAndOrganization","IfcApplication","IfcTimeStamp"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** OwningUser is an DEMANDED attribute - may not be null**/
	protected IfcPersonAndOrganization OwningUser;
	/** OwningApplication is an DEMANDED attribute - may not be null**/
	protected IfcApplication OwningApplication;
	/** State is an OPTIONAL attribute**/
	protected IfcStateEnum State;
	/** ChangeAction is an DEMANDED attribute - may not be null**/
	protected IfcChangeActionEnum ChangeAction;
	/** LastModifiedDate is an OPTIONAL attribute**/
	protected IfcTimeStamp LastModifiedDate;
	/** LastModifyingUser is an OPTIONAL attribute**/
	protected IfcPersonAndOrganization LastModifyingUser;
	/** LastModifyingApplication is an OPTIONAL attribute**/
	protected IfcApplication LastModifyingApplication;
	/** CreationDate is an DEMANDED attribute - may not be null**/
	protected IfcTimeStamp CreationDate;
	/**
	* The default constructor.
	**/
	public IfcOwnerHistory(){}

	private static final String[] attributes = new String[]{"OwningUser","OwningApplication","State","ChangeAction"
			,"LastModifiedDate","LastModifyingUser","LastModifyingApplication","CreationDate"};

	public String[] getAttributes() {
		return IfcOwnerHistory.attributes;
	}

	/**
	* Constructs a new IfcOwnerHistory object using the given parameters.
	*
	* @param OwningUser DEMANDED parameter of type IfcPersonAndOrganization - may not be null.
	* @param OwningApplication DEMANDED parameter of type IfcApplication - may not be null.
	* @param State OPTIONAL parameter of type IfcStateEnum
	* @param ChangeAction DEMANDED parameter of type IfcChangeActionEnum - may not be null.
	* @param LastModifiedDate OPTIONAL parameter of type IfcTimeStamp
	* @param LastModifyingUser OPTIONAL parameter of type IfcPersonAndOrganization
	* @param LastModifyingApplication OPTIONAL parameter of type IfcApplication
	* @param CreationDate DEMANDED parameter of type IfcTimeStamp - may not be null.
	**/
	public IfcOwnerHistory(IfcPersonAndOrganization OwningUser, IfcApplication OwningApplication, IfcStateEnum State, IfcChangeActionEnum ChangeAction, IfcTimeStamp LastModifiedDate, IfcPersonAndOrganization LastModifyingUser, IfcApplication LastModifyingApplication, IfcTimeStamp CreationDate)
	{
		this.OwningUser = OwningUser;
		this.OwningApplication = OwningApplication;
		this.State = State;
		this.ChangeAction = ChangeAction;
		this.LastModifiedDate = LastModifiedDate;
		this.LastModifyingUser = LastModifyingUser;
		this.LastModifyingApplication = LastModifyingApplication;
		this.CreationDate = CreationDate;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcOwnerHistory object using the given parameters.
	*
	* @param OwningUser DEMANDED parameter of type IfcPersonAndOrganization - may not be null.
	* @param OwningApplication DEMANDED parameter of type IfcApplication - may not be null.
	* @param State OPTIONAL parameter of type IfcStateEnum
	* @param ChangeAction DEMANDED parameter of type IfcChangeActionEnum - may not be null.
	* @param LastModifiedDate OPTIONAL parameter of type IfcTimeStamp
	* @param LastModifyingUser OPTIONAL parameter of type IfcPersonAndOrganization
	* @param LastModifyingApplication OPTIONAL parameter of type IfcApplication
	* @param CreationDate DEMANDED parameter of type IfcTimeStamp - may not be null.
	**/
	public void setParameters(IfcPersonAndOrganization OwningUser, IfcApplication OwningApplication, IfcStateEnum State, IfcChangeActionEnum ChangeAction, IfcTimeStamp LastModifiedDate, IfcPersonAndOrganization LastModifyingUser, IfcApplication LastModifyingApplication, IfcTimeStamp CreationDate)
	{
		this.OwningUser = OwningUser;
		this.OwningApplication = OwningApplication;
		this.State = State;
		this.ChangeAction = ChangeAction;
		this.LastModifiedDate = LastModifiedDate;
		this.LastModifyingUser = LastModifyingUser;
		this.LastModifyingApplication = LastModifyingApplication;
		this.CreationDate = CreationDate;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.OwningUser = (IfcPersonAndOrganization) parameters.get(0);
		this.OwningApplication = (IfcApplication) parameters.get(1);
		this.State = (IfcStateEnum) parameters.get(2);
		this.ChangeAction = (IfcChangeActionEnum) parameters.get(3);
		this.LastModifiedDate = (IfcTimeStamp) parameters.get(4);
		this.LastModifyingUser = (IfcPersonAndOrganization) parameters.get(5);
		this.LastModifyingApplication = (IfcApplication) parameters.get(6);
		this.CreationDate = (IfcTimeStamp) parameters.get(7);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcOwnerHistory.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCOWNERHISTORY(");
		if(getRedefinedDerivedAttributeTypes().contains("OwningUser")) stepString = stepString.concat("*,");
		else{
		if(this.OwningUser != null)		stepString = stepString.concat(((RootInterface)this.OwningUser).getStepParameter(IfcPersonAndOrganization.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwningApplication")) stepString = stepString.concat("*,");
		else{
		if(this.OwningApplication != null)		stepString = stepString.concat(((RootInterface)this.OwningApplication).getStepParameter(IfcApplication.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("State")) stepString = stepString.concat("*,");
		else{
		if(this.State != null)		stepString = stepString.concat(((RootInterface)this.State).getStepParameter(IfcStateEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ChangeAction")) stepString = stepString.concat("*,");
		else{
		if(this.ChangeAction != null)		stepString = stepString.concat(((RootInterface)this.ChangeAction).getStepParameter(IfcChangeActionEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LastModifiedDate")) stepString = stepString.concat("*,");
		else{
		if(this.LastModifiedDate != null)		stepString = stepString.concat(((RootInterface)this.LastModifiedDate).getStepParameter(IfcTimeStamp.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LastModifyingUser")) stepString = stepString.concat("*,");
		else{
		if(this.LastModifyingUser != null)		stepString = stepString.concat(((RootInterface)this.LastModifyingUser).getStepParameter(IfcPersonAndOrganization.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LastModifyingApplication")) stepString = stepString.concat("*,");
		else{
		if(this.LastModifyingApplication != null)		stepString = stepString.concat(((RootInterface)this.LastModifyingApplication).getStepParameter(IfcApplication.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CreationDate")) stepString = stepString.concat("*);");
		else{
		if(this.CreationDate != null)		stepString = stepString.concat(((RootInterface)this.CreationDate).getStepParameter(IfcTimeStamp.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the OwningUser attribute to the given value.
	*
	* @param OwningUser OPTIONAL value to set
	**/
	public void setOwningUser(IfcPersonAndOrganization OwningUser)
	{
		this.OwningUser = OwningUser;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the OwningUser attribute.
	*
	* @return the value of OwningUser
	/**/
	public IfcPersonAndOrganization getOwningUser()
	{
		return this.OwningUser;
	}

	/**
	* This method sets the OwningApplication attribute to the given value.
	*
	* @param OwningApplication OPTIONAL value to set
	**/
	public void setOwningApplication(IfcApplication OwningApplication)
	{
		this.OwningApplication = OwningApplication;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the OwningApplication attribute.
	*
	* @return the value of OwningApplication
	/**/
	public IfcApplication getOwningApplication()
	{
		return this.OwningApplication;
	}

	/**
	* This method sets the State attribute to the given value.
	*
	* @param State DEMANDED value to set - may not be null
	**/
	public void setState(IfcStateEnum State)
	{
		this.State = State;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the State attribute.
	*
	* @return the value of State
	/**/
	public IfcStateEnum getState()
	{
		return this.State;
	}

	/**
	* This method sets the ChangeAction attribute to the given value.
	*
	* @param ChangeAction OPTIONAL value to set
	**/
	public void setChangeAction(IfcChangeActionEnum ChangeAction)
	{
		this.ChangeAction = ChangeAction;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ChangeAction attribute.
	*
	* @return the value of ChangeAction
	/**/
	public IfcChangeActionEnum getChangeAction()
	{
		return this.ChangeAction;
	}

	/**
	* This method sets the LastModifiedDate attribute to the given value.
	*
	* @param LastModifiedDate DEMANDED value to set - may not be null
	**/
	public void setLastModifiedDate(IfcTimeStamp LastModifiedDate)
	{
		this.LastModifiedDate = LastModifiedDate;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LastModifiedDate attribute.
	*
	* @return the value of LastModifiedDate
	/**/
	public IfcTimeStamp getLastModifiedDate()
	{
		return this.LastModifiedDate;
	}

	/**
	* This method sets the LastModifyingUser attribute to the given value.
	*
	* @param LastModifyingUser DEMANDED value to set - may not be null
	**/
	public void setLastModifyingUser(IfcPersonAndOrganization LastModifyingUser)
	{
		this.LastModifyingUser = LastModifyingUser;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LastModifyingUser attribute.
	*
	* @return the value of LastModifyingUser
	/**/
	public IfcPersonAndOrganization getLastModifyingUser()
	{
		return this.LastModifyingUser;
	}

	/**
	* This method sets the LastModifyingApplication attribute to the given value.
	*
	* @param LastModifyingApplication DEMANDED value to set - may not be null
	**/
	public void setLastModifyingApplication(IfcApplication LastModifyingApplication)
	{
		this.LastModifyingApplication = LastModifyingApplication;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LastModifyingApplication attribute.
	*
	* @return the value of LastModifyingApplication
	/**/
	public IfcApplication getLastModifyingApplication()
	{
		return this.LastModifyingApplication;
	}

	/**
	* This method sets the CreationDate attribute to the given value.
	*
	* @param CreationDate OPTIONAL value to set
	**/
	public void setCreationDate(IfcTimeStamp CreationDate)
	{
		this.CreationDate = CreationDate;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the CreationDate attribute.
	*
	* @return the value of CreationDate
	/**/
	public IfcTimeStamp getCreationDate()
	{
		return this.CreationDate;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcOwnerHistory ifcOwnerHistory = new IfcOwnerHistory();
		if(this.OwningUser != null)
			ifcOwnerHistory.setOwningUser((IfcPersonAndOrganization)this.OwningUser.clone());
		if(this.OwningApplication != null)
			ifcOwnerHistory.setOwningApplication((IfcApplication)this.OwningApplication.clone());
		if(this.State != null)
			ifcOwnerHistory.setState((IfcStateEnum)this.State.clone());
		if(this.ChangeAction != null)
			ifcOwnerHistory.setChangeAction((IfcChangeActionEnum)this.ChangeAction.clone());
		if(this.LastModifiedDate != null)
			ifcOwnerHistory.setLastModifiedDate((IfcTimeStamp)this.LastModifiedDate.clone());
		if(this.LastModifyingUser != null)
			ifcOwnerHistory.setLastModifyingUser((IfcPersonAndOrganization)this.LastModifyingUser.clone());
		if(this.LastModifyingApplication != null)
			ifcOwnerHistory.setLastModifyingApplication((IfcApplication)this.LastModifyingApplication.clone());
		if(this.CreationDate != null)
			ifcOwnerHistory.setCreationDate((IfcTimeStamp)this.CreationDate.clone());
		return ifcOwnerHistory;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcOwnerHistory ifcOwnerHistory = new IfcOwnerHistory();
		if(this.OwningUser != null)
			ifcOwnerHistory.setOwningUser(this.OwningUser);
		if(this.OwningApplication != null)
			ifcOwnerHistory.setOwningApplication(this.OwningApplication);
		if(this.State != null)
			ifcOwnerHistory.setState(this.State);
		if(this.ChangeAction != null)
			ifcOwnerHistory.setChangeAction(this.ChangeAction);
		if(this.LastModifiedDate != null)
			ifcOwnerHistory.setLastModifiedDate(this.LastModifiedDate);
		if(this.LastModifyingUser != null)
			ifcOwnerHistory.setLastModifyingUser(this.LastModifyingUser);
		if(this.LastModifyingApplication != null)
			ifcOwnerHistory.setLastModifyingApplication(this.LastModifyingApplication);
		if(this.CreationDate != null)
			ifcOwnerHistory.setCreationDate(this.CreationDate);
		return ifcOwnerHistory;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
