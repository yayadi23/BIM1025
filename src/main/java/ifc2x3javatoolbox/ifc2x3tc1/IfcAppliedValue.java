/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcAppliedValue<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public abstract class IfcAppliedValue extends InternalAccessClass implements IfcObjectReferenceSelect, ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcText","IfcAppliedValueSelect","IfcMeasureWithUnit","IfcDateTimeSelect","IfcDateTimeSelect"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** Name is an OPTIONAL attribute**/
	protected IfcLabel Name;
	/** Description is an OPTIONAL attribute**/
	protected IfcText Description;
	/** AppliedValue is an OPTIONAL attribute**/
	protected IfcAppliedValueSelect AppliedValue;
	/** UnitBasis is an OPTIONAL attribute**/
	protected IfcMeasureWithUnit UnitBasis;
	/** ApplicableDate is an OPTIONAL attribute**/
	protected IfcDateTimeSelect ApplicableDate;
	/** FixedUntilDate is an OPTIONAL attribute**/
	protected IfcDateTimeSelect FixedUntilDate;
	protected SET<IfcReferencesValueDocument> ValuesReferenced_Inverse;
	protected SET<IfcAppliedValueRelationship> ValueOfComponents_Inverse;
	protected SET<IfcAppliedValueRelationship> IsComponentIn_Inverse;
	/**
	* The default constructor.
	**/
	public IfcAppliedValue(){}

	private static final String[] attributes = new String[]{"Name","Description","AppliedValue","UnitBasis","ApplicableDate","FixedUntilDate"};

	public String[] getAttributes() {
		return IfcAppliedValue.attributes;
	}

	/**
	* Constructs a new IfcAppliedValue object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param AppliedValue OPTIONAL parameter of type IfcAppliedValueSelect
	* @param UnitBasis OPTIONAL parameter of type IfcMeasureWithUnit
	* @param ApplicableDate OPTIONAL parameter of type IfcDateTimeSelect
	* @param FixedUntilDate OPTIONAL parameter of type IfcDateTimeSelect
	**/
	public IfcAppliedValue(IfcLabel Name, IfcText Description, IfcAppliedValueSelect AppliedValue, IfcMeasureWithUnit UnitBasis, IfcDateTimeSelect ApplicableDate, IfcDateTimeSelect FixedUntilDate)
	{
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcAppliedValue object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param AppliedValue OPTIONAL parameter of type IfcAppliedValueSelect
	* @param UnitBasis OPTIONAL parameter of type IfcMeasureWithUnit
	* @param ApplicableDate OPTIONAL parameter of type IfcDateTimeSelect
	* @param FixedUntilDate OPTIONAL parameter of type IfcDateTimeSelect
	**/
	public void setParameters(IfcLabel Name, IfcText Description, IfcAppliedValueSelect AppliedValue, IfcMeasureWithUnit UnitBasis, IfcDateTimeSelect ApplicableDate, IfcDateTimeSelect FixedUntilDate)
	{
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.Description = (IfcText) parameters.get(1);
		this.AppliedValue = (IfcAppliedValueSelect) parameters.get(2);
		this.UnitBasis = (IfcMeasureWithUnit) parameters.get(3);
		this.ApplicableDate = (IfcDateTimeSelect) parameters.get(4);
		this.FixedUntilDate = (IfcDateTimeSelect) parameters.get(5);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
		ValuesReferenced_Inverse = null;
		ValueOfComponents_Inverse = null;
		IsComponentIn_Inverse = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcAppliedValue.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCAPPLIEDVALUE(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AppliedValue")) stepString = stepString.concat("*,");
		else{
		if(this.AppliedValue != null)		stepString = stepString.concat(((RootInterface)this.AppliedValue).getStepParameter(IfcAppliedValueSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UnitBasis")) stepString = stepString.concat("*,");
		else{
		if(this.UnitBasis != null)		stepString = stepString.concat(((RootInterface)this.UnitBasis).getStepParameter(IfcMeasureWithUnit.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ApplicableDate")) stepString = stepString.concat("*,");
		else{
		if(this.ApplicableDate != null)		stepString = stepString.concat(((RootInterface)this.ApplicableDate).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FixedUntilDate")) stepString = stepString.concat("*);");
		else{
		if(this.FixedUntilDate != null)		stepString = stepString.concat(((RootInterface)this.FixedUntilDate).getStepParameter(IfcDateTimeSelect.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method returns a copy of the set of the ValuesReferenced_Inverse attribute.
	*
	* @return a copy of the ValuesReferenced_Inverse set
	**/
	public SET<IfcReferencesValueDocument> getValuesReferenced_Inverse()
	{
		if(this.ValuesReferenced_Inverse != null)
			return new SET<IfcReferencesValueDocument>(this.ValuesReferenced_Inverse);
		return null;
	}

	/**
	* This method returns a copy of the set of the ValueOfComponents_Inverse attribute.
	*
	* @return a copy of the ValueOfComponents_Inverse set
	**/
	public SET<IfcAppliedValueRelationship> getValueOfComponents_Inverse()
	{
		if(this.ValueOfComponents_Inverse != null)
			return new SET<IfcAppliedValueRelationship>(this.ValueOfComponents_Inverse);
		return null;
	}

	/**
	* This method returns a copy of the set of the IsComponentIn_Inverse attribute.
	*
	* @return a copy of the IsComponentIn_Inverse set
	**/
	public SET<IfcAppliedValueRelationship> getIsComponentIn_Inverse()
	{
		if(this.IsComponentIn_Inverse != null)
			return new SET<IfcAppliedValueRelationship>(this.IsComponentIn_Inverse);
		return null;
	}

	/**
	* This method sets the Name attribute to the given value.
	*
	* @param Name DEMANDED value to set - may not be null
	**/
	public void setName(IfcLabel Name)
	{
		this.Name = Name;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Name attribute.
	*
	* @return the value of Name
	/**/
	public IfcLabel getName()
	{
		return this.Name;
	}

	/**
	* This method sets the Description attribute to the given value.
	*
	* @param Description DEMANDED value to set - may not be null
	**/
	public void setDescription(IfcText Description)
	{
		this.Description = Description;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Description attribute.
	*
	* @return the value of Description
	/**/
	public IfcText getDescription()
	{
		return this.Description;
	}

	/**
	* This method sets the AppliedValue attribute to the given value.
	*
	* @param AppliedValue DEMANDED value to set - may not be null
	**/
	public void setAppliedValue(IfcAppliedValueSelect AppliedValue)
	{
		this.AppliedValue = AppliedValue;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the AppliedValue attribute.
	*
	* @return the value of AppliedValue
	/**/
	public IfcAppliedValueSelect getAppliedValue()
	{
		return this.AppliedValue;
	}

	/**
	* This method sets the UnitBasis attribute to the given value.
	*
	* @param UnitBasis DEMANDED value to set - may not be null
	**/
	public void setUnitBasis(IfcMeasureWithUnit UnitBasis)
	{
		this.UnitBasis = UnitBasis;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the UnitBasis attribute.
	*
	* @return the value of UnitBasis
	/**/
	public IfcMeasureWithUnit getUnitBasis()
	{
		return this.UnitBasis;
	}

	/**
	* This method sets the ApplicableDate attribute to the given value.
	*
	* @param ApplicableDate DEMANDED value to set - may not be null
	**/
	public void setApplicableDate(IfcDateTimeSelect ApplicableDate)
	{
		this.ApplicableDate = ApplicableDate;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ApplicableDate attribute.
	*
	* @return the value of ApplicableDate
	/**/
	public IfcDateTimeSelect getApplicableDate()
	{
		return this.ApplicableDate;
	}

	/**
	* This method sets the FixedUntilDate attribute to the given value.
	*
	* @param FixedUntilDate DEMANDED value to set - may not be null
	**/
	public void setFixedUntilDate(IfcDateTimeSelect FixedUntilDate)
	{
		this.FixedUntilDate = FixedUntilDate;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the FixedUntilDate attribute.
	*
	* @return the value of FixedUntilDate
	/**/
	public IfcDateTimeSelect getFixedUntilDate()
	{
		return this.FixedUntilDate;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public abstract Object clone();

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public abstract Object shallowCopy();

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
