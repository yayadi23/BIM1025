/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcPostalAddress<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcPostalAddress extends IfcAddress implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcAddressTypeEnum","IfcText","IfcLabel","IfcLabel","LIST<IfcLabel>","IfcLabel","IfcLabel","IfcLabel","IfcLabel","IfcLabel"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** InternalLocation is an OPTIONAL attribute**/
	protected IfcLabel InternalLocation;
	/** AddressLines is an OPTIONAL attribute**/
	protected LIST<IfcLabel> AddressLines;
	/** PostalBox is an OPTIONAL attribute**/
	protected IfcLabel PostalBox;
	/** Town is an OPTIONAL attribute**/
	protected IfcLabel Town;
	/** Region is an OPTIONAL attribute**/
	protected IfcLabel Region;
	/** PostalCode is an OPTIONAL attribute**/
	protected IfcLabel PostalCode;
	/** Country is an OPTIONAL attribute**/
	protected IfcLabel Country;
	/**
	* The default constructor.
	**/
	public IfcPostalAddress(){}

	private static final String[] attributes = new String[]{"Purpose","Description","UserDefinedPurpose","InternalLocation"
	,"AddressLines","PostalBox","Town","Region","PostalCode","Country"};

	public String[] getAttributes() {
		return IfcPostalAddress.attributes;
	}

	/**
	* Constructs a new IfcPostalAddress object using the given parameters.
	*
	* @param Purpose OPTIONAL parameter of type IfcAddressTypeEnum
	* @param Description OPTIONAL parameter of type IfcText
	* @param UserDefinedPurpose OPTIONAL parameter of type IfcLabel
	* @param InternalLocation OPTIONAL parameter of type IfcLabel
	* @param AddressLines OPTIONAL parameter of type LIST<IfcLabel>
	* @param PostalBox OPTIONAL parameter of type IfcLabel
	* @param Town OPTIONAL parameter of type IfcLabel
	* @param Region OPTIONAL parameter of type IfcLabel
	* @param PostalCode OPTIONAL parameter of type IfcLabel
	* @param Country OPTIONAL parameter of type IfcLabel
	**/
	public IfcPostalAddress(IfcAddressTypeEnum Purpose, IfcText Description, IfcLabel UserDefinedPurpose, IfcLabel InternalLocation, LIST<IfcLabel> AddressLines, IfcLabel PostalBox, IfcLabel Town, IfcLabel Region, IfcLabel PostalCode, IfcLabel Country)
	{
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
		this.InternalLocation = InternalLocation;
		this.AddressLines = AddressLines;
		this.PostalBox = PostalBox;
		this.Town = Town;
		this.Region = Region;
		this.PostalCode = PostalCode;
		this.Country = Country;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcPostalAddress object using the given parameters.
	*
	* @param Purpose OPTIONAL parameter of type IfcAddressTypeEnum
	* @param Description OPTIONAL parameter of type IfcText
	* @param UserDefinedPurpose OPTIONAL parameter of type IfcLabel
	* @param InternalLocation OPTIONAL parameter of type IfcLabel
	* @param AddressLines OPTIONAL parameter of type LIST<IfcLabel>
	* @param PostalBox OPTIONAL parameter of type IfcLabel
	* @param Town OPTIONAL parameter of type IfcLabel
	* @param Region OPTIONAL parameter of type IfcLabel
	* @param PostalCode OPTIONAL parameter of type IfcLabel
	* @param Country OPTIONAL parameter of type IfcLabel
	**/
	public void setParameters(IfcAddressTypeEnum Purpose, IfcText Description, IfcLabel UserDefinedPurpose, IfcLabel InternalLocation, LIST<IfcLabel> AddressLines, IfcLabel PostalBox, IfcLabel Town, IfcLabel Region, IfcLabel PostalCode, IfcLabel Country)
	{
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
		this.InternalLocation = InternalLocation;
		this.AddressLines = AddressLines;
		this.PostalBox = PostalBox;
		this.Town = Town;
		this.Region = Region;
		this.PostalCode = PostalCode;
		this.Country = Country;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Purpose = (IfcAddressTypeEnum) parameters.get(0);
		this.Description = (IfcText) parameters.get(1);
		this.UserDefinedPurpose = (IfcLabel) parameters.get(2);
		this.InternalLocation = (IfcLabel) parameters.get(3);
		this.AddressLines = (LIST<IfcLabel>) parameters.get(4);
		this.PostalBox = (IfcLabel) parameters.get(5);
		this.Town = (IfcLabel) parameters.get(6);
		this.Region = (IfcLabel) parameters.get(7);
		this.PostalCode = (IfcLabel) parameters.get(8);
		this.Country = (IfcLabel) parameters.get(9);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcPostalAddress.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCPOSTALADDRESS(");
		if(getRedefinedDerivedAttributeTypes().contains("Purpose")) stepString = stepString.concat("*,");
		else{
		if(this.Purpose != null)		stepString = stepString.concat(((RootInterface)this.Purpose).getStepParameter(IfcAddressTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UserDefinedPurpose")) stepString = stepString.concat("*,");
		else{
		if(this.UserDefinedPurpose != null)		stepString = stepString.concat(((RootInterface)this.UserDefinedPurpose).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("InternalLocation")) stepString = stepString.concat("*,");
		else{
		if(this.InternalLocation != null)		stepString = stepString.concat(((RootInterface)this.InternalLocation).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AddressLines")) stepString = stepString.concat("*,");
		else{
		if(this.AddressLines != null)		stepString = stepString.concat(((RootInterface)this.AddressLines).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PostalBox")) stepString = stepString.concat("*,");
		else{
		if(this.PostalBox != null)		stepString = stepString.concat(((RootInterface)this.PostalBox).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Town")) stepString = stepString.concat("*,");
		else{
		if(this.Town != null)		stepString = stepString.concat(((RootInterface)this.Town).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Region")) stepString = stepString.concat("*,");
		else{
		if(this.Region != null)		stepString = stepString.concat(((RootInterface)this.Region).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PostalCode")) stepString = stepString.concat("*,");
		else{
		if(this.PostalCode != null)		stepString = stepString.concat(((RootInterface)this.PostalCode).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Country")) stepString = stepString.concat("*);");
		else{
		if(this.Country != null)		stepString = stepString.concat(((RootInterface)this.Country).getStepParameter(IfcLabel.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the InternalLocation attribute to the given value.
	*
	* @param InternalLocation DEMANDED value to set - may not be null
	**/
	public void setInternalLocation(IfcLabel InternalLocation)
	{
		this.InternalLocation = InternalLocation;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the InternalLocation attribute.
	*
	* @return the value of InternalLocation
	/**/
	public IfcLabel getInternalLocation()
	{
		return this.InternalLocation;
	}

	/**
	* This method sets the AddressLines attribute to the given value.
	*
	* @param AddressLines DEMANDED value to set - may not be null
	**/
	public void setAddressLines(LIST<IfcLabel> AddressLines)
	{
		this.AddressLines = AddressLines;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the AddressLines attribute.
	*
	* @return a copy of the AddressLines list
	**/
	public LIST<IfcLabel> getAddressLines()
	{
		if(this.AddressLines != null)
			return new LIST<IfcLabel>(this.AddressLines);
		return null;
	}

	/**
	* This method adds an IfcLabel object to the AddressLines list.
	* @param AddressLines element to be appended to this list.
	**/
	public void addAddressLines(IfcLabel AddressLines)
	{
		if(this.AddressLines == null)
			this.AddressLines = new LIST<IfcLabel>();
		this.AddressLines.add(AddressLines);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcLabel objects to the AddressLines list.
	* @param AddressLines collection containing elements to be added to this list.
	**/
	public void addAllAddressLines(java.util.Collection<IfcLabel> AddressLines)
	{
		if(this.AddressLines == null)
			this.AddressLines = new LIST<IfcLabel>();
		this.AddressLines.addAll(AddressLines);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the AddressLines list.
	**/
	public void clearAddressLines()
	{
		if(this.AddressLines != null)
		{
			this.AddressLines.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcLabel object from the AddressLines list.
	* @param AddressLines element to be removed from this list.
	**/
	public void removeAddressLines(IfcLabel AddressLines)
	{
		if(this.AddressLines != null)
		{
			this.AddressLines.remove(AddressLines);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcLabel objects from the AddressLines list.
	* @param AddressLines collection containing elements to be removed from this list.
	**/
	public void removeAllAddressLines(java.util.Collection<IfcLabel> AddressLines)
	{
		if(this.AddressLines != null)
		{
			this.AddressLines.removeAll(AddressLines);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the PostalBox attribute to the given value.
	*
	* @param PostalBox DEMANDED value to set - may not be null
	**/
	public void setPostalBox(IfcLabel PostalBox)
	{
		this.PostalBox = PostalBox;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PostalBox attribute.
	*
	* @return the value of PostalBox
	/**/
	public IfcLabel getPostalBox()
	{
		return this.PostalBox;
	}

	/**
	* This method sets the Town attribute to the given value.
	*
	* @param Town DEMANDED value to set - may not be null
	**/
	public void setTown(IfcLabel Town)
	{
		this.Town = Town;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Town attribute.
	*
	* @return the value of Town
	/**/
	public IfcLabel getTown()
	{
		return this.Town;
	}

	/**
	* This method sets the Region attribute to the given value.
	*
	* @param Region DEMANDED value to set - may not be null
	**/
	public void setRegion(IfcLabel Region)
	{
		this.Region = Region;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Region attribute.
	*
	* @return the value of Region
	/**/
	public IfcLabel getRegion()
	{
		return this.Region;
	}

	/**
	* This method sets the PostalCode attribute to the given value.
	*
	* @param PostalCode DEMANDED value to set - may not be null
	**/
	public void setPostalCode(IfcLabel PostalCode)
	{
		this.PostalCode = PostalCode;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PostalCode attribute.
	*
	* @return the value of PostalCode
	/**/
	public IfcLabel getPostalCode()
	{
		return this.PostalCode;
	}

	/**
	* This method sets the Country attribute to the given value.
	*
	* @param Country DEMANDED value to set - may not be null
	**/
	public void setCountry(IfcLabel Country)
	{
		this.Country = Country;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Country attribute.
	*
	* @return the value of Country
	/**/
	public IfcLabel getCountry()
	{
		return this.Country;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcPostalAddress ifcPostalAddress = new IfcPostalAddress();
		if(this.Purpose != null)
			ifcPostalAddress.setPurpose((IfcAddressTypeEnum)this.Purpose.clone());
		if(this.Description != null)
			ifcPostalAddress.setDescription((IfcText)this.Description.clone());
		if(this.UserDefinedPurpose != null)
			ifcPostalAddress.setUserDefinedPurpose((IfcLabel)this.UserDefinedPurpose.clone());
		if(this.InternalLocation != null)
			ifcPostalAddress.setInternalLocation((IfcLabel)this.InternalLocation.clone());
		if(this.AddressLines != null)
			ifcPostalAddress.setAddressLines((LIST<IfcLabel>)this.AddressLines.clone());
		if(this.PostalBox != null)
			ifcPostalAddress.setPostalBox((IfcLabel)this.PostalBox.clone());
		if(this.Town != null)
			ifcPostalAddress.setTown((IfcLabel)this.Town.clone());
		if(this.Region != null)
			ifcPostalAddress.setRegion((IfcLabel)this.Region.clone());
		if(this.PostalCode != null)
			ifcPostalAddress.setPostalCode((IfcLabel)this.PostalCode.clone());
		if(this.Country != null)
			ifcPostalAddress.setCountry((IfcLabel)this.Country.clone());
		return ifcPostalAddress;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcPostalAddress ifcPostalAddress = new IfcPostalAddress();
		if(this.Purpose != null)
			ifcPostalAddress.setPurpose(this.Purpose);
		if(this.Description != null)
			ifcPostalAddress.setDescription(this.Description);
		if(this.UserDefinedPurpose != null)
			ifcPostalAddress.setUserDefinedPurpose(this.UserDefinedPurpose);
		if(this.InternalLocation != null)
			ifcPostalAddress.setInternalLocation(this.InternalLocation);
		if(this.AddressLines != null)
			ifcPostalAddress.setAddressLines(this.AddressLines);
		if(this.PostalBox != null)
			ifcPostalAddress.setPostalBox(this.PostalBox);
		if(this.Town != null)
			ifcPostalAddress.setTown(this.Town);
		if(this.Region != null)
			ifcPostalAddress.setRegion(this.Region);
		if(this.PostalCode != null)
			ifcPostalAddress.setPostalCode(this.PostalCode);
		if(this.Country != null)
			ifcPostalAddress.setCountry(this.Country);
		return ifcPostalAddress;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
