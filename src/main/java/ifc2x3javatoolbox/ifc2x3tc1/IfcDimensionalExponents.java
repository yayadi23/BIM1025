/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcDimensionalExponents<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcDimensionalExponents extends InternalAccessClass implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"INTEGER","INTEGER","INTEGER","INTEGER","INTEGER","INTEGER","INTEGER"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** LengthExponent is an DEMANDED attribute - may not be null**/
	protected INTEGER LengthExponent;
	/** MassExponent is an DEMANDED attribute - may not be null**/
	protected INTEGER MassExponent;
	/** TimeExponent is an DEMANDED attribute - may not be null**/
	protected INTEGER TimeExponent;
	/** ElectricCurrentExponent is an DEMANDED attribute - may not be null**/
	protected INTEGER ElectricCurrentExponent;
	/** ThermodynamicTemperatureExponent is an DEMANDED attribute - may not be null**/
	protected INTEGER ThermodynamicTemperatureExponent;
	/** AmountOfSubstanceExponent is an DEMANDED attribute - may not be null**/
	protected INTEGER AmountOfSubstanceExponent;
	/** LuminousIntensityExponent is an DEMANDED attribute - may not be null**/
	protected INTEGER LuminousIntensityExponent;
	/**
	* The default constructor.
	**/
	public IfcDimensionalExponents(){}

	private static final String[] attributes = new String[]{"LengthExponent","MassExponent"
			,"TimeExponent","ElectricCurrentExponent","ThermodynamicTemperatureExponent"
			,"AmountOfSubstanceExponent","LuminousIntensityExponent"};

	public String[] getAttributes() {
		return IfcDimensionalExponents.attributes;
	}

	/**
	* Constructs a new IfcDimensionalExponents object using the given parameters.
	*
	* @param LengthExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param MassExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param TimeExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param ElectricCurrentExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param ThermodynamicTemperatureExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param AmountOfSubstanceExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param LuminousIntensityExponent DEMANDED parameter of type INTEGER - may not be null.
	**/
	public IfcDimensionalExponents(INTEGER LengthExponent, INTEGER MassExponent, INTEGER TimeExponent, INTEGER ElectricCurrentExponent, INTEGER ThermodynamicTemperatureExponent, INTEGER AmountOfSubstanceExponent, INTEGER LuminousIntensityExponent)
	{
		this.LengthExponent = LengthExponent;
		this.MassExponent = MassExponent;
		this.TimeExponent = TimeExponent;
		this.ElectricCurrentExponent = ElectricCurrentExponent;
		this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
		this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
		this.LuminousIntensityExponent = LuminousIntensityExponent;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcDimensionalExponents object using the given parameters.
	*
	* @param LengthExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param MassExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param TimeExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param ElectricCurrentExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param ThermodynamicTemperatureExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param AmountOfSubstanceExponent DEMANDED parameter of type INTEGER - may not be null.
	* @param LuminousIntensityExponent DEMANDED parameter of type INTEGER - may not be null.
	**/
	public void setParameters(INTEGER LengthExponent, INTEGER MassExponent, INTEGER TimeExponent, INTEGER ElectricCurrentExponent, INTEGER ThermodynamicTemperatureExponent, INTEGER AmountOfSubstanceExponent, INTEGER LuminousIntensityExponent)
	{
		this.LengthExponent = LengthExponent;
		this.MassExponent = MassExponent;
		this.TimeExponent = TimeExponent;
		this.ElectricCurrentExponent = ElectricCurrentExponent;
		this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
		this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
		this.LuminousIntensityExponent = LuminousIntensityExponent;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.LengthExponent = (INTEGER) parameters.get(0);
		this.MassExponent = (INTEGER) parameters.get(1);
		this.TimeExponent = (INTEGER) parameters.get(2);
		this.ElectricCurrentExponent = (INTEGER) parameters.get(3);
		this.ThermodynamicTemperatureExponent = (INTEGER) parameters.get(4);
		this.AmountOfSubstanceExponent = (INTEGER) parameters.get(5);
		this.LuminousIntensityExponent = (INTEGER) parameters.get(6);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcDimensionalExponents.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCDIMENSIONALEXPONENTS(");
		if(getRedefinedDerivedAttributeTypes().contains("LengthExponent")) stepString = stepString.concat("*,");
		else{
		if(this.LengthExponent != null)		stepString = stepString.concat(((RootInterface)this.LengthExponent).getStepParameter(INTEGER.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MassExponent")) stepString = stepString.concat("*,");
		else{
		if(this.MassExponent != null)		stepString = stepString.concat(((RootInterface)this.MassExponent).getStepParameter(INTEGER.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TimeExponent")) stepString = stepString.concat("*,");
		else{
		if(this.TimeExponent != null)		stepString = stepString.concat(((RootInterface)this.TimeExponent).getStepParameter(INTEGER.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ElectricCurrentExponent")) stepString = stepString.concat("*,");
		else{
		if(this.ElectricCurrentExponent != null)		stepString = stepString.concat(((RootInterface)this.ElectricCurrentExponent).getStepParameter(INTEGER.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ThermodynamicTemperatureExponent")) stepString = stepString.concat("*,");
		else{
		if(this.ThermodynamicTemperatureExponent != null)		stepString = stepString.concat(((RootInterface)this.ThermodynamicTemperatureExponent).getStepParameter(INTEGER.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AmountOfSubstanceExponent")) stepString = stepString.concat("*,");
		else{
		if(this.AmountOfSubstanceExponent != null)		stepString = stepString.concat(((RootInterface)this.AmountOfSubstanceExponent).getStepParameter(INTEGER.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LuminousIntensityExponent")) stepString = stepString.concat("*);");
		else{
		if(this.LuminousIntensityExponent != null)		stepString = stepString.concat(((RootInterface)this.LuminousIntensityExponent).getStepParameter(INTEGER.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the LengthExponent attribute to the given value.
	*
	* @param LengthExponent OPTIONAL value to set
	**/
	public void setLengthExponent(INTEGER LengthExponent)
	{
		this.LengthExponent = LengthExponent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LengthExponent attribute.
	*
	* @return the value of LengthExponent
	/**/
	public INTEGER getLengthExponent()
	{
		return this.LengthExponent;
	}

	/**
	* This method sets the MassExponent attribute to the given value.
	*
	* @param MassExponent OPTIONAL value to set
	**/
	public void setMassExponent(INTEGER MassExponent)
	{
		this.MassExponent = MassExponent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MassExponent attribute.
	*
	* @return the value of MassExponent
	/**/
	public INTEGER getMassExponent()
	{
		return this.MassExponent;
	}

	/**
	* This method sets the TimeExponent attribute to the given value.
	*
	* @param TimeExponent OPTIONAL value to set
	**/
	public void setTimeExponent(INTEGER TimeExponent)
	{
		this.TimeExponent = TimeExponent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TimeExponent attribute.
	*
	* @return the value of TimeExponent
	/**/
	public INTEGER getTimeExponent()
	{
		return this.TimeExponent;
	}

	/**
	* This method sets the ElectricCurrentExponent attribute to the given value.
	*
	* @param ElectricCurrentExponent OPTIONAL value to set
	**/
	public void setElectricCurrentExponent(INTEGER ElectricCurrentExponent)
	{
		this.ElectricCurrentExponent = ElectricCurrentExponent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ElectricCurrentExponent attribute.
	*
	* @return the value of ElectricCurrentExponent
	/**/
	public INTEGER getElectricCurrentExponent()
	{
		return this.ElectricCurrentExponent;
	}

	/**
	* This method sets the ThermodynamicTemperatureExponent attribute to the given value.
	*
	* @param ThermodynamicTemperatureExponent OPTIONAL value to set
	**/
	public void setThermodynamicTemperatureExponent(INTEGER ThermodynamicTemperatureExponent)
	{
		this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ThermodynamicTemperatureExponent attribute.
	*
	* @return the value of ThermodynamicTemperatureExponent
	/**/
	public INTEGER getThermodynamicTemperatureExponent()
	{
		return this.ThermodynamicTemperatureExponent;
	}

	/**
	* This method sets the AmountOfSubstanceExponent attribute to the given value.
	*
	* @param AmountOfSubstanceExponent OPTIONAL value to set
	**/
	public void setAmountOfSubstanceExponent(INTEGER AmountOfSubstanceExponent)
	{
		this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the AmountOfSubstanceExponent attribute.
	*
	* @return the value of AmountOfSubstanceExponent
	/**/
	public INTEGER getAmountOfSubstanceExponent()
	{
		return this.AmountOfSubstanceExponent;
	}

	/**
	* This method sets the LuminousIntensityExponent attribute to the given value.
	*
	* @param LuminousIntensityExponent OPTIONAL value to set
	**/
	public void setLuminousIntensityExponent(INTEGER LuminousIntensityExponent)
	{
		this.LuminousIntensityExponent = LuminousIntensityExponent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LuminousIntensityExponent attribute.
	*
	* @return the value of LuminousIntensityExponent
	/**/
	public INTEGER getLuminousIntensityExponent()
	{
		return this.LuminousIntensityExponent;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcDimensionalExponents ifcDimensionalExponents = new IfcDimensionalExponents();
		if(this.LengthExponent != null)
			ifcDimensionalExponents.setLengthExponent((INTEGER)this.LengthExponent.clone());
		if(this.MassExponent != null)
			ifcDimensionalExponents.setMassExponent((INTEGER)this.MassExponent.clone());
		if(this.TimeExponent != null)
			ifcDimensionalExponents.setTimeExponent((INTEGER)this.TimeExponent.clone());
		if(this.ElectricCurrentExponent != null)
			ifcDimensionalExponents.setElectricCurrentExponent((INTEGER)this.ElectricCurrentExponent.clone());
		if(this.ThermodynamicTemperatureExponent != null)
			ifcDimensionalExponents.setThermodynamicTemperatureExponent((INTEGER)this.ThermodynamicTemperatureExponent.clone());
		if(this.AmountOfSubstanceExponent != null)
			ifcDimensionalExponents.setAmountOfSubstanceExponent((INTEGER)this.AmountOfSubstanceExponent.clone());
		if(this.LuminousIntensityExponent != null)
			ifcDimensionalExponents.setLuminousIntensityExponent((INTEGER)this.LuminousIntensityExponent.clone());
		return ifcDimensionalExponents;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcDimensionalExponents ifcDimensionalExponents = new IfcDimensionalExponents();
		if(this.LengthExponent != null)
			ifcDimensionalExponents.setLengthExponent(this.LengthExponent);
		if(this.MassExponent != null)
			ifcDimensionalExponents.setMassExponent(this.MassExponent);
		if(this.TimeExponent != null)
			ifcDimensionalExponents.setTimeExponent(this.TimeExponent);
		if(this.ElectricCurrentExponent != null)
			ifcDimensionalExponents.setElectricCurrentExponent(this.ElectricCurrentExponent);
		if(this.ThermodynamicTemperatureExponent != null)
			ifcDimensionalExponents.setThermodynamicTemperatureExponent(this.ThermodynamicTemperatureExponent);
		if(this.AmountOfSubstanceExponent != null)
			ifcDimensionalExponents.setAmountOfSubstanceExponent(this.AmountOfSubstanceExponent);
		if(this.LuminousIntensityExponent != null)
			ifcDimensionalExponents.setLuminousIntensityExponent(this.LuminousIntensityExponent);
		return ifcDimensionalExponents;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
