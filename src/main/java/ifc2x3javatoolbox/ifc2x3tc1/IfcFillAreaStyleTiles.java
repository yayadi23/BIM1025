/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcFillAreaStyleTiles<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcFillAreaStyleTiles extends IfcGeometricRepresentationItem implements IfcFillStyleSelect, ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcOneDirectionRepeatFactor","SET<IfcFillAreaStyleTileShapeSelect>","IfcPositiveRatioMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** TilingPattern is an DEMANDED attribute - may not be null**/
	protected IfcOneDirectionRepeatFactor TilingPattern;
	/** Tiles is an DEMANDED attribute - may not be null**/
	protected SET<IfcFillAreaStyleTileShapeSelect> Tiles;
	/** TilingScale is an DEMANDED attribute - may not be null**/
	protected IfcPositiveRatioMeasure TilingScale;
	/**
	* The default constructor.
	**/
	public IfcFillAreaStyleTiles(){}

	private static final String[] attributes = new String[]{"TilingPattern","Tiles","TilingScale"};

	public String[] getAttributes() {
		return IfcFillAreaStyleTiles.attributes;
	}

	/**
	* Constructs a new IfcFillAreaStyleTiles object using the given parameters.
	*
	* @param TilingPattern DEMANDED parameter of type IfcOneDirectionRepeatFactor - may not be null.
	* @param Tiles DEMANDED parameter of type SET<IfcFillAreaStyleTileShapeSelect> - may not be null.
	* @param TilingScale DEMANDED parameter of type IfcPositiveRatioMeasure - may not be null.
	**/
	public IfcFillAreaStyleTiles(IfcOneDirectionRepeatFactor TilingPattern, SET<IfcFillAreaStyleTileShapeSelect> Tiles, IfcPositiveRatioMeasure TilingScale)
	{
		this.TilingPattern = TilingPattern;
		this.Tiles = Tiles;
		this.TilingScale = TilingScale;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcFillAreaStyleTiles object using the given parameters.
	*
	* @param TilingPattern DEMANDED parameter of type IfcOneDirectionRepeatFactor - may not be null.
	* @param Tiles DEMANDED parameter of type SET<IfcFillAreaStyleTileShapeSelect> - may not be null.
	* @param TilingScale DEMANDED parameter of type IfcPositiveRatioMeasure - may not be null.
	**/
	public void setParameters(IfcOneDirectionRepeatFactor TilingPattern, SET<IfcFillAreaStyleTileShapeSelect> Tiles, IfcPositiveRatioMeasure TilingScale)
	{
		this.TilingPattern = TilingPattern;
		this.Tiles = Tiles;
		this.TilingScale = TilingScale;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.TilingPattern = (IfcOneDirectionRepeatFactor) parameters.get(0);
		this.Tiles = (SET<IfcFillAreaStyleTileShapeSelect>) parameters.get(1);
		this.TilingScale = (IfcPositiveRatioMeasure) parameters.get(2);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcFillAreaStyleTiles.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCFILLAREASTYLETILES(");
		if(getRedefinedDerivedAttributeTypes().contains("TilingPattern")) stepString = stepString.concat("*,");
		else{
		if(this.TilingPattern != null)		stepString = stepString.concat(((RootInterface)this.TilingPattern).getStepParameter(IfcOneDirectionRepeatFactor.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Tiles")) stepString = stepString.concat("*,");
		else{
		if(this.Tiles != null)		stepString = stepString.concat(((RootInterface)this.Tiles).getStepParameter(IfcFillAreaStyleTileShapeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TilingScale")) stepString = stepString.concat("*);");
		else{
		if(this.TilingScale != null)		stepString = stepString.concat(((RootInterface)this.TilingScale).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the TilingPattern attribute to the given value.
	*
	* @param TilingPattern OPTIONAL value to set
	**/
	public void setTilingPattern(IfcOneDirectionRepeatFactor TilingPattern)
	{
		this.TilingPattern = TilingPattern;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TilingPattern attribute.
	*
	* @return the value of TilingPattern
	/**/
	public IfcOneDirectionRepeatFactor getTilingPattern()
	{
		return this.TilingPattern;
	}

	/**
	* This method sets the Tiles attribute to the given value.
	*
	* @param Tiles OPTIONAL value to set
	**/
	public void setTiles(SET<IfcFillAreaStyleTileShapeSelect> Tiles)
	{
		this.Tiles = Tiles;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the Tiles attribute.
	*
	* @return a copy of the Tiles set
	**/
	public SET<IfcFillAreaStyleTileShapeSelect> getTiles()
	{
		if(this.Tiles != null)
			return new SET<IfcFillAreaStyleTileShapeSelect>(this.Tiles);
		return null;
	}

	/**
	* This method adds an IfcFillAreaStyleTileShapeSelect object to the Tiles set.
	* @param Tiles element to be appended to this set.
	**/
	public void addTiles(IfcFillAreaStyleTileShapeSelect Tiles)
	{
		if(this.Tiles == null)
			this.Tiles = new SET<IfcFillAreaStyleTileShapeSelect>();
		this.Tiles.add(Tiles);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcFillAreaStyleTileShapeSelect objects to the Tiles set.
	* @param Tiles collection containing elements to be added to this set.
	**/
	public void addAllTiles(java.util.Collection<IfcFillAreaStyleTileShapeSelect> Tiles)
	{
		if(this.Tiles == null)
			this.Tiles = new SET<IfcFillAreaStyleTileShapeSelect>();
		this.Tiles.addAll(Tiles);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the Tiles set.
	**/
	public void clearTiles()
	{
		if(this.Tiles != null)
		{
			this.Tiles.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcFillAreaStyleTileShapeSelect object from the Tiles set.
	* @param Tiles element to be removed from this set.
	**/
	public void removeTiles(IfcFillAreaStyleTileShapeSelect Tiles)
	{
		if(this.Tiles != null)
		{
			this.Tiles.remove(Tiles);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcFillAreaStyleTileShapeSelect objects from the Tiles set.
	* @param Tiles collection containing elements to be removed from this set.
	**/
	public void removeAllTiles(java.util.Collection<IfcFillAreaStyleTileShapeSelect> Tiles)
	{
		if(this.Tiles != null)
		{
			this.Tiles.removeAll(Tiles);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the TilingScale attribute to the given value.
	*
	* @param TilingScale OPTIONAL value to set
	**/
	public void setTilingScale(IfcPositiveRatioMeasure TilingScale)
	{
		this.TilingScale = TilingScale;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TilingScale attribute.
	*
	* @return the value of TilingScale
	/**/
	public IfcPositiveRatioMeasure getTilingScale()
	{
		return this.TilingScale;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcFillAreaStyleTiles ifcFillAreaStyleTiles = new IfcFillAreaStyleTiles();
		if(this.TilingPattern != null)
			ifcFillAreaStyleTiles.setTilingPattern((IfcOneDirectionRepeatFactor)this.TilingPattern.clone());
		if(this.Tiles != null)
			ifcFillAreaStyleTiles.setTiles((SET<IfcFillAreaStyleTileShapeSelect>)this.Tiles.clone());
		if(this.TilingScale != null)
			ifcFillAreaStyleTiles.setTilingScale((IfcPositiveRatioMeasure)this.TilingScale.clone());
		return ifcFillAreaStyleTiles;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcFillAreaStyleTiles ifcFillAreaStyleTiles = new IfcFillAreaStyleTiles();
		if(this.TilingPattern != null)
			ifcFillAreaStyleTiles.setTilingPattern(this.TilingPattern);
		if(this.Tiles != null)
			ifcFillAreaStyleTiles.setTiles(this.Tiles);
		if(this.TilingScale != null)
			ifcFillAreaStyleTiles.setTilingScale(this.TilingScale);
		return ifcFillAreaStyleTiles;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
