/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcTerminatorSymbol<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcTerminatorSymbol extends IfcAnnotationSymbolOccurrence implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcRepresentationItem","SET<IfcPresentationStyleAssignment>","IfcLabel","IfcAnnotationCurveOccurrence"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** AnnotatedCurve is an DEMANDED attribute - may not be null**/
	protected IfcAnnotationCurveOccurrence AnnotatedCurve;
	/**
	* The default constructor.
	**/
	public IfcTerminatorSymbol(){}

	private static final String[] attributes = new String[]{"Item","Styles","Name","AnnotatedCurve"};

	public String[] getAttributes(){
		return IfcTerminatorSymbol.attributes;
	}

	/**
	* Constructs a new IfcTerminatorSymbol object using the given parameters.
	*
	* @param Item OPTIONAL parameter of type IfcRepresentationItem
	* @param Styles DEMANDED parameter of type SET<IfcPresentationStyleAssignment> - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param AnnotatedCurve DEMANDED parameter of type IfcAnnotationCurveOccurrence - may not be null.
	**/
	public IfcTerminatorSymbol(IfcRepresentationItem Item, SET<IfcPresentationStyleAssignment> Styles, IfcLabel Name, IfcAnnotationCurveOccurrence AnnotatedCurve)
	{
		this.Item = Item;
		this.Styles = Styles;
		this.Name = Name;
		this.AnnotatedCurve = AnnotatedCurve;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcTerminatorSymbol object using the given parameters.
	*
	* @param Item OPTIONAL parameter of type IfcRepresentationItem
	* @param Styles DEMANDED parameter of type SET<IfcPresentationStyleAssignment> - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param AnnotatedCurve DEMANDED parameter of type IfcAnnotationCurveOccurrence - may not be null.
	**/
	public void setParameters(IfcRepresentationItem Item, SET<IfcPresentationStyleAssignment> Styles, IfcLabel Name, IfcAnnotationCurveOccurrence AnnotatedCurve)
	{
		this.Item = Item;
		this.Styles = Styles;
		this.Name = Name;
		this.AnnotatedCurve = AnnotatedCurve;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Item = (IfcRepresentationItem) parameters.get(0);
		this.Styles = (SET<IfcPresentationStyleAssignment>) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.AnnotatedCurve = (IfcAnnotationCurveOccurrence) parameters.get(3);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(Item != null)
		{
				if(Item.StyledByItem_Inverse == null)
				{
					Item.StyledByItem_Inverse = new SET<IfcStyledItem>();
				}
				Item.StyledByItem_Inverse.add(this);
		}
		if(AnnotatedCurve != null)
		{
				if(AnnotatedCurve instanceof IfcDimensionCurve)
				{
				if(((IfcDimensionCurve)AnnotatedCurve).AnnotatedBySymbols_Inverse == null)
				{
					((IfcDimensionCurve)AnnotatedCurve).AnnotatedBySymbols_Inverse = new SET<IfcTerminatorSymbol>();
				}
				((IfcDimensionCurve)AnnotatedCurve).AnnotatedBySymbols_Inverse.add(this);
				}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcTerminatorSymbol.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCTERMINATORSYMBOL(");
		if(getRedefinedDerivedAttributeTypes().contains("Item")) stepString = stepString.concat("*,");
		else{
		if(this.Item != null)		stepString = stepString.concat(((RootInterface)this.Item).getStepParameter(IfcRepresentationItem.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Styles")) stepString = stepString.concat("*,");
		else{
		if(this.Styles != null)		stepString = stepString.concat(((RootInterface)this.Styles).getStepParameter(IfcPresentationStyleAssignment.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AnnotatedCurve")) stepString = stepString.concat("*);");
		else{
		if(this.AnnotatedCurve != null)		stepString = stepString.concat(((RootInterface)this.AnnotatedCurve).getStepParameter(IfcAnnotationCurveOccurrence.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the AnnotatedCurve attribute to the given value.
	*
	* @param AnnotatedCurve OPTIONAL value to set
	**/
	public void setAnnotatedCurve(IfcAnnotationCurveOccurrence AnnotatedCurve)
	{
		synchronizeInversesRemoveAnnotatedCurve(this.AnnotatedCurve);
		this.AnnotatedCurve = AnnotatedCurve;
		synchronizeInversesAddAnnotatedCurve(this.AnnotatedCurve);
		fireChangeEvent();
	}

	/**
	* This method returns the value of the AnnotatedCurve attribute.
	*
	* @return the value of AnnotatedCurve
	/**/
	public IfcAnnotationCurveOccurrence getAnnotatedCurve()
	{
		return this.AnnotatedCurve;
	}

	private void synchronizeInversesAddAnnotatedCurve(IfcAnnotationCurveOccurrence AnnotatedCurve)
	{
		if(AnnotatedCurve != null)
		{
				if(AnnotatedCurve instanceof IfcDimensionCurve)
				{
				if(((IfcDimensionCurve)AnnotatedCurve).AnnotatedBySymbols_Inverse == null)
				{
					((IfcDimensionCurve)AnnotatedCurve).AnnotatedBySymbols_Inverse = new SET<IfcTerminatorSymbol>();
				}
				((IfcDimensionCurve)AnnotatedCurve).AnnotatedBySymbols_Inverse.add(this);
				}
		}
	}

	private void synchronizeInversesRemoveAnnotatedCurve(IfcAnnotationCurveOccurrence AnnotatedCurve)
	{
		if(AnnotatedCurve != null)
		{
				if(AnnotatedCurve instanceof IfcDimensionCurve)
				{
				if(((IfcDimensionCurve)AnnotatedCurve).AnnotatedBySymbols_Inverse != null)
				{
				((IfcDimensionCurve)AnnotatedCurve).AnnotatedBySymbols_Inverse.remove(this);
				}
				}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcTerminatorSymbol ifcTerminatorSymbol = new IfcTerminatorSymbol();
		if(this.Item != null)
			ifcTerminatorSymbol.setItem((IfcRepresentationItem)this.Item.clone());
		if(this.Styles != null)
			ifcTerminatorSymbol.setStyles((SET<IfcPresentationStyleAssignment>)this.Styles.clone());
		if(this.Name != null)
			ifcTerminatorSymbol.setName((IfcLabel)this.Name.clone());
		if(this.AnnotatedCurve != null)
			ifcTerminatorSymbol.setAnnotatedCurve((IfcAnnotationCurveOccurrence)this.AnnotatedCurve.clone());
		return ifcTerminatorSymbol;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcTerminatorSymbol ifcTerminatorSymbol = new IfcTerminatorSymbol();
		if(this.Item != null)
			ifcTerminatorSymbol.setItem(this.Item);
		if(this.Styles != null)
			ifcTerminatorSymbol.setStyles(this.Styles);
		if(this.Name != null)
			ifcTerminatorSymbol.setName(this.Name);
		if(this.AnnotatedCurve != null)
			ifcTerminatorSymbol.setAnnotatedCurve(this.AnnotatedCurve);
		return ifcTerminatorSymbol;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
