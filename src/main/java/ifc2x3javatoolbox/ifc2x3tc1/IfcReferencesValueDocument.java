/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcReferencesValueDocument<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcReferencesValueDocument extends InternalAccessClass implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcDocumentSelect","SET<IfcAppliedValue>","IfcLabel","IfcText"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** ReferencedDocument is an DEMANDED attribute - may not be null**/
	protected IfcDocumentSelect ReferencedDocument;
	/** ReferencingValues is an DEMANDED attribute - may not be null**/
	protected SET<IfcAppliedValue> ReferencingValues;
	/** Name is an OPTIONAL attribute**/
	protected IfcLabel Name;
	/** Description is an OPTIONAL attribute**/
	protected IfcText Description;
	/**
	* The default constructor.
	**/
	public IfcReferencesValueDocument(){}

	private static final String[] attributes = new String[]{"ReferencedDocument","ReferencingValues","Name","Description"};

	public String[] getAttributes() {
		return IfcReferencesValueDocument.attributes;
	}

	/**
	* Constructs a new IfcReferencesValueDocument object using the given parameters.
	*
	* @param ReferencedDocument DEMANDED parameter of type IfcDocumentSelect - may not be null.
	* @param ReferencingValues DEMANDED parameter of type SET<IfcAppliedValue> - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	**/
	public IfcReferencesValueDocument(IfcDocumentSelect ReferencedDocument, SET<IfcAppliedValue> ReferencingValues, IfcLabel Name, IfcText Description)
	{
		this.ReferencedDocument = ReferencedDocument;
		this.ReferencingValues = ReferencingValues;
		this.Name = Name;
		this.Description = Description;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcReferencesValueDocument object using the given parameters.
	*
	* @param ReferencedDocument DEMANDED parameter of type IfcDocumentSelect - may not be null.
	* @param ReferencingValues DEMANDED parameter of type SET<IfcAppliedValue> - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	**/
	public void setParameters(IfcDocumentSelect ReferencedDocument, SET<IfcAppliedValue> ReferencingValues, IfcLabel Name, IfcText Description)
	{
		this.ReferencedDocument = ReferencedDocument;
		this.ReferencingValues = ReferencingValues;
		this.Name = Name;
		this.Description = Description;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.ReferencedDocument = (IfcDocumentSelect) parameters.get(0);
		this.ReferencingValues = (SET<IfcAppliedValue>) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(ReferencingValues != null)
		{
			for(IfcAppliedValue ReferencingValues$ : ReferencingValues)
			{
				if(ReferencingValues$.ValuesReferenced_Inverse == null)
				{
					ReferencingValues$.ValuesReferenced_Inverse = new SET<IfcReferencesValueDocument>();
				}
				ReferencingValues$.ValuesReferenced_Inverse.add(this);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcReferencesValueDocument.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCREFERENCESVALUEDOCUMENT(");
		if(getRedefinedDerivedAttributeTypes().contains("ReferencedDocument")) stepString = stepString.concat("*,");
		else{
		if(this.ReferencedDocument != null)		stepString = stepString.concat(((RootInterface)this.ReferencedDocument).getStepParameter(IfcDocumentSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ReferencingValues")) stepString = stepString.concat("*,");
		else{
		if(this.ReferencingValues != null)		stepString = stepString.concat(((RootInterface)this.ReferencingValues).getStepParameter(IfcAppliedValue.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*);");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the ReferencedDocument attribute to the given value.
	*
	* @param ReferencedDocument OPTIONAL value to set
	**/
	public void setReferencedDocument(IfcDocumentSelect ReferencedDocument)
	{
		this.ReferencedDocument = ReferencedDocument;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ReferencedDocument attribute.
	*
	* @return the value of ReferencedDocument
	/**/
	public IfcDocumentSelect getReferencedDocument()
	{
		return this.ReferencedDocument;
	}

	/**
	* This method sets the ReferencingValues attribute to the given value.
	*
	* @param ReferencingValues OPTIONAL value to set
	**/
	public void setReferencingValues(SET<IfcAppliedValue> ReferencingValues)
	{
		synchronizeInversesRemoveReferencingValues(this.ReferencingValues);
		this.ReferencingValues = ReferencingValues;
		synchronizeInversesAddReferencingValues(this.ReferencingValues);
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the ReferencingValues attribute.
	*
	* @return a copy of the ReferencingValues set
	**/
	public SET<IfcAppliedValue> getReferencingValues()
	{
		if(this.ReferencingValues != null)
			return new SET<IfcAppliedValue>(this.ReferencingValues);
		return null;
	}

	/**
	* This method adds an IfcAppliedValue object to the ReferencingValues set.
	* @param ReferencingValues element to be appended to this set.
	**/
	public void addReferencingValues(IfcAppliedValue ReferencingValues)
	{
		if(this.ReferencingValues == null)
			this.ReferencingValues = new SET<IfcAppliedValue>();
		this.ReferencingValues.add(ReferencingValues);
		synchronizeInversesAddReferencingValues(ReferencingValues);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcAppliedValue objects to the ReferencingValues set.
	* @param ReferencingValues collection containing elements to be added to this set.
	**/
	public void addAllReferencingValues(java.util.Collection<IfcAppliedValue> ReferencingValues)
	{
		if(this.ReferencingValues == null)
			this.ReferencingValues = new SET<IfcAppliedValue>();
		this.ReferencingValues.addAll(ReferencingValues);
		synchronizeInversesAddReferencingValues(ReferencingValues);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the ReferencingValues set.
	**/
	public void clearReferencingValues()
	{
		if(this.ReferencingValues != null)
		{
			synchronizeInversesRemoveReferencingValues(this.ReferencingValues);
			this.ReferencingValues.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcAppliedValue object from the ReferencingValues set.
	* @param ReferencingValues element to be removed from this set.
	**/
	public void removeReferencingValues(IfcAppliedValue ReferencingValues)
	{
		if(this.ReferencingValues != null)
		{
			this.ReferencingValues.remove(ReferencingValues);
			synchronizeInversesRemoveReferencingValues(ReferencingValues);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcAppliedValue objects from the ReferencingValues set.
	* @param ReferencingValues collection containing elements to be removed from this set.
	**/
	public void removeAllReferencingValues(java.util.Collection<IfcAppliedValue> ReferencingValues)
	{
		if(this.ReferencingValues != null)
		{
			this.ReferencingValues.removeAll(ReferencingValues);
			synchronizeInversesRemoveReferencingValues(ReferencingValues);
			fireChangeEvent();
		}
	}

	private void synchronizeInversesAddReferencingValues(IfcAppliedValue ReferencingValues)
	{
		if(ReferencingValues != null)
		{
				if(ReferencingValues.ValuesReferenced_Inverse == null)
				{
					ReferencingValues.ValuesReferenced_Inverse = new SET<IfcReferencesValueDocument>();
				}
				ReferencingValues.ValuesReferenced_Inverse.add(this);
		}
	}

	private void synchronizeInversesAddReferencingValues(java.util.Collection<IfcAppliedValue> ReferencingValues)
	{
		if(ReferencingValues != null)
		{
			for(IfcAppliedValue ReferencingValues$ : ReferencingValues)
			{
				synchronizeInversesAddReferencingValues(ReferencingValues$);
			}
		}
	}

	private void synchronizeInversesRemoveReferencingValues(IfcAppliedValue ReferencingValues)
	{
		if(ReferencingValues != null)
		{
				if(ReferencingValues.ValuesReferenced_Inverse != null)
				{
					ReferencingValues.ValuesReferenced_Inverse.remove(this);
				}
		}
	}

	private void synchronizeInversesRemoveReferencingValues(java.util.Collection<IfcAppliedValue> ReferencingValues)
	{
		if(ReferencingValues != null)
		{
			for(IfcAppliedValue ReferencingValues$ : ReferencingValues)
			{
				synchronizeInversesRemoveReferencingValues(ReferencingValues$);
			}
		}
	}

	/**
	* This method sets the Name attribute to the given value.
	*
	* @param Name DEMANDED value to set - may not be null
	**/
	public void setName(IfcLabel Name)
	{
		this.Name = Name;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Name attribute.
	*
	* @return the value of Name
	/**/
	public IfcLabel getName()
	{
		return this.Name;
	}

	/**
	* This method sets the Description attribute to the given value.
	*
	* @param Description DEMANDED value to set - may not be null
	**/
	public void setDescription(IfcText Description)
	{
		this.Description = Description;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Description attribute.
	*
	* @return the value of Description
	/**/
	public IfcText getDescription()
	{
		return this.Description;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcReferencesValueDocument ifcReferencesValueDocument = new IfcReferencesValueDocument();
		if(this.ReferencedDocument != null)
			ifcReferencesValueDocument.setReferencedDocument((IfcDocumentSelect)this.ReferencedDocument.clone());
		if(this.ReferencingValues != null)
			ifcReferencesValueDocument.setReferencingValues((SET<IfcAppliedValue>)this.ReferencingValues.clone());
		if(this.Name != null)
			ifcReferencesValueDocument.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcReferencesValueDocument.setDescription((IfcText)this.Description.clone());
		return ifcReferencesValueDocument;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcReferencesValueDocument ifcReferencesValueDocument = new IfcReferencesValueDocument();
		if(this.ReferencedDocument != null)
			ifcReferencesValueDocument.setReferencedDocument(this.ReferencedDocument);
		if(this.ReferencingValues != null)
			ifcReferencesValueDocument.setReferencingValues(this.ReferencingValues);
		if(this.Name != null)
			ifcReferencesValueDocument.setName(this.Name);
		if(this.Description != null)
			ifcReferencesValueDocument.setDescription(this.Description);
		return ifcReferencesValueDocument;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
