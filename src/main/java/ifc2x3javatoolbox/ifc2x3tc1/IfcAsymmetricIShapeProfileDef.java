/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcAsymmetricIShapeProfileDef<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcAsymmetricIShapeProfileDef extends IfcIShapeProfileDef implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcProfileTypeEnum","IfcLabel","IfcAxis2Placement2D","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** TopFlangeWidth is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure TopFlangeWidth;
	/** TopFlangeThickness is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure TopFlangeThickness;
	/** TopFlangeFilletRadius is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure TopFlangeFilletRadius;
	/** CentreOfGravityInY is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure CentreOfGravityInY;
	/**
	* The default constructor.
	**/
	public IfcAsymmetricIShapeProfileDef(){}

	private static final String[] attributes = new String[]{"ProfileType","ProfileName","Position","OverallWidth"
			,"OverallDepth","WebThickness","FlangeThickness","FilletRadius","TopFlangeWidth","TopFlangeThickness","TopFlangeFilletRadius",
			"CentreOfGravityInY"};

	public String[] getAttributes() {
		return IfcAsymmetricIShapeProfileDef.attributes;
	}

	/**
	* Constructs a new IfcAsymmetricIShapeProfileDef object using the given parameters.
	*
	* @param ProfileType DEMANDED parameter of type IfcProfileTypeEnum - may not be null.
	* @param ProfileName OPTIONAL parameter of type IfcLabel
	* @param Position DEMANDED parameter of type IfcAxis2Placement2D - may not be null.
	* @param OverallWidth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param OverallDepth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param WebThickness DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param FlangeThickness DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param FilletRadius OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TopFlangeWidth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param TopFlangeThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TopFlangeFilletRadius OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param CentreOfGravityInY OPTIONAL parameter of type IfcPositiveLengthMeasure
	**/
	public IfcAsymmetricIShapeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure OverallWidth, IfcPositiveLengthMeasure OverallDepth, IfcPositiveLengthMeasure WebThickness, IfcPositiveLengthMeasure FlangeThickness, IfcPositiveLengthMeasure FilletRadius, IfcPositiveLengthMeasure TopFlangeWidth, IfcPositiveLengthMeasure TopFlangeThickness, IfcPositiveLengthMeasure TopFlangeFilletRadius, IfcPositiveLengthMeasure CentreOfGravityInY)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.OverallWidth = OverallWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.TopFlangeWidth = TopFlangeWidth;
		this.TopFlangeThickness = TopFlangeThickness;
		this.TopFlangeFilletRadius = TopFlangeFilletRadius;
		this.CentreOfGravityInY = CentreOfGravityInY;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcAsymmetricIShapeProfileDef object using the given parameters.
	*
	* @param ProfileType DEMANDED parameter of type IfcProfileTypeEnum - may not be null.
	* @param ProfileName OPTIONAL parameter of type IfcLabel
	* @param Position DEMANDED parameter of type IfcAxis2Placement2D - may not be null.
	* @param OverallWidth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param OverallDepth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param WebThickness DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param FlangeThickness DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param FilletRadius OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TopFlangeWidth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param TopFlangeThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TopFlangeFilletRadius OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param CentreOfGravityInY OPTIONAL parameter of type IfcPositiveLengthMeasure
	**/
	public void setParameters(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure OverallWidth, IfcPositiveLengthMeasure OverallDepth, IfcPositiveLengthMeasure WebThickness, IfcPositiveLengthMeasure FlangeThickness, IfcPositiveLengthMeasure FilletRadius, IfcPositiveLengthMeasure TopFlangeWidth, IfcPositiveLengthMeasure TopFlangeThickness, IfcPositiveLengthMeasure TopFlangeFilletRadius, IfcPositiveLengthMeasure CentreOfGravityInY)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.OverallWidth = OverallWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.TopFlangeWidth = TopFlangeWidth;
		this.TopFlangeThickness = TopFlangeThickness;
		this.TopFlangeFilletRadius = TopFlangeFilletRadius;
		this.CentreOfGravityInY = CentreOfGravityInY;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.ProfileType = (IfcProfileTypeEnum) parameters.get(0);
		this.ProfileName = (IfcLabel) parameters.get(1);
		this.Position = (IfcAxis2Placement2D) parameters.get(2);
		this.OverallWidth = (IfcPositiveLengthMeasure) parameters.get(3);
		this.OverallDepth = (IfcPositiveLengthMeasure) parameters.get(4);
		this.WebThickness = (IfcPositiveLengthMeasure) parameters.get(5);
		this.FlangeThickness = (IfcPositiveLengthMeasure) parameters.get(6);
		this.FilletRadius = (IfcPositiveLengthMeasure) parameters.get(7);
		this.TopFlangeWidth = (IfcPositiveLengthMeasure) parameters.get(8);
		this.TopFlangeThickness = (IfcPositiveLengthMeasure) parameters.get(9);
		this.TopFlangeFilletRadius = (IfcPositiveLengthMeasure) parameters.get(10);
		this.CentreOfGravityInY = (IfcPositiveLengthMeasure) parameters.get(11);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcAsymmetricIShapeProfileDef.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCASYMMETRICISHAPEPROFILEDEF(");
		if(getRedefinedDerivedAttributeTypes().contains("ProfileType")) stepString = stepString.concat("*,");
		else{
		if(this.ProfileType != null)		stepString = stepString.concat(((RootInterface)this.ProfileType).getStepParameter(IfcProfileTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ProfileName")) stepString = stepString.concat("*,");
		else{
		if(this.ProfileName != null)		stepString = stepString.concat(((RootInterface)this.ProfileName).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Position")) stepString = stepString.concat("*,");
		else{
		if(this.Position != null)		stepString = stepString.concat(((RootInterface)this.Position).getStepParameter(IfcAxis2Placement2D.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OverallWidth")) stepString = stepString.concat("*,");
		else{
		if(this.OverallWidth != null)		stepString = stepString.concat(((RootInterface)this.OverallWidth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OverallDepth")) stepString = stepString.concat("*,");
		else{
		if(this.OverallDepth != null)		stepString = stepString.concat(((RootInterface)this.OverallDepth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WebThickness")) stepString = stepString.concat("*,");
		else{
		if(this.WebThickness != null)		stepString = stepString.concat(((RootInterface)this.WebThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FlangeThickness")) stepString = stepString.concat("*,");
		else{
		if(this.FlangeThickness != null)		stepString = stepString.concat(((RootInterface)this.FlangeThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FilletRadius")) stepString = stepString.concat("*,");
		else{
		if(this.FilletRadius != null)		stepString = stepString.concat(((RootInterface)this.FilletRadius).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TopFlangeWidth")) stepString = stepString.concat("*,");
		else{
		if(this.TopFlangeWidth != null)		stepString = stepString.concat(((RootInterface)this.TopFlangeWidth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TopFlangeThickness")) stepString = stepString.concat("*,");
		else{
		if(this.TopFlangeThickness != null)		stepString = stepString.concat(((RootInterface)this.TopFlangeThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TopFlangeFilletRadius")) stepString = stepString.concat("*,");
		else{
		if(this.TopFlangeFilletRadius != null)		stepString = stepString.concat(((RootInterface)this.TopFlangeFilletRadius).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CentreOfGravityInY")) stepString = stepString.concat("*);");
		else{
		if(this.CentreOfGravityInY != null)		stepString = stepString.concat(((RootInterface)this.CentreOfGravityInY).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the TopFlangeWidth attribute to the given value.
	*
	* @param TopFlangeWidth OPTIONAL value to set
	**/
	public void setTopFlangeWidth(IfcPositiveLengthMeasure TopFlangeWidth)
	{
		this.TopFlangeWidth = TopFlangeWidth;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TopFlangeWidth attribute.
	*
	* @return the value of TopFlangeWidth
	/**/
	public IfcPositiveLengthMeasure getTopFlangeWidth()
	{
		return this.TopFlangeWidth;
	}

	/**
	* This method sets the TopFlangeThickness attribute to the given value.
	*
	* @param TopFlangeThickness DEMANDED value to set - may not be null
	**/
	public void setTopFlangeThickness(IfcPositiveLengthMeasure TopFlangeThickness)
	{
		this.TopFlangeThickness = TopFlangeThickness;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TopFlangeThickness attribute.
	*
	* @return the value of TopFlangeThickness
	/**/
	public IfcPositiveLengthMeasure getTopFlangeThickness()
	{
		return this.TopFlangeThickness;
	}

	/**
	* This method sets the TopFlangeFilletRadius attribute to the given value.
	*
	* @param TopFlangeFilletRadius DEMANDED value to set - may not be null
	**/
	public void setTopFlangeFilletRadius(IfcPositiveLengthMeasure TopFlangeFilletRadius)
	{
		this.TopFlangeFilletRadius = TopFlangeFilletRadius;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TopFlangeFilletRadius attribute.
	*
	* @return the value of TopFlangeFilletRadius
	/**/
	public IfcPositiveLengthMeasure getTopFlangeFilletRadius()
	{
		return this.TopFlangeFilletRadius;
	}

	/**
	* This method sets the CentreOfGravityInY attribute to the given value.
	*
	* @param CentreOfGravityInY DEMANDED value to set - may not be null
	**/
	public void setCentreOfGravityInY(IfcPositiveLengthMeasure CentreOfGravityInY)
	{
		this.CentreOfGravityInY = CentreOfGravityInY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the CentreOfGravityInY attribute.
	*
	* @return the value of CentreOfGravityInY
	/**/
	public IfcPositiveLengthMeasure getCentreOfGravityInY()
	{
		return this.CentreOfGravityInY;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcAsymmetricIShapeProfileDef ifcAsymmetricIShapeProfileDef = new IfcAsymmetricIShapeProfileDef();
		if(this.ProfileType != null)
			ifcAsymmetricIShapeProfileDef.setProfileType((IfcProfileTypeEnum)this.ProfileType.clone());
		if(this.ProfileName != null)
			ifcAsymmetricIShapeProfileDef.setProfileName((IfcLabel)this.ProfileName.clone());
		if(this.Position != null)
			ifcAsymmetricIShapeProfileDef.setPosition((IfcAxis2Placement2D)this.Position.clone());
		if(this.OverallWidth != null)
			ifcAsymmetricIShapeProfileDef.setOverallWidth((IfcPositiveLengthMeasure)this.OverallWidth.clone());
		if(this.OverallDepth != null)
			ifcAsymmetricIShapeProfileDef.setOverallDepth((IfcPositiveLengthMeasure)this.OverallDepth.clone());
		if(this.WebThickness != null)
			ifcAsymmetricIShapeProfileDef.setWebThickness((IfcPositiveLengthMeasure)this.WebThickness.clone());
		if(this.FlangeThickness != null)
			ifcAsymmetricIShapeProfileDef.setFlangeThickness((IfcPositiveLengthMeasure)this.FlangeThickness.clone());
		if(this.FilletRadius != null)
			ifcAsymmetricIShapeProfileDef.setFilletRadius((IfcPositiveLengthMeasure)this.FilletRadius.clone());
		if(this.TopFlangeWidth != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeWidth((IfcPositiveLengthMeasure)this.TopFlangeWidth.clone());
		if(this.TopFlangeThickness != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeThickness((IfcPositiveLengthMeasure)this.TopFlangeThickness.clone());
		if(this.TopFlangeFilletRadius != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeFilletRadius((IfcPositiveLengthMeasure)this.TopFlangeFilletRadius.clone());
		if(this.CentreOfGravityInY != null)
			ifcAsymmetricIShapeProfileDef.setCentreOfGravityInY((IfcPositiveLengthMeasure)this.CentreOfGravityInY.clone());
		return ifcAsymmetricIShapeProfileDef;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcAsymmetricIShapeProfileDef ifcAsymmetricIShapeProfileDef = new IfcAsymmetricIShapeProfileDef();
		if(this.ProfileType != null)
			ifcAsymmetricIShapeProfileDef.setProfileType(this.ProfileType);
		if(this.ProfileName != null)
			ifcAsymmetricIShapeProfileDef.setProfileName(this.ProfileName);
		if(this.Position != null)
			ifcAsymmetricIShapeProfileDef.setPosition(this.Position);
		if(this.OverallWidth != null)
			ifcAsymmetricIShapeProfileDef.setOverallWidth(this.OverallWidth);
		if(this.OverallDepth != null)
			ifcAsymmetricIShapeProfileDef.setOverallDepth(this.OverallDepth);
		if(this.WebThickness != null)
			ifcAsymmetricIShapeProfileDef.setWebThickness(this.WebThickness);
		if(this.FlangeThickness != null)
			ifcAsymmetricIShapeProfileDef.setFlangeThickness(this.FlangeThickness);
		if(this.FilletRadius != null)
			ifcAsymmetricIShapeProfileDef.setFilletRadius(this.FilletRadius);
		if(this.TopFlangeWidth != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeWidth(this.TopFlangeWidth);
		if(this.TopFlangeThickness != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeThickness(this.TopFlangeThickness);
		if(this.TopFlangeFilletRadius != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeFilletRadius(this.TopFlangeFilletRadius);
		if(this.CentreOfGravityInY != null)
			ifcAsymmetricIShapeProfileDef.setCentreOfGravityInY(this.CentreOfGravityInY);
		return ifcAsymmetricIShapeProfileDef;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
