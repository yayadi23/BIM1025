/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcStructuralLoadPlanarForce<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcStructuralLoadPlanarForce extends IfcStructuralLoadStatic implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcPlanarForceMeasure","IfcPlanarForceMeasure","IfcPlanarForceMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** PlanarForceX is an OPTIONAL attribute**/
	protected IfcPlanarForceMeasure PlanarForceX;
	/** PlanarForceY is an OPTIONAL attribute**/
	protected IfcPlanarForceMeasure PlanarForceY;
	/** PlanarForceZ is an OPTIONAL attribute**/
	protected IfcPlanarForceMeasure PlanarForceZ;
	/**
	* The default constructor.
	**/
	public IfcStructuralLoadPlanarForce(){}

	private static final String[] attributes = new String[]{"Name","DisplacementX","DisplacementY","DisplacementZ"};

	public String[] getAttributes(){
		return IfcStructuralLoadPlanarForce.attributes;
	}

	/**
	* Constructs a new IfcStructuralLoadPlanarForce object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param PlanarForceX OPTIONAL parameter of type IfcPlanarForceMeasure
	* @param PlanarForceY OPTIONAL parameter of type IfcPlanarForceMeasure
	* @param PlanarForceZ OPTIONAL parameter of type IfcPlanarForceMeasure
	**/
	public IfcStructuralLoadPlanarForce(IfcLabel Name, IfcPlanarForceMeasure PlanarForceX, IfcPlanarForceMeasure PlanarForceY, IfcPlanarForceMeasure PlanarForceZ)
	{
		this.Name = Name;
		this.PlanarForceX = PlanarForceX;
		this.PlanarForceY = PlanarForceY;
		this.PlanarForceZ = PlanarForceZ;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcStructuralLoadPlanarForce object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param PlanarForceX OPTIONAL parameter of type IfcPlanarForceMeasure
	* @param PlanarForceY OPTIONAL parameter of type IfcPlanarForceMeasure
	* @param PlanarForceZ OPTIONAL parameter of type IfcPlanarForceMeasure
	**/
	public void setParameters(IfcLabel Name, IfcPlanarForceMeasure PlanarForceX, IfcPlanarForceMeasure PlanarForceY, IfcPlanarForceMeasure PlanarForceZ)
	{
		this.Name = Name;
		this.PlanarForceX = PlanarForceX;
		this.PlanarForceY = PlanarForceY;
		this.PlanarForceZ = PlanarForceZ;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.PlanarForceX = (IfcPlanarForceMeasure) parameters.get(1);
		this.PlanarForceY = (IfcPlanarForceMeasure) parameters.get(2);
		this.PlanarForceZ = (IfcPlanarForceMeasure) parameters.get(3);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcStructuralLoadPlanarForce.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSTRUCTURALLOADPLANARFORCE(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PlanarForceX")) stepString = stepString.concat("*,");
		else{
		if(this.PlanarForceX != null)		stepString = stepString.concat(((RootInterface)this.PlanarForceX).getStepParameter(IfcPlanarForceMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PlanarForceY")) stepString = stepString.concat("*,");
		else{
		if(this.PlanarForceY != null)		stepString = stepString.concat(((RootInterface)this.PlanarForceY).getStepParameter(IfcPlanarForceMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PlanarForceZ")) stepString = stepString.concat("*);");
		else{
		if(this.PlanarForceZ != null)		stepString = stepString.concat(((RootInterface)this.PlanarForceZ).getStepParameter(IfcPlanarForceMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the PlanarForceX attribute to the given value.
	*
	* @param PlanarForceX DEMANDED value to set - may not be null
	**/
	public void setPlanarForceX(IfcPlanarForceMeasure PlanarForceX)
	{
		this.PlanarForceX = PlanarForceX;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PlanarForceX attribute.
	*
	* @return the value of PlanarForceX
	/**/
	public IfcPlanarForceMeasure getPlanarForceX()
	{
		return this.PlanarForceX;
	}

	/**
	* This method sets the PlanarForceY attribute to the given value.
	*
	* @param PlanarForceY DEMANDED value to set - may not be null
	**/
	public void setPlanarForceY(IfcPlanarForceMeasure PlanarForceY)
	{
		this.PlanarForceY = PlanarForceY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PlanarForceY attribute.
	*
	* @return the value of PlanarForceY
	/**/
	public IfcPlanarForceMeasure getPlanarForceY()
	{
		return this.PlanarForceY;
	}

	/**
	* This method sets the PlanarForceZ attribute to the given value.
	*
	* @param PlanarForceZ DEMANDED value to set - may not be null
	**/
	public void setPlanarForceZ(IfcPlanarForceMeasure PlanarForceZ)
	{
		this.PlanarForceZ = PlanarForceZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PlanarForceZ attribute.
	*
	* @return the value of PlanarForceZ
	/**/
	public IfcPlanarForceMeasure getPlanarForceZ()
	{
		return this.PlanarForceZ;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcStructuralLoadPlanarForce ifcStructuralLoadPlanarForce = new IfcStructuralLoadPlanarForce();
		if(this.Name != null)
			ifcStructuralLoadPlanarForce.setName((IfcLabel)this.Name.clone());
		if(this.PlanarForceX != null)
			ifcStructuralLoadPlanarForce.setPlanarForceX((IfcPlanarForceMeasure)this.PlanarForceX.clone());
		if(this.PlanarForceY != null)
			ifcStructuralLoadPlanarForce.setPlanarForceY((IfcPlanarForceMeasure)this.PlanarForceY.clone());
		if(this.PlanarForceZ != null)
			ifcStructuralLoadPlanarForce.setPlanarForceZ((IfcPlanarForceMeasure)this.PlanarForceZ.clone());
		return ifcStructuralLoadPlanarForce;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcStructuralLoadPlanarForce ifcStructuralLoadPlanarForce = new IfcStructuralLoadPlanarForce();
		if(this.Name != null)
			ifcStructuralLoadPlanarForce.setName(this.Name);
		if(this.PlanarForceX != null)
			ifcStructuralLoadPlanarForce.setPlanarForceX(this.PlanarForceX);
		if(this.PlanarForceY != null)
			ifcStructuralLoadPlanarForce.setPlanarForceY(this.PlanarForceY);
		if(this.PlanarForceZ != null)
			ifcStructuralLoadPlanarForce.setPlanarForceZ(this.PlanarForceZ);
		return ifcStructuralLoadPlanarForce;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
