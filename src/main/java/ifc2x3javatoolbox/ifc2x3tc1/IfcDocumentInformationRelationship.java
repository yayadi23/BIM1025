/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcDocumentInformationRelationship<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcDocumentInformationRelationship extends InternalAccessClass implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcDocumentInformation","SET<IfcDocumentInformation>","IfcLabel"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** RelatingDocument is an DEMANDED attribute - may not be null**/
	protected IfcDocumentInformation RelatingDocument;
	/** RelatedDocuments is an DEMANDED attribute - may not be null**/
	protected SET<IfcDocumentInformation> RelatedDocuments;
	/** RelationshipType is an OPTIONAL attribute**/
	protected IfcLabel RelationshipType;
	/**
	* The default constructor.
	**/
	public IfcDocumentInformationRelationship(){}

	private static final String[] attributes = new String[]{"RelatingDocument","RelatedDocuments","RelationshipType"};

	public String[] getAttributes() {
		return IfcDocumentInformationRelationship.attributes;
	}

	/**
	* Constructs a new IfcDocumentInformationRelationship object using the given parameters.
	*
	* @param RelatingDocument DEMANDED parameter of type IfcDocumentInformation - may not be null.
	* @param RelatedDocuments DEMANDED parameter of type SET<IfcDocumentInformation> - may not be null.
	* @param RelationshipType OPTIONAL parameter of type IfcLabel
	**/
	public IfcDocumentInformationRelationship(IfcDocumentInformation RelatingDocument, SET<IfcDocumentInformation> RelatedDocuments, IfcLabel RelationshipType)
	{
		this.RelatingDocument = RelatingDocument;
		this.RelatedDocuments = RelatedDocuments;
		this.RelationshipType = RelationshipType;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcDocumentInformationRelationship object using the given parameters.
	*
	* @param RelatingDocument DEMANDED parameter of type IfcDocumentInformation - may not be null.
	* @param RelatedDocuments DEMANDED parameter of type SET<IfcDocumentInformation> - may not be null.
	* @param RelationshipType OPTIONAL parameter of type IfcLabel
	**/
	public void setParameters(IfcDocumentInformation RelatingDocument, SET<IfcDocumentInformation> RelatedDocuments, IfcLabel RelationshipType)
	{
		this.RelatingDocument = RelatingDocument;
		this.RelatedDocuments = RelatedDocuments;
		this.RelationshipType = RelationshipType;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.RelatingDocument = (IfcDocumentInformation) parameters.get(0);
		this.RelatedDocuments = (SET<IfcDocumentInformation>) parameters.get(1);
		this.RelationshipType = (IfcLabel) parameters.get(2);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(RelatingDocument != null)
		{
				if(RelatingDocument.IsPointer_Inverse == null)
				{
					RelatingDocument.IsPointer_Inverse = new SET<IfcDocumentInformationRelationship>();
				}
				RelatingDocument.IsPointer_Inverse.add(this);
		}
		if(RelatedDocuments != null)
		{
			for(IfcDocumentInformation RelatedDocuments$ : RelatedDocuments)
			{
				if(RelatedDocuments$.IsPointedTo_Inverse == null)
				{
					RelatedDocuments$.IsPointedTo_Inverse = new SET<IfcDocumentInformationRelationship>();
				}
				RelatedDocuments$.IsPointedTo_Inverse.add(this);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcDocumentInformationRelationship.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCDOCUMENTINFORMATIONRELATIONSHIP(");
		if(getRedefinedDerivedAttributeTypes().contains("RelatingDocument")) stepString = stepString.concat("*,");
		else{
		if(this.RelatingDocument != null)		stepString = stepString.concat(((RootInterface)this.RelatingDocument).getStepParameter(IfcDocumentInformation.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RelatedDocuments")) stepString = stepString.concat("*,");
		else{
		if(this.RelatedDocuments != null)		stepString = stepString.concat(((RootInterface)this.RelatedDocuments).getStepParameter(IfcDocumentInformation.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RelationshipType")) stepString = stepString.concat("*);");
		else{
		if(this.RelationshipType != null)		stepString = stepString.concat(((RootInterface)this.RelationshipType).getStepParameter(IfcLabel.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the RelatingDocument attribute to the given value.
	*
	* @param RelatingDocument OPTIONAL value to set
	**/
	public void setRelatingDocument(IfcDocumentInformation RelatingDocument)
	{
		synchronizeInversesRemoveRelatingDocument(this.RelatingDocument);
		this.RelatingDocument = RelatingDocument;
		synchronizeInversesAddRelatingDocument(this.RelatingDocument);
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RelatingDocument attribute.
	*
	* @return the value of RelatingDocument
	/**/
	public IfcDocumentInformation getRelatingDocument()
	{
		return this.RelatingDocument;
	}

	private void synchronizeInversesAddRelatingDocument(IfcDocumentInformation RelatingDocument)
	{
		if(RelatingDocument != null)
		{
				if(RelatingDocument.IsPointer_Inverse == null)
				{
					RelatingDocument.IsPointer_Inverse = new SET<IfcDocumentInformationRelationship>();
				}
				RelatingDocument.IsPointer_Inverse.add(this);
		}
	}

	private void synchronizeInversesRemoveRelatingDocument(IfcDocumentInformation RelatingDocument)
	{
		if(RelatingDocument != null)
		{
				if(RelatingDocument.IsPointer_Inverse != null)
				{
					RelatingDocument.IsPointer_Inverse.remove(this);
				}
		}
	}

	/**
	* This method sets the RelatedDocuments attribute to the given value.
	*
	* @param RelatedDocuments OPTIONAL value to set
	**/
	public void setRelatedDocuments(SET<IfcDocumentInformation> RelatedDocuments)
	{
		synchronizeInversesRemoveRelatedDocuments(this.RelatedDocuments);
		this.RelatedDocuments = RelatedDocuments;
		synchronizeInversesAddRelatedDocuments(this.RelatedDocuments);
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the RelatedDocuments attribute.
	*
	* @return a copy of the RelatedDocuments set
	**/
	public SET<IfcDocumentInformation> getRelatedDocuments()
	{
		if(this.RelatedDocuments != null)
			return new SET<IfcDocumentInformation>(this.RelatedDocuments);
		return null;
	}

	/**
	* This method adds an IfcDocumentInformation object to the RelatedDocuments set.
	* @param RelatedDocuments element to be appended to this set.
	**/
	public void addRelatedDocuments(IfcDocumentInformation RelatedDocuments)
	{
		if(this.RelatedDocuments == null)
			this.RelatedDocuments = new SET<IfcDocumentInformation>();
		this.RelatedDocuments.add(RelatedDocuments);
		synchronizeInversesAddRelatedDocuments(RelatedDocuments);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcDocumentInformation objects to the RelatedDocuments set.
	* @param RelatedDocuments collection containing elements to be added to this set.
	**/
	public void addAllRelatedDocuments(java.util.Collection<IfcDocumentInformation> RelatedDocuments)
	{
		if(this.RelatedDocuments == null)
			this.RelatedDocuments = new SET<IfcDocumentInformation>();
		this.RelatedDocuments.addAll(RelatedDocuments);
		synchronizeInversesAddRelatedDocuments(RelatedDocuments);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the RelatedDocuments set.
	**/
	public void clearRelatedDocuments()
	{
		if(this.RelatedDocuments != null)
		{
			synchronizeInversesRemoveRelatedDocuments(this.RelatedDocuments);
			this.RelatedDocuments.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcDocumentInformation object from the RelatedDocuments set.
	* @param RelatedDocuments element to be removed from this set.
	**/
	public void removeRelatedDocuments(IfcDocumentInformation RelatedDocuments)
	{
		if(this.RelatedDocuments != null)
		{
			this.RelatedDocuments.remove(RelatedDocuments);
			synchronizeInversesRemoveRelatedDocuments(RelatedDocuments);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcDocumentInformation objects from the RelatedDocuments set.
	* @param RelatedDocuments collection containing elements to be removed from this set.
	**/
	public void removeAllRelatedDocuments(java.util.Collection<IfcDocumentInformation> RelatedDocuments)
	{
		if(this.RelatedDocuments != null)
		{
			this.RelatedDocuments.removeAll(RelatedDocuments);
			synchronizeInversesRemoveRelatedDocuments(RelatedDocuments);
			fireChangeEvent();
		}
	}

	private void synchronizeInversesAddRelatedDocuments(IfcDocumentInformation RelatedDocuments)
	{
		if(RelatedDocuments != null)
		{
				if(RelatedDocuments.IsPointedTo_Inverse == null)
				{
					RelatedDocuments.IsPointedTo_Inverse = new SET<IfcDocumentInformationRelationship>();
				}
				RelatedDocuments.IsPointedTo_Inverse.add(this);
		}
	}

	private void synchronizeInversesAddRelatedDocuments(java.util.Collection<IfcDocumentInformation> RelatedDocuments)
	{
		if(RelatedDocuments != null)
		{
			for(IfcDocumentInformation RelatedDocuments$ : RelatedDocuments)
			{
				synchronizeInversesAddRelatedDocuments(RelatedDocuments$);
			}
		}
	}

	private void synchronizeInversesRemoveRelatedDocuments(IfcDocumentInformation RelatedDocuments)
	{
		if(RelatedDocuments != null)
		{
				if(RelatedDocuments.IsPointedTo_Inverse != null)
				{
					RelatedDocuments.IsPointedTo_Inverse.remove(this);
				}
		}
	}

	private void synchronizeInversesRemoveRelatedDocuments(java.util.Collection<IfcDocumentInformation> RelatedDocuments)
	{
		if(RelatedDocuments != null)
		{
			for(IfcDocumentInformation RelatedDocuments$ : RelatedDocuments)
			{
				synchronizeInversesRemoveRelatedDocuments(RelatedDocuments$);
			}
		}
	}

	/**
	* This method sets the RelationshipType attribute to the given value.
	*
	* @param RelationshipType DEMANDED value to set - may not be null
	**/
	public void setRelationshipType(IfcLabel RelationshipType)
	{
		this.RelationshipType = RelationshipType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RelationshipType attribute.
	*
	* @return the value of RelationshipType
	/**/
	public IfcLabel getRelationshipType()
	{
		return this.RelationshipType;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcDocumentInformationRelationship ifcDocumentInformationRelationship = new IfcDocumentInformationRelationship();
		if(this.RelatingDocument != null)
			ifcDocumentInformationRelationship.setRelatingDocument((IfcDocumentInformation)this.RelatingDocument.clone());
		if(this.RelatedDocuments != null)
			ifcDocumentInformationRelationship.setRelatedDocuments((SET<IfcDocumentInformation>)this.RelatedDocuments.clone());
		if(this.RelationshipType != null)
			ifcDocumentInformationRelationship.setRelationshipType((IfcLabel)this.RelationshipType.clone());
		return ifcDocumentInformationRelationship;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcDocumentInformationRelationship ifcDocumentInformationRelationship = new IfcDocumentInformationRelationship();
		if(this.RelatingDocument != null)
			ifcDocumentInformationRelationship.setRelatingDocument(this.RelatingDocument);
		if(this.RelatedDocuments != null)
			ifcDocumentInformationRelationship.setRelatedDocuments(this.RelatedDocuments);
		if(this.RelationshipType != null)
			ifcDocumentInformationRelationship.setRelationshipType(this.RelationshipType);
		return ifcDocumentInformationRelationship;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
