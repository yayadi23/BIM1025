/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcStructuralProfileProperties<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcStructuralProfileProperties extends IfcGeneralProfileProperties implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcProfileDef","IfcMassPerLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcAreaMeasure","IfcMomentOfInertiaMeasure","IfcMomentOfInertiaMeasure","IfcMomentOfInertiaMeasure","IfcMomentOfInertiaMeasure","IfcWarpingConstantMeasure","IfcLengthMeasure","IfcLengthMeasure","IfcAreaMeasure","IfcAreaMeasure","IfcSectionModulusMeasure","IfcSectionModulusMeasure","IfcSectionModulusMeasure","IfcSectionModulusMeasure","IfcSectionModulusMeasure","IfcLengthMeasure","IfcLengthMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** TorsionalConstantX is an OPTIONAL attribute**/
	protected IfcMomentOfInertiaMeasure TorsionalConstantX;
	/** MomentOfInertiaYZ is an OPTIONAL attribute**/
	protected IfcMomentOfInertiaMeasure MomentOfInertiaYZ;
	/** MomentOfInertiaY is an OPTIONAL attribute**/
	protected IfcMomentOfInertiaMeasure MomentOfInertiaY;
	/** MomentOfInertiaZ is an OPTIONAL attribute**/
	protected IfcMomentOfInertiaMeasure MomentOfInertiaZ;
	/** WarpingConstant is an OPTIONAL attribute**/
	protected IfcWarpingConstantMeasure WarpingConstant;
	/** ShearCentreZ is an OPTIONAL attribute**/
	protected IfcLengthMeasure ShearCentreZ;
	/** ShearCentreY is an OPTIONAL attribute**/
	protected IfcLengthMeasure ShearCentreY;
	/** ShearDeformationAreaZ is an OPTIONAL attribute**/
	protected IfcAreaMeasure ShearDeformationAreaZ;
	/** ShearDeformationAreaY is an OPTIONAL attribute**/
	protected IfcAreaMeasure ShearDeformationAreaY;
	/** MaximumSectionModulusY is an OPTIONAL attribute**/
	protected IfcSectionModulusMeasure MaximumSectionModulusY;
	/** MinimumSectionModulusY is an OPTIONAL attribute**/
	protected IfcSectionModulusMeasure MinimumSectionModulusY;
	/** MaximumSectionModulusZ is an OPTIONAL attribute**/
	protected IfcSectionModulusMeasure MaximumSectionModulusZ;
	/** MinimumSectionModulusZ is an OPTIONAL attribute**/
	protected IfcSectionModulusMeasure MinimumSectionModulusZ;
	/** TorsionalSectionModulus is an OPTIONAL attribute**/
	protected IfcSectionModulusMeasure TorsionalSectionModulus;
	/** CentreOfGravityInX is an OPTIONAL attribute**/
	protected IfcLengthMeasure CentreOfGravityInX;
	/** CentreOfGravityInY is an OPTIONAL attribute**/
	protected IfcLengthMeasure CentreOfGravityInY;
	/**
	* The default constructor.
	**/
	public IfcStructuralProfileProperties(){}

	private static final String[] attributes = new String[]{"ProfileName","ProfileDefinition","PhysicalWeight","Perimeter",
			"MinimumPlateThickness","MaximumPlateThickness","CrossSectionArea","TorsionalConstantX"
			,"MomentOfInertiaYZ","MomentOfInertiaY","MomentOfInertiaZ","WarpingConstant","ShearCentreZ",
			"ShearCentreY","ShearDeformationAreaZ","ShearDeformationAreaY","MaximumSectionModulusY",
			"MinimumSectionModulusY","MaximumSectionModulusZ","MinimumSectionModulusZ","TorsionalSectionModulus"
			,"CentreOfGravityInX","CentreOfGravityInY"};

	public String[] getAttributes(){
		return IfcStructuralProfileProperties.attributes;
	}

	/**
	* Constructs a new IfcStructuralProfileProperties object using the given parameters.
	*
	* @param ProfileName OPTIONAL parameter of type IfcLabel
	* @param ProfileDefinition OPTIONAL parameter of type IfcProfileDef
	* @param PhysicalWeight OPTIONAL parameter of type IfcMassPerLengthMeasure
	* @param Perimeter OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MinimumPlateThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MaximumPlateThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param CrossSectionArea OPTIONAL parameter of type IfcAreaMeasure
	* @param TorsionalConstantX OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaYZ OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaY OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaZ OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param WarpingConstant OPTIONAL parameter of type IfcWarpingConstantMeasure
	* @param ShearCentreZ OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearCentreY OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearDeformationAreaZ OPTIONAL parameter of type IfcAreaMeasure
	* @param ShearDeformationAreaY OPTIONAL parameter of type IfcAreaMeasure
	* @param MaximumSectionModulusY OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MinimumSectionModulusY OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MaximumSectionModulusZ OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MinimumSectionModulusZ OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param TorsionalSectionModulus OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param CentreOfGravityInX OPTIONAL parameter of type IfcLengthMeasure
	* @param CentreOfGravityInY OPTIONAL parameter of type IfcLengthMeasure
	**/
	public IfcStructuralProfileProperties(IfcLabel ProfileName, IfcProfileDef ProfileDefinition, IfcMassPerLengthMeasure PhysicalWeight, IfcPositiveLengthMeasure Perimeter, IfcPositiveLengthMeasure MinimumPlateThickness, IfcPositiveLengthMeasure MaximumPlateThickness, IfcAreaMeasure CrossSectionArea, IfcMomentOfInertiaMeasure TorsionalConstantX, IfcMomentOfInertiaMeasure MomentOfInertiaYZ, IfcMomentOfInertiaMeasure MomentOfInertiaY, IfcMomentOfInertiaMeasure MomentOfInertiaZ, IfcWarpingConstantMeasure WarpingConstant, IfcLengthMeasure ShearCentreZ, IfcLengthMeasure ShearCentreY, IfcAreaMeasure ShearDeformationAreaZ, IfcAreaMeasure ShearDeformationAreaY, IfcSectionModulusMeasure MaximumSectionModulusY, IfcSectionModulusMeasure MinimumSectionModulusY, IfcSectionModulusMeasure MaximumSectionModulusZ, IfcSectionModulusMeasure MinimumSectionModulusZ, IfcSectionModulusMeasure TorsionalSectionModulus, IfcLengthMeasure CentreOfGravityInX, IfcLengthMeasure CentreOfGravityInY)
	{
		this.ProfileName = ProfileName;
		this.ProfileDefinition = ProfileDefinition;
		this.PhysicalWeight = PhysicalWeight;
		this.Perimeter = Perimeter;
		this.MinimumPlateThickness = MinimumPlateThickness;
		this.MaximumPlateThickness = MaximumPlateThickness;
		this.CrossSectionArea = CrossSectionArea;
		this.TorsionalConstantX = TorsionalConstantX;
		this.MomentOfInertiaYZ = MomentOfInertiaYZ;
		this.MomentOfInertiaY = MomentOfInertiaY;
		this.MomentOfInertiaZ = MomentOfInertiaZ;
		this.WarpingConstant = WarpingConstant;
		this.ShearCentreZ = ShearCentreZ;
		this.ShearCentreY = ShearCentreY;
		this.ShearDeformationAreaZ = ShearDeformationAreaZ;
		this.ShearDeformationAreaY = ShearDeformationAreaY;
		this.MaximumSectionModulusY = MaximumSectionModulusY;
		this.MinimumSectionModulusY = MinimumSectionModulusY;
		this.MaximumSectionModulusZ = MaximumSectionModulusZ;
		this.MinimumSectionModulusZ = MinimumSectionModulusZ;
		this.TorsionalSectionModulus = TorsionalSectionModulus;
		this.CentreOfGravityInX = CentreOfGravityInX;
		this.CentreOfGravityInY = CentreOfGravityInY;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcStructuralProfileProperties object using the given parameters.
	*
	* @param ProfileName OPTIONAL parameter of type IfcLabel
	* @param ProfileDefinition OPTIONAL parameter of type IfcProfileDef
	* @param PhysicalWeight OPTIONAL parameter of type IfcMassPerLengthMeasure
	* @param Perimeter OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MinimumPlateThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MaximumPlateThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param CrossSectionArea OPTIONAL parameter of type IfcAreaMeasure
	* @param TorsionalConstantX OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaYZ OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaY OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaZ OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param WarpingConstant OPTIONAL parameter of type IfcWarpingConstantMeasure
	* @param ShearCentreZ OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearCentreY OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearDeformationAreaZ OPTIONAL parameter of type IfcAreaMeasure
	* @param ShearDeformationAreaY OPTIONAL parameter of type IfcAreaMeasure
	* @param MaximumSectionModulusY OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MinimumSectionModulusY OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MaximumSectionModulusZ OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MinimumSectionModulusZ OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param TorsionalSectionModulus OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param CentreOfGravityInX OPTIONAL parameter of type IfcLengthMeasure
	* @param CentreOfGravityInY OPTIONAL parameter of type IfcLengthMeasure
	**/
	public void setParameters(IfcLabel ProfileName, IfcProfileDef ProfileDefinition, IfcMassPerLengthMeasure PhysicalWeight, IfcPositiveLengthMeasure Perimeter, IfcPositiveLengthMeasure MinimumPlateThickness, IfcPositiveLengthMeasure MaximumPlateThickness, IfcAreaMeasure CrossSectionArea, IfcMomentOfInertiaMeasure TorsionalConstantX, IfcMomentOfInertiaMeasure MomentOfInertiaYZ, IfcMomentOfInertiaMeasure MomentOfInertiaY, IfcMomentOfInertiaMeasure MomentOfInertiaZ, IfcWarpingConstantMeasure WarpingConstant, IfcLengthMeasure ShearCentreZ, IfcLengthMeasure ShearCentreY, IfcAreaMeasure ShearDeformationAreaZ, IfcAreaMeasure ShearDeformationAreaY, IfcSectionModulusMeasure MaximumSectionModulusY, IfcSectionModulusMeasure MinimumSectionModulusY, IfcSectionModulusMeasure MaximumSectionModulusZ, IfcSectionModulusMeasure MinimumSectionModulusZ, IfcSectionModulusMeasure TorsionalSectionModulus, IfcLengthMeasure CentreOfGravityInX, IfcLengthMeasure CentreOfGravityInY)
	{
		this.ProfileName = ProfileName;
		this.ProfileDefinition = ProfileDefinition;
		this.PhysicalWeight = PhysicalWeight;
		this.Perimeter = Perimeter;
		this.MinimumPlateThickness = MinimumPlateThickness;
		this.MaximumPlateThickness = MaximumPlateThickness;
		this.CrossSectionArea = CrossSectionArea;
		this.TorsionalConstantX = TorsionalConstantX;
		this.MomentOfInertiaYZ = MomentOfInertiaYZ;
		this.MomentOfInertiaY = MomentOfInertiaY;
		this.MomentOfInertiaZ = MomentOfInertiaZ;
		this.WarpingConstant = WarpingConstant;
		this.ShearCentreZ = ShearCentreZ;
		this.ShearCentreY = ShearCentreY;
		this.ShearDeformationAreaZ = ShearDeformationAreaZ;
		this.ShearDeformationAreaY = ShearDeformationAreaY;
		this.MaximumSectionModulusY = MaximumSectionModulusY;
		this.MinimumSectionModulusY = MinimumSectionModulusY;
		this.MaximumSectionModulusZ = MaximumSectionModulusZ;
		this.MinimumSectionModulusZ = MinimumSectionModulusZ;
		this.TorsionalSectionModulus = TorsionalSectionModulus;
		this.CentreOfGravityInX = CentreOfGravityInX;
		this.CentreOfGravityInY = CentreOfGravityInY;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.ProfileName = (IfcLabel) parameters.get(0);
		this.ProfileDefinition = (IfcProfileDef) parameters.get(1);
		this.PhysicalWeight = (IfcMassPerLengthMeasure) parameters.get(2);
		this.Perimeter = (IfcPositiveLengthMeasure) parameters.get(3);
		this.MinimumPlateThickness = (IfcPositiveLengthMeasure) parameters.get(4);
		this.MaximumPlateThickness = (IfcPositiveLengthMeasure) parameters.get(5);
		this.CrossSectionArea = (IfcAreaMeasure) parameters.get(6);
		this.TorsionalConstantX = (IfcMomentOfInertiaMeasure) parameters.get(7);
		this.MomentOfInertiaYZ = (IfcMomentOfInertiaMeasure) parameters.get(8);
		this.MomentOfInertiaY = (IfcMomentOfInertiaMeasure) parameters.get(9);
		this.MomentOfInertiaZ = (IfcMomentOfInertiaMeasure) parameters.get(10);
		this.WarpingConstant = (IfcWarpingConstantMeasure) parameters.get(11);
		this.ShearCentreZ = (IfcLengthMeasure) parameters.get(12);
		this.ShearCentreY = (IfcLengthMeasure) parameters.get(13);
		this.ShearDeformationAreaZ = (IfcAreaMeasure) parameters.get(14);
		this.ShearDeformationAreaY = (IfcAreaMeasure) parameters.get(15);
		this.MaximumSectionModulusY = (IfcSectionModulusMeasure) parameters.get(16);
		this.MinimumSectionModulusY = (IfcSectionModulusMeasure) parameters.get(17);
		this.MaximumSectionModulusZ = (IfcSectionModulusMeasure) parameters.get(18);
		this.MinimumSectionModulusZ = (IfcSectionModulusMeasure) parameters.get(19);
		this.TorsionalSectionModulus = (IfcSectionModulusMeasure) parameters.get(20);
		this.CentreOfGravityInX = (IfcLengthMeasure) parameters.get(21);
		this.CentreOfGravityInY = (IfcLengthMeasure) parameters.get(22);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcStructuralProfileProperties.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSTRUCTURALPROFILEPROPERTIES(");
		if(getRedefinedDerivedAttributeTypes().contains("ProfileName")) stepString = stepString.concat("*,");
		else{
		if(this.ProfileName != null)		stepString = stepString.concat(((RootInterface)this.ProfileName).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ProfileDefinition")) stepString = stepString.concat("*,");
		else{
		if(this.ProfileDefinition != null)		stepString = stepString.concat(((RootInterface)this.ProfileDefinition).getStepParameter(IfcProfileDef.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PhysicalWeight")) stepString = stepString.concat("*,");
		else{
		if(this.PhysicalWeight != null)		stepString = stepString.concat(((RootInterface)this.PhysicalWeight).getStepParameter(IfcMassPerLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Perimeter")) stepString = stepString.concat("*,");
		else{
		if(this.Perimeter != null)		stepString = stepString.concat(((RootInterface)this.Perimeter).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MinimumPlateThickness")) stepString = stepString.concat("*,");
		else{
		if(this.MinimumPlateThickness != null)		stepString = stepString.concat(((RootInterface)this.MinimumPlateThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MaximumPlateThickness")) stepString = stepString.concat("*,");
		else{
		if(this.MaximumPlateThickness != null)		stepString = stepString.concat(((RootInterface)this.MaximumPlateThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CrossSectionArea")) stepString = stepString.concat("*,");
		else{
		if(this.CrossSectionArea != null)		stepString = stepString.concat(((RootInterface)this.CrossSectionArea).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TorsionalConstantX")) stepString = stepString.concat("*,");
		else{
		if(this.TorsionalConstantX != null)		stepString = stepString.concat(((RootInterface)this.TorsionalConstantX).getStepParameter(IfcMomentOfInertiaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MomentOfInertiaYZ")) stepString = stepString.concat("*,");
		else{
		if(this.MomentOfInertiaYZ != null)		stepString = stepString.concat(((RootInterface)this.MomentOfInertiaYZ).getStepParameter(IfcMomentOfInertiaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MomentOfInertiaY")) stepString = stepString.concat("*,");
		else{
		if(this.MomentOfInertiaY != null)		stepString = stepString.concat(((RootInterface)this.MomentOfInertiaY).getStepParameter(IfcMomentOfInertiaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MomentOfInertiaZ")) stepString = stepString.concat("*,");
		else{
		if(this.MomentOfInertiaZ != null)		stepString = stepString.concat(((RootInterface)this.MomentOfInertiaZ).getStepParameter(IfcMomentOfInertiaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WarpingConstant")) stepString = stepString.concat("*,");
		else{
		if(this.WarpingConstant != null)		stepString = stepString.concat(((RootInterface)this.WarpingConstant).getStepParameter(IfcWarpingConstantMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearCentreZ")) stepString = stepString.concat("*,");
		else{
		if(this.ShearCentreZ != null)		stepString = stepString.concat(((RootInterface)this.ShearCentreZ).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearCentreY")) stepString = stepString.concat("*,");
		else{
		if(this.ShearCentreY != null)		stepString = stepString.concat(((RootInterface)this.ShearCentreY).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearDeformationAreaZ")) stepString = stepString.concat("*,");
		else{
		if(this.ShearDeformationAreaZ != null)		stepString = stepString.concat(((RootInterface)this.ShearDeformationAreaZ).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearDeformationAreaY")) stepString = stepString.concat("*,");
		else{
		if(this.ShearDeformationAreaY != null)		stepString = stepString.concat(((RootInterface)this.ShearDeformationAreaY).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MaximumSectionModulusY")) stepString = stepString.concat("*,");
		else{
		if(this.MaximumSectionModulusY != null)		stepString = stepString.concat(((RootInterface)this.MaximumSectionModulusY).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MinimumSectionModulusY")) stepString = stepString.concat("*,");
		else{
		if(this.MinimumSectionModulusY != null)		stepString = stepString.concat(((RootInterface)this.MinimumSectionModulusY).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MaximumSectionModulusZ")) stepString = stepString.concat("*,");
		else{
		if(this.MaximumSectionModulusZ != null)		stepString = stepString.concat(((RootInterface)this.MaximumSectionModulusZ).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MinimumSectionModulusZ")) stepString = stepString.concat("*,");
		else{
		if(this.MinimumSectionModulusZ != null)		stepString = stepString.concat(((RootInterface)this.MinimumSectionModulusZ).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TorsionalSectionModulus")) stepString = stepString.concat("*,");
		else{
		if(this.TorsionalSectionModulus != null)		stepString = stepString.concat(((RootInterface)this.TorsionalSectionModulus).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CentreOfGravityInX")) stepString = stepString.concat("*,");
		else{
		if(this.CentreOfGravityInX != null)		stepString = stepString.concat(((RootInterface)this.CentreOfGravityInX).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CentreOfGravityInY")) stepString = stepString.concat("*);");
		else{
		if(this.CentreOfGravityInY != null)		stepString = stepString.concat(((RootInterface)this.CentreOfGravityInY).getStepParameter(IfcLengthMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the TorsionalConstantX attribute to the given value.
	*
	* @param TorsionalConstantX DEMANDED value to set - may not be null
	**/
	public void setTorsionalConstantX(IfcMomentOfInertiaMeasure TorsionalConstantX)
	{
		this.TorsionalConstantX = TorsionalConstantX;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TorsionalConstantX attribute.
	*
	* @return the value of TorsionalConstantX
	/**/
	public IfcMomentOfInertiaMeasure getTorsionalConstantX()
	{
		return this.TorsionalConstantX;
	}

	/**
	* This method sets the MomentOfInertiaYZ attribute to the given value.
	*
	* @param MomentOfInertiaYZ DEMANDED value to set - may not be null
	**/
	public void setMomentOfInertiaYZ(IfcMomentOfInertiaMeasure MomentOfInertiaYZ)
	{
		this.MomentOfInertiaYZ = MomentOfInertiaYZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MomentOfInertiaYZ attribute.
	*
	* @return the value of MomentOfInertiaYZ
	/**/
	public IfcMomentOfInertiaMeasure getMomentOfInertiaYZ()
	{
		return this.MomentOfInertiaYZ;
	}

	/**
	* This method sets the MomentOfInertiaY attribute to the given value.
	*
	* @param MomentOfInertiaY DEMANDED value to set - may not be null
	**/
	public void setMomentOfInertiaY(IfcMomentOfInertiaMeasure MomentOfInertiaY)
	{
		this.MomentOfInertiaY = MomentOfInertiaY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MomentOfInertiaY attribute.
	*
	* @return the value of MomentOfInertiaY
	/**/
	public IfcMomentOfInertiaMeasure getMomentOfInertiaY()
	{
		return this.MomentOfInertiaY;
	}

	/**
	* This method sets the MomentOfInertiaZ attribute to the given value.
	*
	* @param MomentOfInertiaZ DEMANDED value to set - may not be null
	**/
	public void setMomentOfInertiaZ(IfcMomentOfInertiaMeasure MomentOfInertiaZ)
	{
		this.MomentOfInertiaZ = MomentOfInertiaZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MomentOfInertiaZ attribute.
	*
	* @return the value of MomentOfInertiaZ
	/**/
	public IfcMomentOfInertiaMeasure getMomentOfInertiaZ()
	{
		return this.MomentOfInertiaZ;
	}

	/**
	* This method sets the WarpingConstant attribute to the given value.
	*
	* @param WarpingConstant DEMANDED value to set - may not be null
	**/
	public void setWarpingConstant(IfcWarpingConstantMeasure WarpingConstant)
	{
		this.WarpingConstant = WarpingConstant;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the WarpingConstant attribute.
	*
	* @return the value of WarpingConstant
	/**/
	public IfcWarpingConstantMeasure getWarpingConstant()
	{
		return this.WarpingConstant;
	}

	/**
	* This method sets the ShearCentreZ attribute to the given value.
	*
	* @param ShearCentreZ DEMANDED value to set - may not be null
	**/
	public void setShearCentreZ(IfcLengthMeasure ShearCentreZ)
	{
		this.ShearCentreZ = ShearCentreZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ShearCentreZ attribute.
	*
	* @return the value of ShearCentreZ
	/**/
	public IfcLengthMeasure getShearCentreZ()
	{
		return this.ShearCentreZ;
	}

	/**
	* This method sets the ShearCentreY attribute to the given value.
	*
	* @param ShearCentreY DEMANDED value to set - may not be null
	**/
	public void setShearCentreY(IfcLengthMeasure ShearCentreY)
	{
		this.ShearCentreY = ShearCentreY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ShearCentreY attribute.
	*
	* @return the value of ShearCentreY
	/**/
	public IfcLengthMeasure getShearCentreY()
	{
		return this.ShearCentreY;
	}

	/**
	* This method sets the ShearDeformationAreaZ attribute to the given value.
	*
	* @param ShearDeformationAreaZ DEMANDED value to set - may not be null
	**/
	public void setShearDeformationAreaZ(IfcAreaMeasure ShearDeformationAreaZ)
	{
		this.ShearDeformationAreaZ = ShearDeformationAreaZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ShearDeformationAreaZ attribute.
	*
	* @return the value of ShearDeformationAreaZ
	/**/
	public IfcAreaMeasure getShearDeformationAreaZ()
	{
		return this.ShearDeformationAreaZ;
	}

	/**
	* This method sets the ShearDeformationAreaY attribute to the given value.
	*
	* @param ShearDeformationAreaY DEMANDED value to set - may not be null
	**/
	public void setShearDeformationAreaY(IfcAreaMeasure ShearDeformationAreaY)
	{
		this.ShearDeformationAreaY = ShearDeformationAreaY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ShearDeformationAreaY attribute.
	*
	* @return the value of ShearDeformationAreaY
	/**/
	public IfcAreaMeasure getShearDeformationAreaY()
	{
		return this.ShearDeformationAreaY;
	}

	/**
	* This method sets the MaximumSectionModulusY attribute to the given value.
	*
	* @param MaximumSectionModulusY DEMANDED value to set - may not be null
	**/
	public void setMaximumSectionModulusY(IfcSectionModulusMeasure MaximumSectionModulusY)
	{
		this.MaximumSectionModulusY = MaximumSectionModulusY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MaximumSectionModulusY attribute.
	*
	* @return the value of MaximumSectionModulusY
	/**/
	public IfcSectionModulusMeasure getMaximumSectionModulusY()
	{
		return this.MaximumSectionModulusY;
	}

	/**
	* This method sets the MinimumSectionModulusY attribute to the given value.
	*
	* @param MinimumSectionModulusY DEMANDED value to set - may not be null
	**/
	public void setMinimumSectionModulusY(IfcSectionModulusMeasure MinimumSectionModulusY)
	{
		this.MinimumSectionModulusY = MinimumSectionModulusY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MinimumSectionModulusY attribute.
	*
	* @return the value of MinimumSectionModulusY
	/**/
	public IfcSectionModulusMeasure getMinimumSectionModulusY()
	{
		return this.MinimumSectionModulusY;
	}

	/**
	* This method sets the MaximumSectionModulusZ attribute to the given value.
	*
	* @param MaximumSectionModulusZ DEMANDED value to set - may not be null
	**/
	public void setMaximumSectionModulusZ(IfcSectionModulusMeasure MaximumSectionModulusZ)
	{
		this.MaximumSectionModulusZ = MaximumSectionModulusZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MaximumSectionModulusZ attribute.
	*
	* @return the value of MaximumSectionModulusZ
	/**/
	public IfcSectionModulusMeasure getMaximumSectionModulusZ()
	{
		return this.MaximumSectionModulusZ;
	}

	/**
	* This method sets the MinimumSectionModulusZ attribute to the given value.
	*
	* @param MinimumSectionModulusZ DEMANDED value to set - may not be null
	**/
	public void setMinimumSectionModulusZ(IfcSectionModulusMeasure MinimumSectionModulusZ)
	{
		this.MinimumSectionModulusZ = MinimumSectionModulusZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MinimumSectionModulusZ attribute.
	*
	* @return the value of MinimumSectionModulusZ
	/**/
	public IfcSectionModulusMeasure getMinimumSectionModulusZ()
	{
		return this.MinimumSectionModulusZ;
	}

	/**
	* This method sets the TorsionalSectionModulus attribute to the given value.
	*
	* @param TorsionalSectionModulus DEMANDED value to set - may not be null
	**/
	public void setTorsionalSectionModulus(IfcSectionModulusMeasure TorsionalSectionModulus)
	{
		this.TorsionalSectionModulus = TorsionalSectionModulus;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TorsionalSectionModulus attribute.
	*
	* @return the value of TorsionalSectionModulus
	/**/
	public IfcSectionModulusMeasure getTorsionalSectionModulus()
	{
		return this.TorsionalSectionModulus;
	}

	/**
	* This method sets the CentreOfGravityInX attribute to the given value.
	*
	* @param CentreOfGravityInX DEMANDED value to set - may not be null
	**/
	public void setCentreOfGravityInX(IfcLengthMeasure CentreOfGravityInX)
	{
		this.CentreOfGravityInX = CentreOfGravityInX;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the CentreOfGravityInX attribute.
	*
	* @return the value of CentreOfGravityInX
	/**/
	public IfcLengthMeasure getCentreOfGravityInX()
	{
		return this.CentreOfGravityInX;
	}

	/**
	* This method sets the CentreOfGravityInY attribute to the given value.
	*
	* @param CentreOfGravityInY DEMANDED value to set - may not be null
	**/
	public void setCentreOfGravityInY(IfcLengthMeasure CentreOfGravityInY)
	{
		this.CentreOfGravityInY = CentreOfGravityInY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the CentreOfGravityInY attribute.
	*
	* @return the value of CentreOfGravityInY
	/**/
	public IfcLengthMeasure getCentreOfGravityInY()
	{
		return this.CentreOfGravityInY;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcStructuralProfileProperties ifcStructuralProfileProperties = new IfcStructuralProfileProperties();
		if(this.ProfileName != null)
			ifcStructuralProfileProperties.setProfileName((IfcLabel)this.ProfileName.clone());
		if(this.ProfileDefinition != null)
			ifcStructuralProfileProperties.setProfileDefinition((IfcProfileDef)this.ProfileDefinition.clone());
		if(this.PhysicalWeight != null)
			ifcStructuralProfileProperties.setPhysicalWeight((IfcMassPerLengthMeasure)this.PhysicalWeight.clone());
		if(this.Perimeter != null)
			ifcStructuralProfileProperties.setPerimeter((IfcPositiveLengthMeasure)this.Perimeter.clone());
		if(this.MinimumPlateThickness != null)
			ifcStructuralProfileProperties.setMinimumPlateThickness((IfcPositiveLengthMeasure)this.MinimumPlateThickness.clone());
		if(this.MaximumPlateThickness != null)
			ifcStructuralProfileProperties.setMaximumPlateThickness((IfcPositiveLengthMeasure)this.MaximumPlateThickness.clone());
		if(this.CrossSectionArea != null)
			ifcStructuralProfileProperties.setCrossSectionArea((IfcAreaMeasure)this.CrossSectionArea.clone());
		if(this.TorsionalConstantX != null)
			ifcStructuralProfileProperties.setTorsionalConstantX((IfcMomentOfInertiaMeasure)this.TorsionalConstantX.clone());
		if(this.MomentOfInertiaYZ != null)
			ifcStructuralProfileProperties.setMomentOfInertiaYZ((IfcMomentOfInertiaMeasure)this.MomentOfInertiaYZ.clone());
		if(this.MomentOfInertiaY != null)
			ifcStructuralProfileProperties.setMomentOfInertiaY((IfcMomentOfInertiaMeasure)this.MomentOfInertiaY.clone());
		if(this.MomentOfInertiaZ != null)
			ifcStructuralProfileProperties.setMomentOfInertiaZ((IfcMomentOfInertiaMeasure)this.MomentOfInertiaZ.clone());
		if(this.WarpingConstant != null)
			ifcStructuralProfileProperties.setWarpingConstant((IfcWarpingConstantMeasure)this.WarpingConstant.clone());
		if(this.ShearCentreZ != null)
			ifcStructuralProfileProperties.setShearCentreZ((IfcLengthMeasure)this.ShearCentreZ.clone());
		if(this.ShearCentreY != null)
			ifcStructuralProfileProperties.setShearCentreY((IfcLengthMeasure)this.ShearCentreY.clone());
		if(this.ShearDeformationAreaZ != null)
			ifcStructuralProfileProperties.setShearDeformationAreaZ((IfcAreaMeasure)this.ShearDeformationAreaZ.clone());
		if(this.ShearDeformationAreaY != null)
			ifcStructuralProfileProperties.setShearDeformationAreaY((IfcAreaMeasure)this.ShearDeformationAreaY.clone());
		if(this.MaximumSectionModulusY != null)
			ifcStructuralProfileProperties.setMaximumSectionModulusY((IfcSectionModulusMeasure)this.MaximumSectionModulusY.clone());
		if(this.MinimumSectionModulusY != null)
			ifcStructuralProfileProperties.setMinimumSectionModulusY((IfcSectionModulusMeasure)this.MinimumSectionModulusY.clone());
		if(this.MaximumSectionModulusZ != null)
			ifcStructuralProfileProperties.setMaximumSectionModulusZ((IfcSectionModulusMeasure)this.MaximumSectionModulusZ.clone());
		if(this.MinimumSectionModulusZ != null)
			ifcStructuralProfileProperties.setMinimumSectionModulusZ((IfcSectionModulusMeasure)this.MinimumSectionModulusZ.clone());
		if(this.TorsionalSectionModulus != null)
			ifcStructuralProfileProperties.setTorsionalSectionModulus((IfcSectionModulusMeasure)this.TorsionalSectionModulus.clone());
		if(this.CentreOfGravityInX != null)
			ifcStructuralProfileProperties.setCentreOfGravityInX((IfcLengthMeasure)this.CentreOfGravityInX.clone());
		if(this.CentreOfGravityInY != null)
			ifcStructuralProfileProperties.setCentreOfGravityInY((IfcLengthMeasure)this.CentreOfGravityInY.clone());
		return ifcStructuralProfileProperties;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcStructuralProfileProperties ifcStructuralProfileProperties = new IfcStructuralProfileProperties();
		if(this.ProfileName != null)
			ifcStructuralProfileProperties.setProfileName(this.ProfileName);
		if(this.ProfileDefinition != null)
			ifcStructuralProfileProperties.setProfileDefinition(this.ProfileDefinition);
		if(this.PhysicalWeight != null)
			ifcStructuralProfileProperties.setPhysicalWeight(this.PhysicalWeight);
		if(this.Perimeter != null)
			ifcStructuralProfileProperties.setPerimeter(this.Perimeter);
		if(this.MinimumPlateThickness != null)
			ifcStructuralProfileProperties.setMinimumPlateThickness(this.MinimumPlateThickness);
		if(this.MaximumPlateThickness != null)
			ifcStructuralProfileProperties.setMaximumPlateThickness(this.MaximumPlateThickness);
		if(this.CrossSectionArea != null)
			ifcStructuralProfileProperties.setCrossSectionArea(this.CrossSectionArea);
		if(this.TorsionalConstantX != null)
			ifcStructuralProfileProperties.setTorsionalConstantX(this.TorsionalConstantX);
		if(this.MomentOfInertiaYZ != null)
			ifcStructuralProfileProperties.setMomentOfInertiaYZ(this.MomentOfInertiaYZ);
		if(this.MomentOfInertiaY != null)
			ifcStructuralProfileProperties.setMomentOfInertiaY(this.MomentOfInertiaY);
		if(this.MomentOfInertiaZ != null)
			ifcStructuralProfileProperties.setMomentOfInertiaZ(this.MomentOfInertiaZ);
		if(this.WarpingConstant != null)
			ifcStructuralProfileProperties.setWarpingConstant(this.WarpingConstant);
		if(this.ShearCentreZ != null)
			ifcStructuralProfileProperties.setShearCentreZ(this.ShearCentreZ);
		if(this.ShearCentreY != null)
			ifcStructuralProfileProperties.setShearCentreY(this.ShearCentreY);
		if(this.ShearDeformationAreaZ != null)
			ifcStructuralProfileProperties.setShearDeformationAreaZ(this.ShearDeformationAreaZ);
		if(this.ShearDeformationAreaY != null)
			ifcStructuralProfileProperties.setShearDeformationAreaY(this.ShearDeformationAreaY);
		if(this.MaximumSectionModulusY != null)
			ifcStructuralProfileProperties.setMaximumSectionModulusY(this.MaximumSectionModulusY);
		if(this.MinimumSectionModulusY != null)
			ifcStructuralProfileProperties.setMinimumSectionModulusY(this.MinimumSectionModulusY);
		if(this.MaximumSectionModulusZ != null)
			ifcStructuralProfileProperties.setMaximumSectionModulusZ(this.MaximumSectionModulusZ);
		if(this.MinimumSectionModulusZ != null)
			ifcStructuralProfileProperties.setMinimumSectionModulusZ(this.MinimumSectionModulusZ);
		if(this.TorsionalSectionModulus != null)
			ifcStructuralProfileProperties.setTorsionalSectionModulus(this.TorsionalSectionModulus);
		if(this.CentreOfGravityInX != null)
			ifcStructuralProfileProperties.setCentreOfGravityInX(this.CentreOfGravityInX);
		if(this.CentreOfGravityInY != null)
			ifcStructuralProfileProperties.setCentreOfGravityInY(this.CentreOfGravityInY);
		return ifcStructuralProfileProperties;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
