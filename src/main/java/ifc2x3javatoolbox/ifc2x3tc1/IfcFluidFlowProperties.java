/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcFluidFlowProperties<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcFluidFlowProperties extends IfcPropertySetDefinition implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcPropertySourceEnum","IfcTimeSeries","IfcTimeSeries","IfcTimeSeries","IfcMaterial","IfcTimeSeries","IfcLabel","IfcThermodynamicTemperatureMeasure","IfcThermodynamicTemperatureMeasure","IfcTimeSeries","IfcTimeSeries","IfcDerivedMeasureValue","IfcPositiveRatioMeasure","IfcLinearVelocityMeasure","IfcPressureMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** PropertySource is an DEMANDED attribute - may not be null**/
	protected IfcPropertySourceEnum PropertySource;
	/** FlowConditionTimeSeries is an OPTIONAL attribute**/
	protected IfcTimeSeries FlowConditionTimeSeries;
	/** VelocityTimeSeries is an OPTIONAL attribute**/
	protected IfcTimeSeries VelocityTimeSeries;
	/** FlowrateTimeSeries is an OPTIONAL attribute**/
	protected IfcTimeSeries FlowrateTimeSeries;
	/** Fluid is an DEMANDED attribute - may not be null**/
	protected IfcMaterial Fluid;
	/** PressureTimeSeries is an OPTIONAL attribute**/
	protected IfcTimeSeries PressureTimeSeries;
	/** UserDefinedPropertySource is an OPTIONAL attribute**/
	protected IfcLabel UserDefinedPropertySource;
	/** TemperatureSingleValue is an OPTIONAL attribute**/
	protected IfcThermodynamicTemperatureMeasure TemperatureSingleValue;
	/** WetBulbTemperatureSingleValue is an OPTIONAL attribute**/
	protected IfcThermodynamicTemperatureMeasure WetBulbTemperatureSingleValue;
	/** WetBulbTemperatureTimeSeries is an OPTIONAL attribute**/
	protected IfcTimeSeries WetBulbTemperatureTimeSeries;
	/** TemperatureTimeSeries is an OPTIONAL attribute**/
	protected IfcTimeSeries TemperatureTimeSeries;
	/** FlowrateSingleValue is an OPTIONAL attribute**/
	protected IfcDerivedMeasureValue FlowrateSingleValue;
	/** FlowConditionSingleValue is an OPTIONAL attribute**/
	protected IfcPositiveRatioMeasure FlowConditionSingleValue;
	/** VelocitySingleValue is an OPTIONAL attribute**/
	protected IfcLinearVelocityMeasure VelocitySingleValue;
	/** PressureSingleValue is an OPTIONAL attribute**/
	protected IfcPressureMeasure PressureSingleValue;
	/**
	* The default constructor.
	**/
	public IfcFluidFlowProperties(){}

	private static final String[] attributes = new String[]{"GlobalId","OwnerHistory","Name","Description"
			,"PropertySource","FlowConditionTimeSeries","VelocityTimeSeries","FlowrateTimeSeries"
	,"Fluid","PressureTimeSeries","UserDefinedPropertySource","TemperatureSingleValue","WetBulbTemperatureSingleValue"
	,"WetBulbTemperatureTimeSeries","TemperatureTimeSeries","FlowrateSingleValue","FlowConditionSingleValue"
	,"VelocitySingleValue","PressureSingleValue"};

	public String[] getAttributes() {
		return IfcFluidFlowProperties.attributes;
	}

	/**
	* Constructs a new IfcFluidFlowProperties object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param PropertySource DEMANDED parameter of type IfcPropertySourceEnum - may not be null.
	* @param FlowConditionTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param VelocityTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param FlowrateTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param Fluid DEMANDED parameter of type IfcMaterial - may not be null.
	* @param PressureTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param UserDefinedPropertySource OPTIONAL parameter of type IfcLabel
	* @param TemperatureSingleValue OPTIONAL parameter of type IfcThermodynamicTemperatureMeasure
	* @param WetBulbTemperatureSingleValue OPTIONAL parameter of type IfcThermodynamicTemperatureMeasure
	* @param WetBulbTemperatureTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param TemperatureTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param FlowrateSingleValue OPTIONAL parameter of type IfcDerivedMeasureValue
	* @param FlowConditionSingleValue OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param VelocitySingleValue OPTIONAL parameter of type IfcLinearVelocityMeasure
	* @param PressureSingleValue OPTIONAL parameter of type IfcPressureMeasure
	**/
	public IfcFluidFlowProperties(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPropertySourceEnum PropertySource, IfcTimeSeries FlowConditionTimeSeries, IfcTimeSeries VelocityTimeSeries, IfcTimeSeries FlowrateTimeSeries, IfcMaterial Fluid, IfcTimeSeries PressureTimeSeries, IfcLabel UserDefinedPropertySource, IfcThermodynamicTemperatureMeasure TemperatureSingleValue, IfcThermodynamicTemperatureMeasure WetBulbTemperatureSingleValue, IfcTimeSeries WetBulbTemperatureTimeSeries, IfcTimeSeries TemperatureTimeSeries, IfcDerivedMeasureValue FlowrateSingleValue, IfcPositiveRatioMeasure FlowConditionSingleValue, IfcLinearVelocityMeasure VelocitySingleValue, IfcPressureMeasure PressureSingleValue)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.PropertySource = PropertySource;
		this.FlowConditionTimeSeries = FlowConditionTimeSeries;
		this.VelocityTimeSeries = VelocityTimeSeries;
		this.FlowrateTimeSeries = FlowrateTimeSeries;
		this.Fluid = Fluid;
		this.PressureTimeSeries = PressureTimeSeries;
		this.UserDefinedPropertySource = UserDefinedPropertySource;
		this.TemperatureSingleValue = TemperatureSingleValue;
		this.WetBulbTemperatureSingleValue = WetBulbTemperatureSingleValue;
		this.WetBulbTemperatureTimeSeries = WetBulbTemperatureTimeSeries;
		this.TemperatureTimeSeries = TemperatureTimeSeries;
		this.FlowrateSingleValue = FlowrateSingleValue;
		this.FlowConditionSingleValue = FlowConditionSingleValue;
		this.VelocitySingleValue = VelocitySingleValue;
		this.PressureSingleValue = PressureSingleValue;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcFluidFlowProperties object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param PropertySource DEMANDED parameter of type IfcPropertySourceEnum - may not be null.
	* @param FlowConditionTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param VelocityTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param FlowrateTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param Fluid DEMANDED parameter of type IfcMaterial - may not be null.
	* @param PressureTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param UserDefinedPropertySource OPTIONAL parameter of type IfcLabel
	* @param TemperatureSingleValue OPTIONAL parameter of type IfcThermodynamicTemperatureMeasure
	* @param WetBulbTemperatureSingleValue OPTIONAL parameter of type IfcThermodynamicTemperatureMeasure
	* @param WetBulbTemperatureTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param TemperatureTimeSeries OPTIONAL parameter of type IfcTimeSeries
	* @param FlowrateSingleValue OPTIONAL parameter of type IfcDerivedMeasureValue
	* @param FlowConditionSingleValue OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param VelocitySingleValue OPTIONAL parameter of type IfcLinearVelocityMeasure
	* @param PressureSingleValue OPTIONAL parameter of type IfcPressureMeasure
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPropertySourceEnum PropertySource, IfcTimeSeries FlowConditionTimeSeries, IfcTimeSeries VelocityTimeSeries, IfcTimeSeries FlowrateTimeSeries, IfcMaterial Fluid, IfcTimeSeries PressureTimeSeries, IfcLabel UserDefinedPropertySource, IfcThermodynamicTemperatureMeasure TemperatureSingleValue, IfcThermodynamicTemperatureMeasure WetBulbTemperatureSingleValue, IfcTimeSeries WetBulbTemperatureTimeSeries, IfcTimeSeries TemperatureTimeSeries, IfcDerivedMeasureValue FlowrateSingleValue, IfcPositiveRatioMeasure FlowConditionSingleValue, IfcLinearVelocityMeasure VelocitySingleValue, IfcPressureMeasure PressureSingleValue)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.PropertySource = PropertySource;
		this.FlowConditionTimeSeries = FlowConditionTimeSeries;
		this.VelocityTimeSeries = VelocityTimeSeries;
		this.FlowrateTimeSeries = FlowrateTimeSeries;
		this.Fluid = Fluid;
		this.PressureTimeSeries = PressureTimeSeries;
		this.UserDefinedPropertySource = UserDefinedPropertySource;
		this.TemperatureSingleValue = TemperatureSingleValue;
		this.WetBulbTemperatureSingleValue = WetBulbTemperatureSingleValue;
		this.WetBulbTemperatureTimeSeries = WetBulbTemperatureTimeSeries;
		this.TemperatureTimeSeries = TemperatureTimeSeries;
		this.FlowrateSingleValue = FlowrateSingleValue;
		this.FlowConditionSingleValue = FlowConditionSingleValue;
		this.VelocitySingleValue = VelocitySingleValue;
		this.PressureSingleValue = PressureSingleValue;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.PropertySource = (IfcPropertySourceEnum) parameters.get(4);
		this.FlowConditionTimeSeries = (IfcTimeSeries) parameters.get(5);
		this.VelocityTimeSeries = (IfcTimeSeries) parameters.get(6);
		this.FlowrateTimeSeries = (IfcTimeSeries) parameters.get(7);
		this.Fluid = (IfcMaterial) parameters.get(8);
		this.PressureTimeSeries = (IfcTimeSeries) parameters.get(9);
		this.UserDefinedPropertySource = (IfcLabel) parameters.get(10);
		this.TemperatureSingleValue = (IfcThermodynamicTemperatureMeasure) parameters.get(11);
		this.WetBulbTemperatureSingleValue = (IfcThermodynamicTemperatureMeasure) parameters.get(12);
		this.WetBulbTemperatureTimeSeries = (IfcTimeSeries) parameters.get(13);
		this.TemperatureTimeSeries = (IfcTimeSeries) parameters.get(14);
		this.FlowrateSingleValue = (IfcDerivedMeasureValue) parameters.get(15);
		this.FlowConditionSingleValue = (IfcPositiveRatioMeasure) parameters.get(16);
		this.VelocitySingleValue = (IfcLinearVelocityMeasure) parameters.get(17);
		this.PressureSingleValue = (IfcPressureMeasure) parameters.get(18);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcFluidFlowProperties.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCFLUIDFLOWPROPERTIES(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PropertySource")) stepString = stepString.concat("*,");
		else{
		if(this.PropertySource != null)		stepString = stepString.concat(((RootInterface)this.PropertySource).getStepParameter(IfcPropertySourceEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FlowConditionTimeSeries")) stepString = stepString.concat("*,");
		else{
		if(this.FlowConditionTimeSeries != null)		stepString = stepString.concat(((RootInterface)this.FlowConditionTimeSeries).getStepParameter(IfcTimeSeries.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("VelocityTimeSeries")) stepString = stepString.concat("*,");
		else{
		if(this.VelocityTimeSeries != null)		stepString = stepString.concat(((RootInterface)this.VelocityTimeSeries).getStepParameter(IfcTimeSeries.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FlowrateTimeSeries")) stepString = stepString.concat("*,");
		else{
		if(this.FlowrateTimeSeries != null)		stepString = stepString.concat(((RootInterface)this.FlowrateTimeSeries).getStepParameter(IfcTimeSeries.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Fluid")) stepString = stepString.concat("*,");
		else{
		if(this.Fluid != null)		stepString = stepString.concat(((RootInterface)this.Fluid).getStepParameter(IfcMaterial.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PressureTimeSeries")) stepString = stepString.concat("*,");
		else{
		if(this.PressureTimeSeries != null)		stepString = stepString.concat(((RootInterface)this.PressureTimeSeries).getStepParameter(IfcTimeSeries.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UserDefinedPropertySource")) stepString = stepString.concat("*,");
		else{
		if(this.UserDefinedPropertySource != null)		stepString = stepString.concat(((RootInterface)this.UserDefinedPropertySource).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TemperatureSingleValue")) stepString = stepString.concat("*,");
		else{
		if(this.TemperatureSingleValue != null)		stepString = stepString.concat(((RootInterface)this.TemperatureSingleValue).getStepParameter(IfcThermodynamicTemperatureMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WetBulbTemperatureSingleValue")) stepString = stepString.concat("*,");
		else{
		if(this.WetBulbTemperatureSingleValue != null)		stepString = stepString.concat(((RootInterface)this.WetBulbTemperatureSingleValue).getStepParameter(IfcThermodynamicTemperatureMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WetBulbTemperatureTimeSeries")) stepString = stepString.concat("*,");
		else{
		if(this.WetBulbTemperatureTimeSeries != null)		stepString = stepString.concat(((RootInterface)this.WetBulbTemperatureTimeSeries).getStepParameter(IfcTimeSeries.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TemperatureTimeSeries")) stepString = stepString.concat("*,");
		else{
		if(this.TemperatureTimeSeries != null)		stepString = stepString.concat(((RootInterface)this.TemperatureTimeSeries).getStepParameter(IfcTimeSeries.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FlowrateSingleValue")) stepString = stepString.concat("*,");
		else{
		if(this.FlowrateSingleValue != null)		stepString = stepString.concat(((RootInterface)this.FlowrateSingleValue).getStepParameter(IfcDerivedMeasureValue.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FlowConditionSingleValue")) stepString = stepString.concat("*,");
		else{
		if(this.FlowConditionSingleValue != null)		stepString = stepString.concat(((RootInterface)this.FlowConditionSingleValue).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("VelocitySingleValue")) stepString = stepString.concat("*,");
		else{
		if(this.VelocitySingleValue != null)		stepString = stepString.concat(((RootInterface)this.VelocitySingleValue).getStepParameter(IfcLinearVelocityMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PressureSingleValue")) stepString = stepString.concat("*);");
		else{
		if(this.PressureSingleValue != null)		stepString = stepString.concat(((RootInterface)this.PressureSingleValue).getStepParameter(IfcPressureMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the PropertySource attribute to the given value.
	*
	* @param PropertySource OPTIONAL value to set
	**/
	public void setPropertySource(IfcPropertySourceEnum PropertySource)
	{
		this.PropertySource = PropertySource;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PropertySource attribute.
	*
	* @return the value of PropertySource
	/**/
	public IfcPropertySourceEnum getPropertySource()
	{
		return this.PropertySource;
	}

	/**
	* This method sets the FlowConditionTimeSeries attribute to the given value.
	*
	* @param FlowConditionTimeSeries DEMANDED value to set - may not be null
	**/
	public void setFlowConditionTimeSeries(IfcTimeSeries FlowConditionTimeSeries)
	{
		this.FlowConditionTimeSeries = FlowConditionTimeSeries;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the FlowConditionTimeSeries attribute.
	*
	* @return the value of FlowConditionTimeSeries
	/**/
	public IfcTimeSeries getFlowConditionTimeSeries()
	{
		return this.FlowConditionTimeSeries;
	}

	/**
	* This method sets the VelocityTimeSeries attribute to the given value.
	*
	* @param VelocityTimeSeries DEMANDED value to set - may not be null
	**/
	public void setVelocityTimeSeries(IfcTimeSeries VelocityTimeSeries)
	{
		this.VelocityTimeSeries = VelocityTimeSeries;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the VelocityTimeSeries attribute.
	*
	* @return the value of VelocityTimeSeries
	/**/
	public IfcTimeSeries getVelocityTimeSeries()
	{
		return this.VelocityTimeSeries;
	}

	/**
	* This method sets the FlowrateTimeSeries attribute to the given value.
	*
	* @param FlowrateTimeSeries DEMANDED value to set - may not be null
	**/
	public void setFlowrateTimeSeries(IfcTimeSeries FlowrateTimeSeries)
	{
		this.FlowrateTimeSeries = FlowrateTimeSeries;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the FlowrateTimeSeries attribute.
	*
	* @return the value of FlowrateTimeSeries
	/**/
	public IfcTimeSeries getFlowrateTimeSeries()
	{
		return this.FlowrateTimeSeries;
	}

	/**
	* This method sets the Fluid attribute to the given value.
	*
	* @param Fluid OPTIONAL value to set
	**/
	public void setFluid(IfcMaterial Fluid)
	{
		this.Fluid = Fluid;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Fluid attribute.
	*
	* @return the value of Fluid
	/**/
	public IfcMaterial getFluid()
	{
		return this.Fluid;
	}

	/**
	* This method sets the PressureTimeSeries attribute to the given value.
	*
	* @param PressureTimeSeries DEMANDED value to set - may not be null
	**/
	public void setPressureTimeSeries(IfcTimeSeries PressureTimeSeries)
	{
		this.PressureTimeSeries = PressureTimeSeries;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PressureTimeSeries attribute.
	*
	* @return the value of PressureTimeSeries
	/**/
	public IfcTimeSeries getPressureTimeSeries()
	{
		return this.PressureTimeSeries;
	}

	/**
	* This method sets the UserDefinedPropertySource attribute to the given value.
	*
	* @param UserDefinedPropertySource DEMANDED value to set - may not be null
	**/
	public void setUserDefinedPropertySource(IfcLabel UserDefinedPropertySource)
	{
		this.UserDefinedPropertySource = UserDefinedPropertySource;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the UserDefinedPropertySource attribute.
	*
	* @return the value of UserDefinedPropertySource
	/**/
	public IfcLabel getUserDefinedPropertySource()
	{
		return this.UserDefinedPropertySource;
	}

	/**
	* This method sets the TemperatureSingleValue attribute to the given value.
	*
	* @param TemperatureSingleValue DEMANDED value to set - may not be null
	**/
	public void setTemperatureSingleValue(IfcThermodynamicTemperatureMeasure TemperatureSingleValue)
	{
		this.TemperatureSingleValue = TemperatureSingleValue;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TemperatureSingleValue attribute.
	*
	* @return the value of TemperatureSingleValue
	/**/
	public IfcThermodynamicTemperatureMeasure getTemperatureSingleValue()
	{
		return this.TemperatureSingleValue;
	}

	/**
	* This method sets the WetBulbTemperatureSingleValue attribute to the given value.
	*
	* @param WetBulbTemperatureSingleValue DEMANDED value to set - may not be null
	**/
	public void setWetBulbTemperatureSingleValue(IfcThermodynamicTemperatureMeasure WetBulbTemperatureSingleValue)
	{
		this.WetBulbTemperatureSingleValue = WetBulbTemperatureSingleValue;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the WetBulbTemperatureSingleValue attribute.
	*
	* @return the value of WetBulbTemperatureSingleValue
	/**/
	public IfcThermodynamicTemperatureMeasure getWetBulbTemperatureSingleValue()
	{
		return this.WetBulbTemperatureSingleValue;
	}

	/**
	* This method sets the WetBulbTemperatureTimeSeries attribute to the given value.
	*
	* @param WetBulbTemperatureTimeSeries DEMANDED value to set - may not be null
	**/
	public void setWetBulbTemperatureTimeSeries(IfcTimeSeries WetBulbTemperatureTimeSeries)
	{
		this.WetBulbTemperatureTimeSeries = WetBulbTemperatureTimeSeries;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the WetBulbTemperatureTimeSeries attribute.
	*
	* @return the value of WetBulbTemperatureTimeSeries
	/**/
	public IfcTimeSeries getWetBulbTemperatureTimeSeries()
	{
		return this.WetBulbTemperatureTimeSeries;
	}

	/**
	* This method sets the TemperatureTimeSeries attribute to the given value.
	*
	* @param TemperatureTimeSeries DEMANDED value to set - may not be null
	**/
	public void setTemperatureTimeSeries(IfcTimeSeries TemperatureTimeSeries)
	{
		this.TemperatureTimeSeries = TemperatureTimeSeries;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TemperatureTimeSeries attribute.
	*
	* @return the value of TemperatureTimeSeries
	/**/
	public IfcTimeSeries getTemperatureTimeSeries()
	{
		return this.TemperatureTimeSeries;
	}

	/**
	* This method sets the FlowrateSingleValue attribute to the given value.
	*
	* @param FlowrateSingleValue DEMANDED value to set - may not be null
	**/
	public void setFlowrateSingleValue(IfcDerivedMeasureValue FlowrateSingleValue)
	{
		this.FlowrateSingleValue = FlowrateSingleValue;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the FlowrateSingleValue attribute.
	*
	* @return the value of FlowrateSingleValue
	/**/
	public IfcDerivedMeasureValue getFlowrateSingleValue()
	{
		return this.FlowrateSingleValue;
	}

	/**
	* This method sets the FlowConditionSingleValue attribute to the given value.
	*
	* @param FlowConditionSingleValue DEMANDED value to set - may not be null
	**/
	public void setFlowConditionSingleValue(IfcPositiveRatioMeasure FlowConditionSingleValue)
	{
		this.FlowConditionSingleValue = FlowConditionSingleValue;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the FlowConditionSingleValue attribute.
	*
	* @return the value of FlowConditionSingleValue
	/**/
	public IfcPositiveRatioMeasure getFlowConditionSingleValue()
	{
		return this.FlowConditionSingleValue;
	}

	/**
	* This method sets the VelocitySingleValue attribute to the given value.
	*
	* @param VelocitySingleValue DEMANDED value to set - may not be null
	**/
	public void setVelocitySingleValue(IfcLinearVelocityMeasure VelocitySingleValue)
	{
		this.VelocitySingleValue = VelocitySingleValue;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the VelocitySingleValue attribute.
	*
	* @return the value of VelocitySingleValue
	/**/
	public IfcLinearVelocityMeasure getVelocitySingleValue()
	{
		return this.VelocitySingleValue;
	}

	/**
	* This method sets the PressureSingleValue attribute to the given value.
	*
	* @param PressureSingleValue DEMANDED value to set - may not be null
	**/
	public void setPressureSingleValue(IfcPressureMeasure PressureSingleValue)
	{
		this.PressureSingleValue = PressureSingleValue;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PressureSingleValue attribute.
	*
	* @return the value of PressureSingleValue
	/**/
	public IfcPressureMeasure getPressureSingleValue()
	{
		return this.PressureSingleValue;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcFluidFlowProperties ifcFluidFlowProperties = new IfcFluidFlowProperties();
		if(this.GlobalId != null)
			ifcFluidFlowProperties.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcFluidFlowProperties.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcFluidFlowProperties.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcFluidFlowProperties.setDescription((IfcText)this.Description.clone());
		if(this.PropertySource != null)
			ifcFluidFlowProperties.setPropertySource((IfcPropertySourceEnum)this.PropertySource.clone());
		if(this.FlowConditionTimeSeries != null)
			ifcFluidFlowProperties.setFlowConditionTimeSeries((IfcTimeSeries)this.FlowConditionTimeSeries.clone());
		if(this.VelocityTimeSeries != null)
			ifcFluidFlowProperties.setVelocityTimeSeries((IfcTimeSeries)this.VelocityTimeSeries.clone());
		if(this.FlowrateTimeSeries != null)
			ifcFluidFlowProperties.setFlowrateTimeSeries((IfcTimeSeries)this.FlowrateTimeSeries.clone());
		if(this.Fluid != null)
			ifcFluidFlowProperties.setFluid((IfcMaterial)this.Fluid.clone());
		if(this.PressureTimeSeries != null)
			ifcFluidFlowProperties.setPressureTimeSeries((IfcTimeSeries)this.PressureTimeSeries.clone());
		if(this.UserDefinedPropertySource != null)
			ifcFluidFlowProperties.setUserDefinedPropertySource((IfcLabel)this.UserDefinedPropertySource.clone());
		if(this.TemperatureSingleValue != null)
			ifcFluidFlowProperties.setTemperatureSingleValue((IfcThermodynamicTemperatureMeasure)this.TemperatureSingleValue.clone());
		if(this.WetBulbTemperatureSingleValue != null)
			ifcFluidFlowProperties.setWetBulbTemperatureSingleValue((IfcThermodynamicTemperatureMeasure)this.WetBulbTemperatureSingleValue.clone());
		if(this.WetBulbTemperatureTimeSeries != null)
			ifcFluidFlowProperties.setWetBulbTemperatureTimeSeries((IfcTimeSeries)this.WetBulbTemperatureTimeSeries.clone());
		if(this.TemperatureTimeSeries != null)
			ifcFluidFlowProperties.setTemperatureTimeSeries((IfcTimeSeries)this.TemperatureTimeSeries.clone());
		if(this.FlowrateSingleValue != null)
			ifcFluidFlowProperties.setFlowrateSingleValue((IfcDerivedMeasureValue)this.FlowrateSingleValue.clone());
		if(this.FlowConditionSingleValue != null)
			ifcFluidFlowProperties.setFlowConditionSingleValue((IfcPositiveRatioMeasure)this.FlowConditionSingleValue.clone());
		if(this.VelocitySingleValue != null)
			ifcFluidFlowProperties.setVelocitySingleValue((IfcLinearVelocityMeasure)this.VelocitySingleValue.clone());
		if(this.PressureSingleValue != null)
			ifcFluidFlowProperties.setPressureSingleValue((IfcPressureMeasure)this.PressureSingleValue.clone());
		return ifcFluidFlowProperties;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcFluidFlowProperties ifcFluidFlowProperties = new IfcFluidFlowProperties();
		if(this.GlobalId != null)
			ifcFluidFlowProperties.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcFluidFlowProperties.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcFluidFlowProperties.setName(this.Name);
		if(this.Description != null)
			ifcFluidFlowProperties.setDescription(this.Description);
		if(this.PropertySource != null)
			ifcFluidFlowProperties.setPropertySource(this.PropertySource);
		if(this.FlowConditionTimeSeries != null)
			ifcFluidFlowProperties.setFlowConditionTimeSeries(this.FlowConditionTimeSeries);
		if(this.VelocityTimeSeries != null)
			ifcFluidFlowProperties.setVelocityTimeSeries(this.VelocityTimeSeries);
		if(this.FlowrateTimeSeries != null)
			ifcFluidFlowProperties.setFlowrateTimeSeries(this.FlowrateTimeSeries);
		if(this.Fluid != null)
			ifcFluidFlowProperties.setFluid(this.Fluid);
		if(this.PressureTimeSeries != null)
			ifcFluidFlowProperties.setPressureTimeSeries(this.PressureTimeSeries);
		if(this.UserDefinedPropertySource != null)
			ifcFluidFlowProperties.setUserDefinedPropertySource(this.UserDefinedPropertySource);
		if(this.TemperatureSingleValue != null)
			ifcFluidFlowProperties.setTemperatureSingleValue(this.TemperatureSingleValue);
		if(this.WetBulbTemperatureSingleValue != null)
			ifcFluidFlowProperties.setWetBulbTemperatureSingleValue(this.WetBulbTemperatureSingleValue);
		if(this.WetBulbTemperatureTimeSeries != null)
			ifcFluidFlowProperties.setWetBulbTemperatureTimeSeries(this.WetBulbTemperatureTimeSeries);
		if(this.TemperatureTimeSeries != null)
			ifcFluidFlowProperties.setTemperatureTimeSeries(this.TemperatureTimeSeries);
		if(this.FlowrateSingleValue != null)
			ifcFluidFlowProperties.setFlowrateSingleValue(this.FlowrateSingleValue);
		if(this.FlowConditionSingleValue != null)
			ifcFluidFlowProperties.setFlowConditionSingleValue(this.FlowConditionSingleValue);
		if(this.VelocitySingleValue != null)
			ifcFluidFlowProperties.setVelocitySingleValue(this.VelocitySingleValue);
		if(this.PressureSingleValue != null)
			ifcFluidFlowProperties.setPressureSingleValue(this.PressureSingleValue);
		return ifcFluidFlowProperties;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
