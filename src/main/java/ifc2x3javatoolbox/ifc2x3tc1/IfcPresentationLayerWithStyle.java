/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcPresentationLayerWithStyle<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcPresentationLayerWithStyle extends IfcPresentationLayerAssignment implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcText","SET<IfcLayeredItem>","IfcIdentifier","LOGICAL","LOGICAL","LOGICAL","SET<IfcPresentationStyleSelect>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** LayerOn is an DEMANDED attribute - may not be null**/
	protected LOGICAL LayerOn;
	/** LayerFrozen is an DEMANDED attribute - may not be null**/
	protected LOGICAL LayerFrozen;
	/** LayerBlocked is an DEMANDED attribute - may not be null**/
	protected LOGICAL LayerBlocked;
	/** LayerStyles is an DEMANDED attribute - may not be null**/
	protected SET<IfcPresentationStyleSelect> LayerStyles;
	/**
	* The default constructor.
	**/
	public IfcPresentationLayerWithStyle(){}

	private static final String[] attributes = new String[]{"Name","Description","AssignedItems","Identifier"
	,"LayerOn","LayerFrozen","LayerBlocked","LayerStyles"};

	public String[] getAttributes() {
		return IfcPresentationLayerWithStyle.attributes;
	}

	/**
	* Constructs a new IfcPresentationLayerWithStyle object using the given parameters.
	*
	* @param Name DEMANDED parameter of type IfcLabel - may not be null.
	* @param Description OPTIONAL parameter of type IfcText
	* @param AssignedItems DEMANDED parameter of type SET<IfcLayeredItem> - may not be null.
	* @param Identifier OPTIONAL parameter of type IfcIdentifier
	* @param LayerOn DEMANDED parameter of type LOGICAL - may not be null.
	* @param LayerFrozen DEMANDED parameter of type LOGICAL - may not be null.
	* @param LayerBlocked DEMANDED parameter of type LOGICAL - may not be null.
	* @param LayerStyles DEMANDED parameter of type SET<IfcPresentationStyleSelect> - may not be null.
	**/
	public IfcPresentationLayerWithStyle(IfcLabel Name, IfcText Description, SET<IfcLayeredItem> AssignedItems, IfcIdentifier Identifier, LOGICAL LayerOn, LOGICAL LayerFrozen, LOGICAL LayerBlocked, SET<IfcPresentationStyleSelect> LayerStyles)
	{
		this.Name = Name;
		this.Description = Description;
		this.AssignedItems = AssignedItems;
		this.Identifier = Identifier;
		this.LayerOn = LayerOn;
		this.LayerFrozen = LayerFrozen;
		this.LayerBlocked = LayerBlocked;
		this.LayerStyles = LayerStyles;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcPresentationLayerWithStyle object using the given parameters.
	*
	* @param Name DEMANDED parameter of type IfcLabel - may not be null.
	* @param Description OPTIONAL parameter of type IfcText
	* @param AssignedItems DEMANDED parameter of type SET<IfcLayeredItem> - may not be null.
	* @param Identifier OPTIONAL parameter of type IfcIdentifier
	* @param LayerOn DEMANDED parameter of type LOGICAL - may not be null.
	* @param LayerFrozen DEMANDED parameter of type LOGICAL - may not be null.
	* @param LayerBlocked DEMANDED parameter of type LOGICAL - may not be null.
	* @param LayerStyles DEMANDED parameter of type SET<IfcPresentationStyleSelect> - may not be null.
	**/
	public void setParameters(IfcLabel Name, IfcText Description, SET<IfcLayeredItem> AssignedItems, IfcIdentifier Identifier, LOGICAL LayerOn, LOGICAL LayerFrozen, LOGICAL LayerBlocked, SET<IfcPresentationStyleSelect> LayerStyles)
	{
		this.Name = Name;
		this.Description = Description;
		this.AssignedItems = AssignedItems;
		this.Identifier = Identifier;
		this.LayerOn = LayerOn;
		this.LayerFrozen = LayerFrozen;
		this.LayerBlocked = LayerBlocked;
		this.LayerStyles = LayerStyles;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.Description = (IfcText) parameters.get(1);
		this.AssignedItems = (SET<IfcLayeredItem>) parameters.get(2);
		this.Identifier = (IfcIdentifier) parameters.get(3);
		this.LayerOn = (LOGICAL) parameters.get(4);
		this.LayerFrozen = (LOGICAL) parameters.get(5);
		this.LayerBlocked = (LOGICAL) parameters.get(6);
		this.LayerStyles = (SET<IfcPresentationStyleSelect>) parameters.get(7);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(AssignedItems != null)
		{
			for(IfcLayeredItem AssignedItems$ : AssignedItems)
			{
				if(AssignedItems$ instanceof IfcRepresentationItem)
				{
				if(((IfcRepresentationItem)AssignedItems$).LayerAssignments_Inverse == null)
				{
					((IfcRepresentationItem)AssignedItems$).LayerAssignments_Inverse = new SET<IfcPresentationLayerAssignment>();
				}
				((IfcRepresentationItem)AssignedItems$).LayerAssignments_Inverse.add(this);
				}
				else if(AssignedItems$ instanceof IfcRepresentation)
				{
				if(((IfcRepresentation)AssignedItems$).LayerAssignments_Inverse == null)
				{
					((IfcRepresentation)AssignedItems$).LayerAssignments_Inverse = new SET<IfcPresentationLayerAssignment>();
				}
				((IfcRepresentation)AssignedItems$).LayerAssignments_Inverse.add(this);
				}
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcPresentationLayerWithStyle.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCPRESENTATIONLAYERWITHSTYLE(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AssignedItems")) stepString = stepString.concat("*,");
		else{
		if(this.AssignedItems != null)		stepString = stepString.concat(((RootInterface)this.AssignedItems).getStepParameter(IfcLayeredItem.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Identifier")) stepString = stepString.concat("*,");
		else{
		if(this.Identifier != null)		stepString = stepString.concat(((RootInterface)this.Identifier).getStepParameter(IfcIdentifier.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LayerOn")) stepString = stepString.concat("*,");
		else{
		if(this.LayerOn != null)		stepString = stepString.concat(((RootInterface)this.LayerOn).getStepParameter(LOGICAL.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LayerFrozen")) stepString = stepString.concat("*,");
		else{
		if(this.LayerFrozen != null)		stepString = stepString.concat(((RootInterface)this.LayerFrozen).getStepParameter(LOGICAL.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LayerBlocked")) stepString = stepString.concat("*,");
		else{
		if(this.LayerBlocked != null)		stepString = stepString.concat(((RootInterface)this.LayerBlocked).getStepParameter(LOGICAL.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LayerStyles")) stepString = stepString.concat("*);");
		else{
		if(this.LayerStyles != null)		stepString = stepString.concat(((RootInterface)this.LayerStyles).getStepParameter(IfcPresentationStyleSelect.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the LayerOn attribute to the given value.
	*
	* @param LayerOn OPTIONAL value to set
	**/
	public void setLayerOn(LOGICAL LayerOn)
	{
		this.LayerOn = LayerOn;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LayerOn attribute.
	*
	* @return the value of LayerOn
	/**/
	public LOGICAL getLayerOn()
	{
		return this.LayerOn;
	}

	/**
	* This method sets the LayerFrozen attribute to the given value.
	*
	* @param LayerFrozen OPTIONAL value to set
	**/
	public void setLayerFrozen(LOGICAL LayerFrozen)
	{
		this.LayerFrozen = LayerFrozen;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LayerFrozen attribute.
	*
	* @return the value of LayerFrozen
	/**/
	public LOGICAL getLayerFrozen()
	{
		return this.LayerFrozen;
	}

	/**
	* This method sets the LayerBlocked attribute to the given value.
	*
	* @param LayerBlocked OPTIONAL value to set
	**/
	public void setLayerBlocked(LOGICAL LayerBlocked)
	{
		this.LayerBlocked = LayerBlocked;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LayerBlocked attribute.
	*
	* @return the value of LayerBlocked
	/**/
	public LOGICAL getLayerBlocked()
	{
		return this.LayerBlocked;
	}

	/**
	* This method sets the LayerStyles attribute to the given value.
	*
	* @param LayerStyles OPTIONAL value to set
	**/
	public void setLayerStyles(SET<IfcPresentationStyleSelect> LayerStyles)
	{
		this.LayerStyles = LayerStyles;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the LayerStyles attribute.
	*
	* @return a copy of the LayerStyles set
	**/
	public SET<IfcPresentationStyleSelect> getLayerStyles()
	{
		if(this.LayerStyles != null)
			return new SET<IfcPresentationStyleSelect>(this.LayerStyles);
		return null;
	}

	/**
	* This method adds an IfcPresentationStyleSelect object to the LayerStyles set.
	* @param LayerStyles element to be appended to this set.
	**/
	public void addLayerStyles(IfcPresentationStyleSelect LayerStyles)
	{
		if(this.LayerStyles == null)
			this.LayerStyles = new SET<IfcPresentationStyleSelect>();
		this.LayerStyles.add(LayerStyles);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcPresentationStyleSelect objects to the LayerStyles set.
	* @param LayerStyles collection containing elements to be added to this set.
	**/
	public void addAllLayerStyles(java.util.Collection<IfcPresentationStyleSelect> LayerStyles)
	{
		if(this.LayerStyles == null)
			this.LayerStyles = new SET<IfcPresentationStyleSelect>();
		this.LayerStyles.addAll(LayerStyles);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the LayerStyles set.
	**/
	public void clearLayerStyles()
	{
		if(this.LayerStyles != null)
		{
			this.LayerStyles.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcPresentationStyleSelect object from the LayerStyles set.
	* @param LayerStyles element to be removed from this set.
	**/
	public void removeLayerStyles(IfcPresentationStyleSelect LayerStyles)
	{
		if(this.LayerStyles != null)
		{
			this.LayerStyles.remove(LayerStyles);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcPresentationStyleSelect objects from the LayerStyles set.
	* @param LayerStyles collection containing elements to be removed from this set.
	**/
	public void removeAllLayerStyles(java.util.Collection<IfcPresentationStyleSelect> LayerStyles)
	{
		if(this.LayerStyles != null)
		{
			this.LayerStyles.removeAll(LayerStyles);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcPresentationLayerWithStyle ifcPresentationLayerWithStyle = new IfcPresentationLayerWithStyle();
		if(this.Name != null)
			ifcPresentationLayerWithStyle.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcPresentationLayerWithStyle.setDescription((IfcText)this.Description.clone());
		if(this.AssignedItems != null)
			ifcPresentationLayerWithStyle.setAssignedItems((SET<IfcLayeredItem>)this.AssignedItems.clone());
		if(this.Identifier != null)
			ifcPresentationLayerWithStyle.setIdentifier((IfcIdentifier)this.Identifier.clone());
		if(this.LayerOn != null)
			ifcPresentationLayerWithStyle.setLayerOn((LOGICAL)this.LayerOn.clone());
		if(this.LayerFrozen != null)
			ifcPresentationLayerWithStyle.setLayerFrozen((LOGICAL)this.LayerFrozen.clone());
		if(this.LayerBlocked != null)
			ifcPresentationLayerWithStyle.setLayerBlocked((LOGICAL)this.LayerBlocked.clone());
		if(this.LayerStyles != null)
			ifcPresentationLayerWithStyle.setLayerStyles((SET<IfcPresentationStyleSelect>)this.LayerStyles.clone());
		return ifcPresentationLayerWithStyle;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcPresentationLayerWithStyle ifcPresentationLayerWithStyle = new IfcPresentationLayerWithStyle();
		if(this.Name != null)
			ifcPresentationLayerWithStyle.setName(this.Name);
		if(this.Description != null)
			ifcPresentationLayerWithStyle.setDescription(this.Description);
		if(this.AssignedItems != null)
			ifcPresentationLayerWithStyle.setAssignedItems(this.AssignedItems);
		if(this.Identifier != null)
			ifcPresentationLayerWithStyle.setIdentifier(this.Identifier);
		if(this.LayerOn != null)
			ifcPresentationLayerWithStyle.setLayerOn(this.LayerOn);
		if(this.LayerFrozen != null)
			ifcPresentationLayerWithStyle.setLayerFrozen(this.LayerFrozen);
		if(this.LayerBlocked != null)
			ifcPresentationLayerWithStyle.setLayerBlocked(this.LayerBlocked);
		if(this.LayerStyles != null)
			ifcPresentationLayerWithStyle.setLayerStyles(this.LayerStyles);
		return ifcPresentationLayerWithStyle;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
