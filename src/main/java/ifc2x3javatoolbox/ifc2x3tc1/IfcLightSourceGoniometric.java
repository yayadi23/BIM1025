/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcLightSourceGoniometric<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcLightSourceGoniometric extends IfcLightSource implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcColourRgb","IfcNormalisedRatioMeasure","IfcNormalisedRatioMeasure","IfcAxis2Placement3D","IfcColourRgb","IfcThermodynamicTemperatureMeasure","IfcLuminousFluxMeasure","IfcLightEmissionSourceEnum","IfcLightDistributionDataSourceSelect"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** Position is an DEMANDED attribute - may not be null**/
	protected IfcAxis2Placement3D Position;
	/** ColourAppearance is an OPTIONAL attribute**/
	protected IfcColourRgb ColourAppearance;
	/** ColourTemperature is an DEMANDED attribute - may not be null**/
	protected IfcThermodynamicTemperatureMeasure ColourTemperature;
	/** LuminousFlux is an DEMANDED attribute - may not be null**/
	protected IfcLuminousFluxMeasure LuminousFlux;
	/** LightEmissionSource is an DEMANDED attribute - may not be null**/
	protected IfcLightEmissionSourceEnum LightEmissionSource;
	/** LightDistributionDataSource is an DEMANDED attribute - may not be null**/
	protected IfcLightDistributionDataSourceSelect LightDistributionDataSource;
	/**
	* The default constructor.
	**/
	public IfcLightSourceGoniometric(){}

	private static final String[] attributes = new String[]{"Name","LightColour","AmbientIntensity","Intensity"
			,"Position","ColourAppearance","ColourTemperature","LuminousFlux","LightEmissionSource"
	,"LightDistributionDataSource"};

	public String[] getAttributes() {
		return IfcLightSourceGoniometric.attributes;
	}

	/**
	* Constructs a new IfcLightSourceGoniometric object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param LightColour DEMANDED parameter of type IfcColourRgb - may not be null.
	* @param AmbientIntensity OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Intensity OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Position DEMANDED parameter of type IfcAxis2Placement3D - may not be null.
	* @param ColourAppearance OPTIONAL parameter of type IfcColourRgb
	* @param ColourTemperature DEMANDED parameter of type IfcThermodynamicTemperatureMeasure - may not be null.
	* @param LuminousFlux DEMANDED parameter of type IfcLuminousFluxMeasure - may not be null.
	* @param LightEmissionSource DEMANDED parameter of type IfcLightEmissionSourceEnum - may not be null.
	* @param LightDistributionDataSource DEMANDED parameter of type IfcLightDistributionDataSourceSelect - may not be null.
	**/
	public IfcLightSourceGoniometric(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity, IfcAxis2Placement3D Position, IfcColourRgb ColourAppearance, IfcThermodynamicTemperatureMeasure ColourTemperature, IfcLuminousFluxMeasure LuminousFlux, IfcLightEmissionSourceEnum LightEmissionSource, IfcLightDistributionDataSourceSelect LightDistributionDataSource)
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.ColourAppearance = ColourAppearance;
		this.ColourTemperature = ColourTemperature;
		this.LuminousFlux = LuminousFlux;
		this.LightEmissionSource = LightEmissionSource;
		this.LightDistributionDataSource = LightDistributionDataSource;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcLightSourceGoniometric object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param LightColour DEMANDED parameter of type IfcColourRgb - may not be null.
	* @param AmbientIntensity OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Intensity OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Position DEMANDED parameter of type IfcAxis2Placement3D - may not be null.
	* @param ColourAppearance OPTIONAL parameter of type IfcColourRgb
	* @param ColourTemperature DEMANDED parameter of type IfcThermodynamicTemperatureMeasure - may not be null.
	* @param LuminousFlux DEMANDED parameter of type IfcLuminousFluxMeasure - may not be null.
	* @param LightEmissionSource DEMANDED parameter of type IfcLightEmissionSourceEnum - may not be null.
	* @param LightDistributionDataSource DEMANDED parameter of type IfcLightDistributionDataSourceSelect - may not be null.
	**/
	public void setParameters(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity, IfcAxis2Placement3D Position, IfcColourRgb ColourAppearance, IfcThermodynamicTemperatureMeasure ColourTemperature, IfcLuminousFluxMeasure LuminousFlux, IfcLightEmissionSourceEnum LightEmissionSource, IfcLightDistributionDataSourceSelect LightDistributionDataSource)
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.ColourAppearance = ColourAppearance;
		this.ColourTemperature = ColourTemperature;
		this.LuminousFlux = LuminousFlux;
		this.LightEmissionSource = LightEmissionSource;
		this.LightDistributionDataSource = LightDistributionDataSource;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.LightColour = (IfcColourRgb) parameters.get(1);
		this.AmbientIntensity = (IfcNormalisedRatioMeasure) parameters.get(2);
		this.Intensity = (IfcNormalisedRatioMeasure) parameters.get(3);
		this.Position = (IfcAxis2Placement3D) parameters.get(4);
		this.ColourAppearance = (IfcColourRgb) parameters.get(5);
		this.ColourTemperature = (IfcThermodynamicTemperatureMeasure) parameters.get(6);
		this.LuminousFlux = (IfcLuminousFluxMeasure) parameters.get(7);
		this.LightEmissionSource = (IfcLightEmissionSourceEnum) parameters.get(8);
		this.LightDistributionDataSource = (IfcLightDistributionDataSourceSelect) parameters.get(9);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcLightSourceGoniometric.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCLIGHTSOURCEGONIOMETRIC(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LightColour")) stepString = stepString.concat("*,");
		else{
		if(this.LightColour != null)		stepString = stepString.concat(((RootInterface)this.LightColour).getStepParameter(IfcColourRgb.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AmbientIntensity")) stepString = stepString.concat("*,");
		else{
		if(this.AmbientIntensity != null)		stepString = stepString.concat(((RootInterface)this.AmbientIntensity).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Intensity")) stepString = stepString.concat("*,");
		else{
		if(this.Intensity != null)		stepString = stepString.concat(((RootInterface)this.Intensity).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Position")) stepString = stepString.concat("*,");
		else{
		if(this.Position != null)		stepString = stepString.concat(((RootInterface)this.Position).getStepParameter(IfcAxis2Placement3D.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ColourAppearance")) stepString = stepString.concat("*,");
		else{
		if(this.ColourAppearance != null)		stepString = stepString.concat(((RootInterface)this.ColourAppearance).getStepParameter(IfcColourRgb.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ColourTemperature")) stepString = stepString.concat("*,");
		else{
		if(this.ColourTemperature != null)		stepString = stepString.concat(((RootInterface)this.ColourTemperature).getStepParameter(IfcThermodynamicTemperatureMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LuminousFlux")) stepString = stepString.concat("*,");
		else{
		if(this.LuminousFlux != null)		stepString = stepString.concat(((RootInterface)this.LuminousFlux).getStepParameter(IfcLuminousFluxMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LightEmissionSource")) stepString = stepString.concat("*,");
		else{
		if(this.LightEmissionSource != null)		stepString = stepString.concat(((RootInterface)this.LightEmissionSource).getStepParameter(IfcLightEmissionSourceEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LightDistributionDataSource")) stepString = stepString.concat("*);");
		else{
		if(this.LightDistributionDataSource != null)		stepString = stepString.concat(((RootInterface)this.LightDistributionDataSource).getStepParameter(IfcLightDistributionDataSourceSelect.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the Position attribute to the given value.
	*
	* @param Position OPTIONAL value to set
	**/
	public void setPosition(IfcAxis2Placement3D Position)
	{
		this.Position = Position;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Position attribute.
	*
	* @return the value of Position
	/**/
	public IfcAxis2Placement3D getPosition()
	{
		return this.Position;
	}

	/**
	* This method sets the ColourAppearance attribute to the given value.
	*
	* @param ColourAppearance DEMANDED value to set - may not be null
	**/
	public void setColourAppearance(IfcColourRgb ColourAppearance)
	{
		this.ColourAppearance = ColourAppearance;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ColourAppearance attribute.
	*
	* @return the value of ColourAppearance
	/**/
	public IfcColourRgb getColourAppearance()
	{
		return this.ColourAppearance;
	}

	/**
	* This method sets the ColourTemperature attribute to the given value.
	*
	* @param ColourTemperature OPTIONAL value to set
	**/
	public void setColourTemperature(IfcThermodynamicTemperatureMeasure ColourTemperature)
	{
		this.ColourTemperature = ColourTemperature;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ColourTemperature attribute.
	*
	* @return the value of ColourTemperature
	/**/
	public IfcThermodynamicTemperatureMeasure getColourTemperature()
	{
		return this.ColourTemperature;
	}

	/**
	* This method sets the LuminousFlux attribute to the given value.
	*
	* @param LuminousFlux OPTIONAL value to set
	**/
	public void setLuminousFlux(IfcLuminousFluxMeasure LuminousFlux)
	{
		this.LuminousFlux = LuminousFlux;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LuminousFlux attribute.
	*
	* @return the value of LuminousFlux
	/**/
	public IfcLuminousFluxMeasure getLuminousFlux()
	{
		return this.LuminousFlux;
	}

	/**
	* This method sets the LightEmissionSource attribute to the given value.
	*
	* @param LightEmissionSource OPTIONAL value to set
	**/
	public void setLightEmissionSource(IfcLightEmissionSourceEnum LightEmissionSource)
	{
		this.LightEmissionSource = LightEmissionSource;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LightEmissionSource attribute.
	*
	* @return the value of LightEmissionSource
	/**/
	public IfcLightEmissionSourceEnum getLightEmissionSource()
	{
		return this.LightEmissionSource;
	}

	/**
	* This method sets the LightDistributionDataSource attribute to the given value.
	*
	* @param LightDistributionDataSource OPTIONAL value to set
	**/
	public void setLightDistributionDataSource(IfcLightDistributionDataSourceSelect LightDistributionDataSource)
	{
		this.LightDistributionDataSource = LightDistributionDataSource;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LightDistributionDataSource attribute.
	*
	* @return the value of LightDistributionDataSource
	/**/
	public IfcLightDistributionDataSourceSelect getLightDistributionDataSource()
	{
		return this.LightDistributionDataSource;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcLightSourceGoniometric ifcLightSourceGoniometric = new IfcLightSourceGoniometric();
		if(this.Name != null)
			ifcLightSourceGoniometric.setName((IfcLabel)this.Name.clone());
		if(this.LightColour != null)
			ifcLightSourceGoniometric.setLightColour((IfcColourRgb)this.LightColour.clone());
		if(this.AmbientIntensity != null)
			ifcLightSourceGoniometric.setAmbientIntensity((IfcNormalisedRatioMeasure)this.AmbientIntensity.clone());
		if(this.Intensity != null)
			ifcLightSourceGoniometric.setIntensity((IfcNormalisedRatioMeasure)this.Intensity.clone());
		if(this.Position != null)
			ifcLightSourceGoniometric.setPosition((IfcAxis2Placement3D)this.Position.clone());
		if(this.ColourAppearance != null)
			ifcLightSourceGoniometric.setColourAppearance((IfcColourRgb)this.ColourAppearance.clone());
		if(this.ColourTemperature != null)
			ifcLightSourceGoniometric.setColourTemperature((IfcThermodynamicTemperatureMeasure)this.ColourTemperature.clone());
		if(this.LuminousFlux != null)
			ifcLightSourceGoniometric.setLuminousFlux((IfcLuminousFluxMeasure)this.LuminousFlux.clone());
		if(this.LightEmissionSource != null)
			ifcLightSourceGoniometric.setLightEmissionSource((IfcLightEmissionSourceEnum)this.LightEmissionSource.clone());
		if(this.LightDistributionDataSource != null)
			ifcLightSourceGoniometric.setLightDistributionDataSource((IfcLightDistributionDataSourceSelect)this.LightDistributionDataSource.clone());
		return ifcLightSourceGoniometric;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcLightSourceGoniometric ifcLightSourceGoniometric = new IfcLightSourceGoniometric();
		if(this.Name != null)
			ifcLightSourceGoniometric.setName(this.Name);
		if(this.LightColour != null)
			ifcLightSourceGoniometric.setLightColour(this.LightColour);
		if(this.AmbientIntensity != null)
			ifcLightSourceGoniometric.setAmbientIntensity(this.AmbientIntensity);
		if(this.Intensity != null)
			ifcLightSourceGoniometric.setIntensity(this.Intensity);
		if(this.Position != null)
			ifcLightSourceGoniometric.setPosition(this.Position);
		if(this.ColourAppearance != null)
			ifcLightSourceGoniometric.setColourAppearance(this.ColourAppearance);
		if(this.ColourTemperature != null)
			ifcLightSourceGoniometric.setColourTemperature(this.ColourTemperature);
		if(this.LuminousFlux != null)
			ifcLightSourceGoniometric.setLuminousFlux(this.LuminousFlux);
		if(this.LightEmissionSource != null)
			ifcLightSourceGoniometric.setLightEmissionSource(this.LightEmissionSource);
		if(this.LightDistributionDataSource != null)
			ifcLightSourceGoniometric.setLightDistributionDataSource(this.LightDistributionDataSource);
		return ifcLightSourceGoniometric;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
