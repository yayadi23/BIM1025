/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcReinforcingMesh<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcReinforcingMesh extends IfcReinforcingElement implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcLabel","IfcObjectPlacement","IfcProductRepresentation","IfcIdentifier","IfcLabel","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcAreaMeasure","IfcAreaMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** MeshLength is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure MeshLength;
	/** MeshWidth is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure MeshWidth;
	/** LongitudinalBarNominalDiameter is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure LongitudinalBarNominalDiameter;
	/** TransverseBarNominalDiameter is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure TransverseBarNominalDiameter;
	/** LongitudinalBarCrossSectionArea is an DEMANDED attribute - may not be null**/
	protected IfcAreaMeasure LongitudinalBarCrossSectionArea;
	/** TransverseBarCrossSectionArea is an DEMANDED attribute - may not be null**/
	protected IfcAreaMeasure TransverseBarCrossSectionArea;
	/** LongitudinalBarSpacing is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure LongitudinalBarSpacing;
	/** TransverseBarSpacing is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure TransverseBarSpacing;
	/**
	* The default constructor.
	**/
	public IfcReinforcingMesh(){}

	private static final String[] attributes = new String[]{"GlobalId","OwnerHistory","Name","Description"
			,"ObjectType","ObjectPlacement","Representation","Tag","SteelGrade","MeshLength"
			,"MeshWidth","LongitudinalBarNominalDiameter","TransverseBarNominalDiameter"
			,"LongitudinalBarCrossSectionArea","TransverseBarCrossSectionArea","LongitudinalBarSpacing"
	,"TransverseBarSpacing"};

	public String[] getAttributes() {
		return IfcReinforcingMesh.attributes;
	}

	/**
	* Constructs a new IfcReinforcingMesh object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param ObjectPlacement OPTIONAL parameter of type IfcObjectPlacement
	* @param Representation OPTIONAL parameter of type IfcProductRepresentation
	* @param Tag OPTIONAL parameter of type IfcIdentifier
	* @param SteelGrade OPTIONAL parameter of type IfcLabel
	* @param MeshLength OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MeshWidth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param LongitudinalBarNominalDiameter DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param TransverseBarNominalDiameter DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param LongitudinalBarCrossSectionArea DEMANDED parameter of type IfcAreaMeasure - may not be null.
	* @param TransverseBarCrossSectionArea DEMANDED parameter of type IfcAreaMeasure - may not be null.
	* @param LongitudinalBarSpacing DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param TransverseBarSpacing DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	**/
	public IfcReinforcingMesh(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcLabel SteelGrade, IfcPositiveLengthMeasure MeshLength, IfcPositiveLengthMeasure MeshWidth, IfcPositiveLengthMeasure LongitudinalBarNominalDiameter, IfcPositiveLengthMeasure TransverseBarNominalDiameter, IfcAreaMeasure LongitudinalBarCrossSectionArea, IfcAreaMeasure TransverseBarCrossSectionArea, IfcPositiveLengthMeasure LongitudinalBarSpacing, IfcPositiveLengthMeasure TransverseBarSpacing)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.MeshLength = MeshLength;
		this.MeshWidth = MeshWidth;
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		this.TransverseBarSpacing = TransverseBarSpacing;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcReinforcingMesh object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param ObjectPlacement OPTIONAL parameter of type IfcObjectPlacement
	* @param Representation OPTIONAL parameter of type IfcProductRepresentation
	* @param Tag OPTIONAL parameter of type IfcIdentifier
	* @param SteelGrade OPTIONAL parameter of type IfcLabel
	* @param MeshLength OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MeshWidth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param LongitudinalBarNominalDiameter DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param TransverseBarNominalDiameter DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param LongitudinalBarCrossSectionArea DEMANDED parameter of type IfcAreaMeasure - may not be null.
	* @param TransverseBarCrossSectionArea DEMANDED parameter of type IfcAreaMeasure - may not be null.
	* @param LongitudinalBarSpacing DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param TransverseBarSpacing DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcLabel SteelGrade, IfcPositiveLengthMeasure MeshLength, IfcPositiveLengthMeasure MeshWidth, IfcPositiveLengthMeasure LongitudinalBarNominalDiameter, IfcPositiveLengthMeasure TransverseBarNominalDiameter, IfcAreaMeasure LongitudinalBarCrossSectionArea, IfcAreaMeasure TransverseBarCrossSectionArea, IfcPositiveLengthMeasure LongitudinalBarSpacing, IfcPositiveLengthMeasure TransverseBarSpacing)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.MeshLength = MeshLength;
		this.MeshWidth = MeshWidth;
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		this.TransverseBarSpacing = TransverseBarSpacing;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.ObjectType = (IfcLabel) parameters.get(4);
		this.ObjectPlacement = (IfcObjectPlacement) parameters.get(5);
		this.Representation = (IfcProductRepresentation) parameters.get(6);
		this.Tag = (IfcIdentifier) parameters.get(7);
		this.SteelGrade = (IfcLabel) parameters.get(8);
		this.MeshLength = (IfcPositiveLengthMeasure) parameters.get(9);
		this.MeshWidth = (IfcPositiveLengthMeasure) parameters.get(10);
		this.LongitudinalBarNominalDiameter = (IfcPositiveLengthMeasure) parameters.get(11);
		this.TransverseBarNominalDiameter = (IfcPositiveLengthMeasure) parameters.get(12);
		this.LongitudinalBarCrossSectionArea = (IfcAreaMeasure) parameters.get(13);
		this.TransverseBarCrossSectionArea = (IfcAreaMeasure) parameters.get(14);
		this.LongitudinalBarSpacing = (IfcPositiveLengthMeasure) parameters.get(15);
		this.TransverseBarSpacing = (IfcPositiveLengthMeasure) parameters.get(16);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(ObjectPlacement != null)
		{
				if(ObjectPlacement.PlacesObject_Inverse == null)
				{
					ObjectPlacement.PlacesObject_Inverse = new SET<IfcProduct>();
				}
				ObjectPlacement.PlacesObject_Inverse.add(this);
		}
		if(Representation != null)
		{
				if(Representation instanceof IfcProductDefinitionShape)
				{
				if(((IfcProductDefinitionShape)Representation).ShapeOfProduct_Inverse == null)
				{
					((IfcProductDefinitionShape)Representation).ShapeOfProduct_Inverse = new SET<IfcProduct>();
				}
				((IfcProductDefinitionShape)Representation).ShapeOfProduct_Inverse.add(this);
				}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcReinforcingMesh.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCREINFORCINGMESH(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectType")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectType != null)		stepString = stepString.concat(((RootInterface)this.ObjectType).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectPlacement")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectPlacement != null)		stepString = stepString.concat(((RootInterface)this.ObjectPlacement).getStepParameter(IfcObjectPlacement.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Representation")) stepString = stepString.concat("*,");
		else{
		if(this.Representation != null)		stepString = stepString.concat(((RootInterface)this.Representation).getStepParameter(IfcProductRepresentation.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Tag")) stepString = stepString.concat("*,");
		else{
		if(this.Tag != null)		stepString = stepString.concat(((RootInterface)this.Tag).getStepParameter(IfcIdentifier.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("SteelGrade")) stepString = stepString.concat("*,");
		else{
		if(this.SteelGrade != null)		stepString = stepString.concat(((RootInterface)this.SteelGrade).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MeshLength")) stepString = stepString.concat("*,");
		else{
		if(this.MeshLength != null)		stepString = stepString.concat(((RootInterface)this.MeshLength).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MeshWidth")) stepString = stepString.concat("*,");
		else{
		if(this.MeshWidth != null)		stepString = stepString.concat(((RootInterface)this.MeshWidth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LongitudinalBarNominalDiameter")) stepString = stepString.concat("*,");
		else{
		if(this.LongitudinalBarNominalDiameter != null)		stepString = stepString.concat(((RootInterface)this.LongitudinalBarNominalDiameter).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TransverseBarNominalDiameter")) stepString = stepString.concat("*,");
		else{
		if(this.TransverseBarNominalDiameter != null)		stepString = stepString.concat(((RootInterface)this.TransverseBarNominalDiameter).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LongitudinalBarCrossSectionArea")) stepString = stepString.concat("*,");
		else{
		if(this.LongitudinalBarCrossSectionArea != null)		stepString = stepString.concat(((RootInterface)this.LongitudinalBarCrossSectionArea).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TransverseBarCrossSectionArea")) stepString = stepString.concat("*,");
		else{
		if(this.TransverseBarCrossSectionArea != null)		stepString = stepString.concat(((RootInterface)this.TransverseBarCrossSectionArea).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LongitudinalBarSpacing")) stepString = stepString.concat("*,");
		else{
		if(this.LongitudinalBarSpacing != null)		stepString = stepString.concat(((RootInterface)this.LongitudinalBarSpacing).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TransverseBarSpacing")) stepString = stepString.concat("*);");
		else{
		if(this.TransverseBarSpacing != null)		stepString = stepString.concat(((RootInterface)this.TransverseBarSpacing).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the MeshLength attribute to the given value.
	*
	* @param MeshLength DEMANDED value to set - may not be null
	**/
	public void setMeshLength(IfcPositiveLengthMeasure MeshLength)
	{
		this.MeshLength = MeshLength;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MeshLength attribute.
	*
	* @return the value of MeshLength
	/**/
	public IfcPositiveLengthMeasure getMeshLength()
	{
		return this.MeshLength;
	}

	/**
	* This method sets the MeshWidth attribute to the given value.
	*
	* @param MeshWidth DEMANDED value to set - may not be null
	**/
	public void setMeshWidth(IfcPositiveLengthMeasure MeshWidth)
	{
		this.MeshWidth = MeshWidth;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MeshWidth attribute.
	*
	* @return the value of MeshWidth
	/**/
	public IfcPositiveLengthMeasure getMeshWidth()
	{
		return this.MeshWidth;
	}

	/**
	* This method sets the LongitudinalBarNominalDiameter attribute to the given value.
	*
	* @param LongitudinalBarNominalDiameter OPTIONAL value to set
	**/
	public void setLongitudinalBarNominalDiameter(IfcPositiveLengthMeasure LongitudinalBarNominalDiameter)
	{
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LongitudinalBarNominalDiameter attribute.
	*
	* @return the value of LongitudinalBarNominalDiameter
	/**/
	public IfcPositiveLengthMeasure getLongitudinalBarNominalDiameter()
	{
		return this.LongitudinalBarNominalDiameter;
	}

	/**
	* This method sets the TransverseBarNominalDiameter attribute to the given value.
	*
	* @param TransverseBarNominalDiameter OPTIONAL value to set
	**/
	public void setTransverseBarNominalDiameter(IfcPositiveLengthMeasure TransverseBarNominalDiameter)
	{
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TransverseBarNominalDiameter attribute.
	*
	* @return the value of TransverseBarNominalDiameter
	/**/
	public IfcPositiveLengthMeasure getTransverseBarNominalDiameter()
	{
		return this.TransverseBarNominalDiameter;
	}

	/**
	* This method sets the LongitudinalBarCrossSectionArea attribute to the given value.
	*
	* @param LongitudinalBarCrossSectionArea OPTIONAL value to set
	**/
	public void setLongitudinalBarCrossSectionArea(IfcAreaMeasure LongitudinalBarCrossSectionArea)
	{
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LongitudinalBarCrossSectionArea attribute.
	*
	* @return the value of LongitudinalBarCrossSectionArea
	/**/
	public IfcAreaMeasure getLongitudinalBarCrossSectionArea()
	{
		return this.LongitudinalBarCrossSectionArea;
	}

	/**
	* This method sets the TransverseBarCrossSectionArea attribute to the given value.
	*
	* @param TransverseBarCrossSectionArea OPTIONAL value to set
	**/
	public void setTransverseBarCrossSectionArea(IfcAreaMeasure TransverseBarCrossSectionArea)
	{
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TransverseBarCrossSectionArea attribute.
	*
	* @return the value of TransverseBarCrossSectionArea
	/**/
	public IfcAreaMeasure getTransverseBarCrossSectionArea()
	{
		return this.TransverseBarCrossSectionArea;
	}

	/**
	* This method sets the LongitudinalBarSpacing attribute to the given value.
	*
	* @param LongitudinalBarSpacing OPTIONAL value to set
	**/
	public void setLongitudinalBarSpacing(IfcPositiveLengthMeasure LongitudinalBarSpacing)
	{
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LongitudinalBarSpacing attribute.
	*
	* @return the value of LongitudinalBarSpacing
	/**/
	public IfcPositiveLengthMeasure getLongitudinalBarSpacing()
	{
		return this.LongitudinalBarSpacing;
	}

	/**
	* This method sets the TransverseBarSpacing attribute to the given value.
	*
	* @param TransverseBarSpacing OPTIONAL value to set
	**/
	public void setTransverseBarSpacing(IfcPositiveLengthMeasure TransverseBarSpacing)
	{
		this.TransverseBarSpacing = TransverseBarSpacing;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TransverseBarSpacing attribute.
	*
	* @return the value of TransverseBarSpacing
	/**/
	public IfcPositiveLengthMeasure getTransverseBarSpacing()
	{
		return this.TransverseBarSpacing;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcReinforcingMesh ifcReinforcingMesh = new IfcReinforcingMesh();
		if(this.GlobalId != null)
			ifcReinforcingMesh.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcReinforcingMesh.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcReinforcingMesh.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcReinforcingMesh.setDescription((IfcText)this.Description.clone());
		if(this.ObjectType != null)
			ifcReinforcingMesh.setObjectType((IfcLabel)this.ObjectType.clone());
		if(this.ObjectPlacement != null)
			ifcReinforcingMesh.setObjectPlacement((IfcObjectPlacement)this.ObjectPlacement.clone());
		if(this.Representation != null)
			ifcReinforcingMesh.setRepresentation((IfcProductRepresentation)this.Representation.clone());
		if(this.Tag != null)
			ifcReinforcingMesh.setTag((IfcIdentifier)this.Tag.clone());
		if(this.SteelGrade != null)
			ifcReinforcingMesh.setSteelGrade((IfcLabel)this.SteelGrade.clone());
		if(this.MeshLength != null)
			ifcReinforcingMesh.setMeshLength((IfcPositiveLengthMeasure)this.MeshLength.clone());
		if(this.MeshWidth != null)
			ifcReinforcingMesh.setMeshWidth((IfcPositiveLengthMeasure)this.MeshWidth.clone());
		if(this.LongitudinalBarNominalDiameter != null)
			ifcReinforcingMesh.setLongitudinalBarNominalDiameter((IfcPositiveLengthMeasure)this.LongitudinalBarNominalDiameter.clone());
		if(this.TransverseBarNominalDiameter != null)
			ifcReinforcingMesh.setTransverseBarNominalDiameter((IfcPositiveLengthMeasure)this.TransverseBarNominalDiameter.clone());
		if(this.LongitudinalBarCrossSectionArea != null)
			ifcReinforcingMesh.setLongitudinalBarCrossSectionArea((IfcAreaMeasure)this.LongitudinalBarCrossSectionArea.clone());
		if(this.TransverseBarCrossSectionArea != null)
			ifcReinforcingMesh.setTransverseBarCrossSectionArea((IfcAreaMeasure)this.TransverseBarCrossSectionArea.clone());
		if(this.LongitudinalBarSpacing != null)
			ifcReinforcingMesh.setLongitudinalBarSpacing((IfcPositiveLengthMeasure)this.LongitudinalBarSpacing.clone());
		if(this.TransverseBarSpacing != null)
			ifcReinforcingMesh.setTransverseBarSpacing((IfcPositiveLengthMeasure)this.TransverseBarSpacing.clone());
		return ifcReinforcingMesh;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcReinforcingMesh ifcReinforcingMesh = new IfcReinforcingMesh();
		if(this.GlobalId != null)
			ifcReinforcingMesh.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcReinforcingMesh.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcReinforcingMesh.setName(this.Name);
		if(this.Description != null)
			ifcReinforcingMesh.setDescription(this.Description);
		if(this.ObjectType != null)
			ifcReinforcingMesh.setObjectType(this.ObjectType);
		if(this.ObjectPlacement != null)
			ifcReinforcingMesh.setObjectPlacement(this.ObjectPlacement);
		if(this.Representation != null)
			ifcReinforcingMesh.setRepresentation(this.Representation);
		if(this.Tag != null)
			ifcReinforcingMesh.setTag(this.Tag);
		if(this.SteelGrade != null)
			ifcReinforcingMesh.setSteelGrade(this.SteelGrade);
		if(this.MeshLength != null)
			ifcReinforcingMesh.setMeshLength(this.MeshLength);
		if(this.MeshWidth != null)
			ifcReinforcingMesh.setMeshWidth(this.MeshWidth);
		if(this.LongitudinalBarNominalDiameter != null)
			ifcReinforcingMesh.setLongitudinalBarNominalDiameter(this.LongitudinalBarNominalDiameter);
		if(this.TransverseBarNominalDiameter != null)
			ifcReinforcingMesh.setTransverseBarNominalDiameter(this.TransverseBarNominalDiameter);
		if(this.LongitudinalBarCrossSectionArea != null)
			ifcReinforcingMesh.setLongitudinalBarCrossSectionArea(this.LongitudinalBarCrossSectionArea);
		if(this.TransverseBarCrossSectionArea != null)
			ifcReinforcingMesh.setTransverseBarCrossSectionArea(this.TransverseBarCrossSectionArea);
		if(this.LongitudinalBarSpacing != null)
			ifcReinforcingMesh.setLongitudinalBarSpacing(this.LongitudinalBarSpacing);
		if(this.TransverseBarSpacing != null)
			ifcReinforcingMesh.setTransverseBarSpacing(this.TransverseBarSpacing);
		return ifcReinforcingMesh;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
