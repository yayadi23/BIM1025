/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcBuilding<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcBuilding extends IfcSpatialStructureElement implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcLabel","IfcObjectPlacement","IfcProductRepresentation","IfcLabel","IfcElementCompositionEnum","IfcLengthMeasure","IfcLengthMeasure","IfcPostalAddress"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** ElevationOfRefHeight is an OPTIONAL attribute**/
	protected IfcLengthMeasure ElevationOfRefHeight;
	/** ElevationOfTerrain is an OPTIONAL attribute**/
	protected IfcLengthMeasure ElevationOfTerrain;
	/** BuildingAddress is an OPTIONAL attribute**/
	protected IfcPostalAddress BuildingAddress;
	/**
	* The default constructor.
	**/
	public IfcBuilding(){}

	private static final String[] attributes = new String[]{"GlobalId","OwnerHistory","Name","Description"
	,"ObjectType","ObjectPlacement","Representation","LongName","CompositionType","ElevationOfRefHeight"
	,"ElevationOfTerrain","BuildingAddress"};

	public String[] getAttributes() {
		return IfcBuilding.attributes;
	}

	/**
	* Constructs a new IfcBuilding object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param ObjectPlacement OPTIONAL parameter of type IfcObjectPlacement
	* @param Representation OPTIONAL parameter of type IfcProductRepresentation
	* @param LongName OPTIONAL parameter of type IfcLabel
	* @param CompositionType DEMANDED parameter of type IfcElementCompositionEnum - may not be null.
	* @param ElevationOfRefHeight OPTIONAL parameter of type IfcLengthMeasure
	* @param ElevationOfTerrain OPTIONAL parameter of type IfcLengthMeasure
	* @param BuildingAddress OPTIONAL parameter of type IfcPostalAddress
	**/
	public IfcBuilding(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName, IfcElementCompositionEnum CompositionType, IfcLengthMeasure ElevationOfRefHeight, IfcLengthMeasure ElevationOfTerrain, IfcPostalAddress BuildingAddress)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.ElevationOfRefHeight = ElevationOfRefHeight;
		this.ElevationOfTerrain = ElevationOfTerrain;
		this.BuildingAddress = BuildingAddress;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcBuilding object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param ObjectPlacement OPTIONAL parameter of type IfcObjectPlacement
	* @param Representation OPTIONAL parameter of type IfcProductRepresentation
	* @param LongName OPTIONAL parameter of type IfcLabel
	* @param CompositionType DEMANDED parameter of type IfcElementCompositionEnum - may not be null.
	* @param ElevationOfRefHeight OPTIONAL parameter of type IfcLengthMeasure
	* @param ElevationOfTerrain OPTIONAL parameter of type IfcLengthMeasure
	* @param BuildingAddress OPTIONAL parameter of type IfcPostalAddress
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName, IfcElementCompositionEnum CompositionType, IfcLengthMeasure ElevationOfRefHeight, IfcLengthMeasure ElevationOfTerrain, IfcPostalAddress BuildingAddress)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.ElevationOfRefHeight = ElevationOfRefHeight;
		this.ElevationOfTerrain = ElevationOfTerrain;
		this.BuildingAddress = BuildingAddress;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.ObjectType = (IfcLabel) parameters.get(4);
		this.ObjectPlacement = (IfcObjectPlacement) parameters.get(5);
		this.Representation = (IfcProductRepresentation) parameters.get(6);
		this.LongName = (IfcLabel) parameters.get(7);
		this.CompositionType = (IfcElementCompositionEnum) parameters.get(8);
		this.ElevationOfRefHeight = (IfcLengthMeasure) parameters.get(9);
		this.ElevationOfTerrain = (IfcLengthMeasure) parameters.get(10);
		this.BuildingAddress = (IfcPostalAddress) parameters.get(11);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(ObjectPlacement != null)
		{
				if(ObjectPlacement.PlacesObject_Inverse == null)
				{
					ObjectPlacement.PlacesObject_Inverse = new SET<IfcProduct>();
				}
				ObjectPlacement.PlacesObject_Inverse.add(this);
		}
		if(Representation != null)
		{
				if(Representation instanceof IfcProductDefinitionShape)
				{
				if(((IfcProductDefinitionShape)Representation).ShapeOfProduct_Inverse == null)
				{
					((IfcProductDefinitionShape)Representation).ShapeOfProduct_Inverse = new SET<IfcProduct>();
				}
				((IfcProductDefinitionShape)Representation).ShapeOfProduct_Inverse.add(this);
				}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcBuilding.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCBUILDING(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectType")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectType != null)		stepString = stepString.concat(((RootInterface)this.ObjectType).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectPlacement")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectPlacement != null)		stepString = stepString.concat(((RootInterface)this.ObjectPlacement).getStepParameter(IfcObjectPlacement.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Representation")) stepString = stepString.concat("*,");
		else{
		if(this.Representation != null)		stepString = stepString.concat(((RootInterface)this.Representation).getStepParameter(IfcProductRepresentation.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LongName")) stepString = stepString.concat("*,");
		else{
		if(this.LongName != null)		stepString = stepString.concat(((RootInterface)this.LongName).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CompositionType")) stepString = stepString.concat("*,");
		else{
		if(this.CompositionType != null)		stepString = stepString.concat(((RootInterface)this.CompositionType).getStepParameter(IfcElementCompositionEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ElevationOfRefHeight")) stepString = stepString.concat("*,");
		else{
		if(this.ElevationOfRefHeight != null)		stepString = stepString.concat(((RootInterface)this.ElevationOfRefHeight).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ElevationOfTerrain")) stepString = stepString.concat("*,");
		else{
		if(this.ElevationOfTerrain != null)		stepString = stepString.concat(((RootInterface)this.ElevationOfTerrain).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BuildingAddress")) stepString = stepString.concat("*);");
		else{
		if(this.BuildingAddress != null)		stepString = stepString.concat(((RootInterface)this.BuildingAddress).getStepParameter(IfcPostalAddress.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the ElevationOfRefHeight attribute to the given value.
	*
	* @param ElevationOfRefHeight DEMANDED value to set - may not be null
	**/
	public void setElevationOfRefHeight(IfcLengthMeasure ElevationOfRefHeight)
	{
		this.ElevationOfRefHeight = ElevationOfRefHeight;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ElevationOfRefHeight attribute.
	*
	* @return the value of ElevationOfRefHeight
	/**/
	public IfcLengthMeasure getElevationOfRefHeight()
	{
		return this.ElevationOfRefHeight;
	}

	/**
	* This method sets the ElevationOfTerrain attribute to the given value.
	*
	* @param ElevationOfTerrain DEMANDED value to set - may not be null
	**/
	public void setElevationOfTerrain(IfcLengthMeasure ElevationOfTerrain)
	{
		this.ElevationOfTerrain = ElevationOfTerrain;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ElevationOfTerrain attribute.
	*
	* @return the value of ElevationOfTerrain
	/**/
	public IfcLengthMeasure getElevationOfTerrain()
	{
		return this.ElevationOfTerrain;
	}

	/**
	* This method sets the BuildingAddress attribute to the given value.
	*
	* @param BuildingAddress DEMANDED value to set - may not be null
	**/
	public void setBuildingAddress(IfcPostalAddress BuildingAddress)
	{
		this.BuildingAddress = BuildingAddress;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the BuildingAddress attribute.
	*
	* @return the value of BuildingAddress
	/**/
	public IfcPostalAddress getBuildingAddress()
	{
		return this.BuildingAddress;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcBuilding ifcBuilding = new IfcBuilding();
		if(this.GlobalId != null)
			ifcBuilding.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcBuilding.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcBuilding.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcBuilding.setDescription((IfcText)this.Description.clone());
		if(this.ObjectType != null)
			ifcBuilding.setObjectType((IfcLabel)this.ObjectType.clone());
		if(this.ObjectPlacement != null)
			ifcBuilding.setObjectPlacement((IfcObjectPlacement)this.ObjectPlacement.clone());
		if(this.Representation != null)
			ifcBuilding.setRepresentation((IfcProductRepresentation)this.Representation.clone());
		if(this.LongName != null)
			ifcBuilding.setLongName((IfcLabel)this.LongName.clone());
		if(this.CompositionType != null)
			ifcBuilding.setCompositionType((IfcElementCompositionEnum)this.CompositionType.clone());
		if(this.ElevationOfRefHeight != null)
			ifcBuilding.setElevationOfRefHeight((IfcLengthMeasure)this.ElevationOfRefHeight.clone());
		if(this.ElevationOfTerrain != null)
			ifcBuilding.setElevationOfTerrain((IfcLengthMeasure)this.ElevationOfTerrain.clone());
		if(this.BuildingAddress != null)
			ifcBuilding.setBuildingAddress((IfcPostalAddress)this.BuildingAddress.clone());
		return ifcBuilding;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcBuilding ifcBuilding = new IfcBuilding();
		if(this.GlobalId != null)
			ifcBuilding.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcBuilding.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcBuilding.setName(this.Name);
		if(this.Description != null)
			ifcBuilding.setDescription(this.Description);
		if(this.ObjectType != null)
			ifcBuilding.setObjectType(this.ObjectType);
		if(this.ObjectPlacement != null)
			ifcBuilding.setObjectPlacement(this.ObjectPlacement);
		if(this.Representation != null)
			ifcBuilding.setRepresentation(this.Representation);
		if(this.LongName != null)
			ifcBuilding.setLongName(this.LongName);
		if(this.CompositionType != null)
			ifcBuilding.setCompositionType(this.CompositionType);
		if(this.ElevationOfRefHeight != null)
			ifcBuilding.setElevationOfRefHeight(this.ElevationOfRefHeight);
		if(this.ElevationOfTerrain != null)
			ifcBuilding.setElevationOfTerrain(this.ElevationOfTerrain);
		if(this.BuildingAddress != null)
			ifcBuilding.setBuildingAddress(this.BuildingAddress);
		return ifcBuilding;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
