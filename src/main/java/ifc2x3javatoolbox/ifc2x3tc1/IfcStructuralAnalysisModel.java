/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcStructuralAnalysisModel<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcStructuralAnalysisModel extends IfcSystem implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcLabel","IfcAnalysisModelTypeEnum","IfcAxis2Placement3D","SET<IfcStructuralLoadGroup>","SET<IfcStructuralResultGroup>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** PredefinedType is an DEMANDED attribute - may not be null**/
	protected IfcAnalysisModelTypeEnum PredefinedType;
	/** OrientationOf2DPlane is an OPTIONAL attribute**/
	protected IfcAxis2Placement3D OrientationOf2DPlane;
	/** LoadedBy is an OPTIONAL attribute**/
	protected SET<IfcStructuralLoadGroup> LoadedBy;
	/** HasResults is an OPTIONAL attribute**/
	protected SET<IfcStructuralResultGroup> HasResults;
	/**
	* The default constructor.
	**/
	public IfcStructuralAnalysisModel(){}

	private static final String[] attributes = new String[]{"GlobalId","OwnerHistory","Name","Description",
			"ObjectType","PredefinedType","OrientationOf2DPlane","LoadedBy","HasResults"};

	public String[] getAttributes(){
		return IfcStructuralAnalysisModel.attributes;
	}

	/**
	* Constructs a new IfcStructuralAnalysisModel object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param PredefinedType DEMANDED parameter of type IfcAnalysisModelTypeEnum - may not be null.
	* @param OrientationOf2DPlane OPTIONAL parameter of type IfcAxis2Placement3D
	* @param LoadedBy OPTIONAL parameter of type SET<IfcStructuralLoadGroup>
	* @param HasResults OPTIONAL parameter of type SET<IfcStructuralResultGroup>
	**/
	public IfcStructuralAnalysisModel(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcAnalysisModelTypeEnum PredefinedType, IfcAxis2Placement3D OrientationOf2DPlane, SET<IfcStructuralLoadGroup> LoadedBy, SET<IfcStructuralResultGroup> HasResults)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.OrientationOf2DPlane = OrientationOf2DPlane;
		this.LoadedBy = LoadedBy;
		this.HasResults = HasResults;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcStructuralAnalysisModel object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param PredefinedType DEMANDED parameter of type IfcAnalysisModelTypeEnum - may not be null.
	* @param OrientationOf2DPlane OPTIONAL parameter of type IfcAxis2Placement3D
	* @param LoadedBy OPTIONAL parameter of type SET<IfcStructuralLoadGroup>
	* @param HasResults OPTIONAL parameter of type SET<IfcStructuralResultGroup>
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcAnalysisModelTypeEnum PredefinedType, IfcAxis2Placement3D OrientationOf2DPlane, SET<IfcStructuralLoadGroup> LoadedBy, SET<IfcStructuralResultGroup> HasResults)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.OrientationOf2DPlane = OrientationOf2DPlane;
		this.LoadedBy = LoadedBy;
		this.HasResults = HasResults;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.ObjectType = (IfcLabel) parameters.get(4);
		this.PredefinedType = (IfcAnalysisModelTypeEnum) parameters.get(5);
		this.OrientationOf2DPlane = (IfcAxis2Placement3D) parameters.get(6);
		this.LoadedBy = (SET<IfcStructuralLoadGroup>) parameters.get(7);
		this.HasResults = (SET<IfcStructuralResultGroup>) parameters.get(8);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(LoadedBy != null)
		{
			for(IfcStructuralLoadGroup LoadedBy$ : LoadedBy)
			{
				if(LoadedBy$.LoadGroupFor_Inverse == null)
				{
					LoadedBy$.LoadGroupFor_Inverse = new SET<IfcStructuralAnalysisModel>();
				}
				LoadedBy$.LoadGroupFor_Inverse.add(this);
			}
		}
		if(HasResults != null)
		{
			for(IfcStructuralResultGroup HasResults$ : HasResults)
			{
				if(HasResults$.ResultGroupFor_Inverse == null)
				{
					HasResults$.ResultGroupFor_Inverse = new SET<IfcStructuralAnalysisModel>();
				}
				HasResults$.ResultGroupFor_Inverse.add(this);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcStructuralAnalysisModel.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSTRUCTURALANALYSISMODEL(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectType")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectType != null)		stepString = stepString.concat(((RootInterface)this.ObjectType).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PredefinedType")) stepString = stepString.concat("*,");
		else{
		if(this.PredefinedType != null)		stepString = stepString.concat(((RootInterface)this.PredefinedType).getStepParameter(IfcAnalysisModelTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OrientationOf2DPlane")) stepString = stepString.concat("*,");
		else{
		if(this.OrientationOf2DPlane != null)		stepString = stepString.concat(((RootInterface)this.OrientationOf2DPlane).getStepParameter(IfcAxis2Placement3D.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LoadedBy")) stepString = stepString.concat("*,");
		else{
		if(this.LoadedBy != null)		stepString = stepString.concat(((RootInterface)this.LoadedBy).getStepParameter(IfcStructuralLoadGroup.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("HasResults")) stepString = stepString.concat("*);");
		else{
		if(this.HasResults != null)		stepString = stepString.concat(((RootInterface)this.HasResults).getStepParameter(IfcStructuralResultGroup.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the PredefinedType attribute to the given value.
	*
	* @param PredefinedType OPTIONAL value to set
	**/
	public void setPredefinedType(IfcAnalysisModelTypeEnum PredefinedType)
	{
		this.PredefinedType = PredefinedType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PredefinedType attribute.
	*
	* @return the value of PredefinedType
	/**/
	public IfcAnalysisModelTypeEnum getPredefinedType()
	{
		return this.PredefinedType;
	}

	/**
	* This method sets the OrientationOf2DPlane attribute to the given value.
	*
	* @param OrientationOf2DPlane DEMANDED value to set - may not be null
	**/
	public void setOrientationOf2DPlane(IfcAxis2Placement3D OrientationOf2DPlane)
	{
		this.OrientationOf2DPlane = OrientationOf2DPlane;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the OrientationOf2DPlane attribute.
	*
	* @return the value of OrientationOf2DPlane
	/**/
	public IfcAxis2Placement3D getOrientationOf2DPlane()
	{
		return this.OrientationOf2DPlane;
	}

	/**
	* This method sets the LoadedBy attribute to the given value.
	*
	* @param LoadedBy DEMANDED value to set - may not be null
	**/
	public void setLoadedBy(SET<IfcStructuralLoadGroup> LoadedBy)
	{
		synchronizeInversesRemoveLoadedBy(this.LoadedBy);
		this.LoadedBy = LoadedBy;
		synchronizeInversesAddLoadedBy(this.LoadedBy);
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the LoadedBy attribute.
	*
	* @return a copy of the LoadedBy set
	**/
	public SET<IfcStructuralLoadGroup> getLoadedBy()
	{
		if(this.LoadedBy != null)
			return new SET<IfcStructuralLoadGroup>(this.LoadedBy);
		return null;
	}

	/**
	* This method adds an IfcStructuralLoadGroup object to the LoadedBy set.
	* @param LoadedBy element to be appended to this set.
	**/
	public void addLoadedBy(IfcStructuralLoadGroup LoadedBy)
	{
		if(this.LoadedBy == null)
			this.LoadedBy = new SET<IfcStructuralLoadGroup>();
		this.LoadedBy.add(LoadedBy);
		synchronizeInversesAddLoadedBy(LoadedBy);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcStructuralLoadGroup objects to the LoadedBy set.
	* @param LoadedBy collection containing elements to be added to this set.
	**/
	public void addAllLoadedBy(java.util.Collection<IfcStructuralLoadGroup> LoadedBy)
	{
		if(this.LoadedBy == null)
			this.LoadedBy = new SET<IfcStructuralLoadGroup>();
		this.LoadedBy.addAll(LoadedBy);
		synchronizeInversesAddLoadedBy(LoadedBy);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the LoadedBy set.
	**/
	public void clearLoadedBy()
	{
		if(this.LoadedBy != null)
		{
			synchronizeInversesRemoveLoadedBy(this.LoadedBy);
			this.LoadedBy.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcStructuralLoadGroup object from the LoadedBy set.
	* @param LoadedBy element to be removed from this set.
	**/
	public void removeLoadedBy(IfcStructuralLoadGroup LoadedBy)
	{
		if(this.LoadedBy != null)
		{
			this.LoadedBy.remove(LoadedBy);
			synchronizeInversesRemoveLoadedBy(LoadedBy);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcStructuralLoadGroup objects from the LoadedBy set.
	* @param LoadedBy collection containing elements to be removed from this set.
	**/
	public void removeAllLoadedBy(java.util.Collection<IfcStructuralLoadGroup> LoadedBy)
	{
		if(this.LoadedBy != null)
		{
			this.LoadedBy.removeAll(LoadedBy);
			synchronizeInversesRemoveLoadedBy(LoadedBy);
			fireChangeEvent();
		}
	}

	private void synchronizeInversesAddLoadedBy(IfcStructuralLoadGroup LoadedBy)
	{
		if(LoadedBy != null)
		{
				if(LoadedBy.LoadGroupFor_Inverse == null)
				{
					LoadedBy.LoadGroupFor_Inverse = new SET<IfcStructuralAnalysisModel>();
				}
				LoadedBy.LoadGroupFor_Inverse.add(this);
		}
	}

	private void synchronizeInversesAddLoadedBy(java.util.Collection<IfcStructuralLoadGroup> LoadedBy)
	{
		if(LoadedBy != null)
		{
			for(IfcStructuralLoadGroup LoadedBy$ : LoadedBy)
			{
				synchronizeInversesAddLoadedBy(LoadedBy$);
			}
		}
	}

	private void synchronizeInversesRemoveLoadedBy(IfcStructuralLoadGroup LoadedBy)
	{
		if(LoadedBy != null)
		{
				if(LoadedBy.LoadGroupFor_Inverse != null)
				{
					LoadedBy.LoadGroupFor_Inverse.remove(this);
				}
		}
	}

	private void synchronizeInversesRemoveLoadedBy(java.util.Collection<IfcStructuralLoadGroup> LoadedBy)
	{
		if(LoadedBy != null)
		{
			for(IfcStructuralLoadGroup LoadedBy$ : LoadedBy)
			{
				synchronizeInversesRemoveLoadedBy(LoadedBy$);
			}
		}
	}

	/**
	* This method sets the HasResults attribute to the given value.
	*
	* @param HasResults DEMANDED value to set - may not be null
	**/
	public void setHasResults(SET<IfcStructuralResultGroup> HasResults)
	{
		synchronizeInversesRemoveHasResults(this.HasResults);
		this.HasResults = HasResults;
		synchronizeInversesAddHasResults(this.HasResults);
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the HasResults attribute.
	*
	* @return a copy of the HasResults set
	**/
	public SET<IfcStructuralResultGroup> getHasResults()
	{
		if(this.HasResults != null)
			return new SET<IfcStructuralResultGroup>(this.HasResults);
		return null;
	}

	/**
	* This method adds an IfcStructuralResultGroup object to the HasResults set.
	* @param HasResults element to be appended to this set.
	**/
	public void addHasResults(IfcStructuralResultGroup HasResults)
	{
		if(this.HasResults == null)
			this.HasResults = new SET<IfcStructuralResultGroup>();
		this.HasResults.add(HasResults);
		synchronizeInversesAddHasResults(HasResults);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcStructuralResultGroup objects to the HasResults set.
	* @param HasResults collection containing elements to be added to this set.
	**/
	public void addAllHasResults(java.util.Collection<IfcStructuralResultGroup> HasResults)
	{
		if(this.HasResults == null)
			this.HasResults = new SET<IfcStructuralResultGroup>();
		this.HasResults.addAll(HasResults);
		synchronizeInversesAddHasResults(HasResults);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the HasResults set.
	**/
	public void clearHasResults()
	{
		if(this.HasResults != null)
		{
			synchronizeInversesRemoveHasResults(this.HasResults);
			this.HasResults.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcStructuralResultGroup object from the HasResults set.
	* @param HasResults element to be removed from this set.
	**/
	public void removeHasResults(IfcStructuralResultGroup HasResults)
	{
		if(this.HasResults != null)
		{
			this.HasResults.remove(HasResults);
			synchronizeInversesRemoveHasResults(HasResults);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcStructuralResultGroup objects from the HasResults set.
	* @param HasResults collection containing elements to be removed from this set.
	**/
	public void removeAllHasResults(java.util.Collection<IfcStructuralResultGroup> HasResults)
	{
		if(this.HasResults != null)
		{
			this.HasResults.removeAll(HasResults);
			synchronizeInversesRemoveHasResults(HasResults);
			fireChangeEvent();
		}
	}

	private void synchronizeInversesAddHasResults(IfcStructuralResultGroup HasResults)
	{
		if(HasResults != null)
		{
				if(HasResults.ResultGroupFor_Inverse == null)
				{
					HasResults.ResultGroupFor_Inverse = new SET<IfcStructuralAnalysisModel>();
				}
				HasResults.ResultGroupFor_Inverse.add(this);
		}
	}

	private void synchronizeInversesAddHasResults(java.util.Collection<IfcStructuralResultGroup> HasResults)
	{
		if(HasResults != null)
		{
			for(IfcStructuralResultGroup HasResults$ : HasResults)
			{
				synchronizeInversesAddHasResults(HasResults$);
			}
		}
	}

	private void synchronizeInversesRemoveHasResults(IfcStructuralResultGroup HasResults)
	{
		if(HasResults != null)
		{
				if(HasResults.ResultGroupFor_Inverse != null)
				{
					HasResults.ResultGroupFor_Inverse.remove(this);
				}
		}
	}

	private void synchronizeInversesRemoveHasResults(java.util.Collection<IfcStructuralResultGroup> HasResults)
	{
		if(HasResults != null)
		{
			for(IfcStructuralResultGroup HasResults$ : HasResults)
			{
				synchronizeInversesRemoveHasResults(HasResults$);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcStructuralAnalysisModel ifcStructuralAnalysisModel = new IfcStructuralAnalysisModel();
		if(this.GlobalId != null)
			ifcStructuralAnalysisModel.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcStructuralAnalysisModel.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcStructuralAnalysisModel.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcStructuralAnalysisModel.setDescription((IfcText)this.Description.clone());
		if(this.ObjectType != null)
			ifcStructuralAnalysisModel.setObjectType((IfcLabel)this.ObjectType.clone());
		if(this.PredefinedType != null)
			ifcStructuralAnalysisModel.setPredefinedType((IfcAnalysisModelTypeEnum)this.PredefinedType.clone());
		if(this.OrientationOf2DPlane != null)
			ifcStructuralAnalysisModel.setOrientationOf2DPlane((IfcAxis2Placement3D)this.OrientationOf2DPlane.clone());
		if(this.LoadedBy != null)
			ifcStructuralAnalysisModel.setLoadedBy((SET<IfcStructuralLoadGroup>)this.LoadedBy.clone());
		if(this.HasResults != null)
			ifcStructuralAnalysisModel.setHasResults((SET<IfcStructuralResultGroup>)this.HasResults.clone());
		return ifcStructuralAnalysisModel;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcStructuralAnalysisModel ifcStructuralAnalysisModel = new IfcStructuralAnalysisModel();
		if(this.GlobalId != null)
			ifcStructuralAnalysisModel.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcStructuralAnalysisModel.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcStructuralAnalysisModel.setName(this.Name);
		if(this.Description != null)
			ifcStructuralAnalysisModel.setDescription(this.Description);
		if(this.ObjectType != null)
			ifcStructuralAnalysisModel.setObjectType(this.ObjectType);
		if(this.PredefinedType != null)
			ifcStructuralAnalysisModel.setPredefinedType(this.PredefinedType);
		if(this.OrientationOf2DPlane != null)
			ifcStructuralAnalysisModel.setOrientationOf2DPlane(this.OrientationOf2DPlane);
		if(this.LoadedBy != null)
			ifcStructuralAnalysisModel.setLoadedBy(this.LoadedBy);
		if(this.HasResults != null)
			ifcStructuralAnalysisModel.setHasResults(this.HasResults);
		return ifcStructuralAnalysisModel;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
