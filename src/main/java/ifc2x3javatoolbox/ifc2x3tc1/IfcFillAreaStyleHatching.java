/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcFillAreaStyleHatching<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcFillAreaStyleHatching extends IfcGeometricRepresentationItem implements IfcFillStyleSelect, ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcCurveStyle","IfcHatchLineDistanceSelect","IfcCartesianPoint","IfcCartesianPoint","IfcPlaneAngleMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** HatchLineAppearance is an DEMANDED attribute - may not be null**/
	protected IfcCurveStyle HatchLineAppearance;
	/** StartOfNextHatchLine is an DEMANDED attribute - may not be null**/
	protected IfcHatchLineDistanceSelect StartOfNextHatchLine;
	/** PointOfReferenceHatchLine is an OPTIONAL attribute**/
	protected IfcCartesianPoint PointOfReferenceHatchLine;
	/** PatternStart is an OPTIONAL attribute**/
	protected IfcCartesianPoint PatternStart;
	/** HatchLineAngle is an DEMANDED attribute - may not be null**/
	protected IfcPlaneAngleMeasure HatchLineAngle;
	/**
	* The default constructor.
	**/
	public IfcFillAreaStyleHatching(){}

	private static final String[] attributes = new String[]{"HatchLineAppearance","StartOfNextHatchLine"
	,"PointOfReferenceHatchLine","PatternStart","HatchLineAngle"};

	public String[] getAttributes() {
		return IfcFillAreaStyleHatching.attributes;
	}

	/**
	* Constructs a new IfcFillAreaStyleHatching object using the given parameters.
	*
	* @param HatchLineAppearance DEMANDED parameter of type IfcCurveStyle - may not be null.
	* @param StartOfNextHatchLine DEMANDED parameter of type IfcHatchLineDistanceSelect - may not be null.
	* @param PointOfReferenceHatchLine OPTIONAL parameter of type IfcCartesianPoint
	* @param PatternStart OPTIONAL parameter of type IfcCartesianPoint
	* @param HatchLineAngle DEMANDED parameter of type IfcPlaneAngleMeasure - may not be null.
	**/
	public IfcFillAreaStyleHatching(IfcCurveStyle HatchLineAppearance, IfcHatchLineDistanceSelect StartOfNextHatchLine, IfcCartesianPoint PointOfReferenceHatchLine, IfcCartesianPoint PatternStart, IfcPlaneAngleMeasure HatchLineAngle)
	{
		this.HatchLineAppearance = HatchLineAppearance;
		this.StartOfNextHatchLine = StartOfNextHatchLine;
		this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
		this.PatternStart = PatternStart;
		this.HatchLineAngle = HatchLineAngle;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcFillAreaStyleHatching object using the given parameters.
	*
	* @param HatchLineAppearance DEMANDED parameter of type IfcCurveStyle - may not be null.
	* @param StartOfNextHatchLine DEMANDED parameter of type IfcHatchLineDistanceSelect - may not be null.
	* @param PointOfReferenceHatchLine OPTIONAL parameter of type IfcCartesianPoint
	* @param PatternStart OPTIONAL parameter of type IfcCartesianPoint
	* @param HatchLineAngle DEMANDED parameter of type IfcPlaneAngleMeasure - may not be null.
	**/
	public void setParameters(IfcCurveStyle HatchLineAppearance, IfcHatchLineDistanceSelect StartOfNextHatchLine, IfcCartesianPoint PointOfReferenceHatchLine, IfcCartesianPoint PatternStart, IfcPlaneAngleMeasure HatchLineAngle)
	{
		this.HatchLineAppearance = HatchLineAppearance;
		this.StartOfNextHatchLine = StartOfNextHatchLine;
		this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
		this.PatternStart = PatternStart;
		this.HatchLineAngle = HatchLineAngle;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.HatchLineAppearance = (IfcCurveStyle) parameters.get(0);
		this.StartOfNextHatchLine = (IfcHatchLineDistanceSelect) parameters.get(1);
		this.PointOfReferenceHatchLine = (IfcCartesianPoint) parameters.get(2);
		this.PatternStart = (IfcCartesianPoint) parameters.get(3);
		this.HatchLineAngle = (IfcPlaneAngleMeasure) parameters.get(4);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcFillAreaStyleHatching.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCFILLAREASTYLEHATCHING(");
		if(getRedefinedDerivedAttributeTypes().contains("HatchLineAppearance")) stepString = stepString.concat("*,");
		else{
		if(this.HatchLineAppearance != null)		stepString = stepString.concat(((RootInterface)this.HatchLineAppearance).getStepParameter(IfcCurveStyle.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("StartOfNextHatchLine")) stepString = stepString.concat("*,");
		else{
		if(this.StartOfNextHatchLine != null)		stepString = stepString.concat(((RootInterface)this.StartOfNextHatchLine).getStepParameter(IfcHatchLineDistanceSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PointOfReferenceHatchLine")) stepString = stepString.concat("*,");
		else{
		if(this.PointOfReferenceHatchLine != null)		stepString = stepString.concat(((RootInterface)this.PointOfReferenceHatchLine).getStepParameter(IfcCartesianPoint.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PatternStart")) stepString = stepString.concat("*,");
		else{
		if(this.PatternStart != null)		stepString = stepString.concat(((RootInterface)this.PatternStart).getStepParameter(IfcCartesianPoint.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("HatchLineAngle")) stepString = stepString.concat("*);");
		else{
		if(this.HatchLineAngle != null)		stepString = stepString.concat(((RootInterface)this.HatchLineAngle).getStepParameter(IfcPlaneAngleMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the HatchLineAppearance attribute to the given value.
	*
	* @param HatchLineAppearance OPTIONAL value to set
	**/
	public void setHatchLineAppearance(IfcCurveStyle HatchLineAppearance)
	{
		this.HatchLineAppearance = HatchLineAppearance;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the HatchLineAppearance attribute.
	*
	* @return the value of HatchLineAppearance
	/**/
	public IfcCurveStyle getHatchLineAppearance()
	{
		return this.HatchLineAppearance;
	}

	/**
	* This method sets the StartOfNextHatchLine attribute to the given value.
	*
	* @param StartOfNextHatchLine OPTIONAL value to set
	**/
	public void setStartOfNextHatchLine(IfcHatchLineDistanceSelect StartOfNextHatchLine)
	{
		this.StartOfNextHatchLine = StartOfNextHatchLine;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the StartOfNextHatchLine attribute.
	*
	* @return the value of StartOfNextHatchLine
	/**/
	public IfcHatchLineDistanceSelect getStartOfNextHatchLine()
	{
		return this.StartOfNextHatchLine;
	}

	/**
	* This method sets the PointOfReferenceHatchLine attribute to the given value.
	*
	* @param PointOfReferenceHatchLine DEMANDED value to set - may not be null
	**/
	public void setPointOfReferenceHatchLine(IfcCartesianPoint PointOfReferenceHatchLine)
	{
		this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PointOfReferenceHatchLine attribute.
	*
	* @return the value of PointOfReferenceHatchLine
	/**/
	public IfcCartesianPoint getPointOfReferenceHatchLine()
	{
		return this.PointOfReferenceHatchLine;
	}

	/**
	* This method sets the PatternStart attribute to the given value.
	*
	* @param PatternStart DEMANDED value to set - may not be null
	**/
	public void setPatternStart(IfcCartesianPoint PatternStart)
	{
		this.PatternStart = PatternStart;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PatternStart attribute.
	*
	* @return the value of PatternStart
	/**/
	public IfcCartesianPoint getPatternStart()
	{
		return this.PatternStart;
	}

	/**
	* This method sets the HatchLineAngle attribute to the given value.
	*
	* @param HatchLineAngle OPTIONAL value to set
	**/
	public void setHatchLineAngle(IfcPlaneAngleMeasure HatchLineAngle)
	{
		this.HatchLineAngle = HatchLineAngle;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the HatchLineAngle attribute.
	*
	* @return the value of HatchLineAngle
	/**/
	public IfcPlaneAngleMeasure getHatchLineAngle()
	{
		return this.HatchLineAngle;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcFillAreaStyleHatching ifcFillAreaStyleHatching = new IfcFillAreaStyleHatching();
		if(this.HatchLineAppearance != null)
			ifcFillAreaStyleHatching.setHatchLineAppearance((IfcCurveStyle)this.HatchLineAppearance.clone());
		if(this.StartOfNextHatchLine != null)
			ifcFillAreaStyleHatching.setStartOfNextHatchLine((IfcHatchLineDistanceSelect)this.StartOfNextHatchLine.clone());
		if(this.PointOfReferenceHatchLine != null)
			ifcFillAreaStyleHatching.setPointOfReferenceHatchLine((IfcCartesianPoint)this.PointOfReferenceHatchLine.clone());
		if(this.PatternStart != null)
			ifcFillAreaStyleHatching.setPatternStart((IfcCartesianPoint)this.PatternStart.clone());
		if(this.HatchLineAngle != null)
			ifcFillAreaStyleHatching.setHatchLineAngle((IfcPlaneAngleMeasure)this.HatchLineAngle.clone());
		return ifcFillAreaStyleHatching;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcFillAreaStyleHatching ifcFillAreaStyleHatching = new IfcFillAreaStyleHatching();
		if(this.HatchLineAppearance != null)
			ifcFillAreaStyleHatching.setHatchLineAppearance(this.HatchLineAppearance);
		if(this.StartOfNextHatchLine != null)
			ifcFillAreaStyleHatching.setStartOfNextHatchLine(this.StartOfNextHatchLine);
		if(this.PointOfReferenceHatchLine != null)
			ifcFillAreaStyleHatching.setPointOfReferenceHatchLine(this.PointOfReferenceHatchLine);
		if(this.PatternStart != null)
			ifcFillAreaStyleHatching.setPatternStart(this.PatternStart);
		if(this.HatchLineAngle != null)
			ifcFillAreaStyleHatching.setHatchLineAngle(this.HatchLineAngle);
		return ifcFillAreaStyleHatching;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
