/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcTextStyleTextModel<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcTextStyleTextModel extends InternalAccessClass implements IfcTextStyleSelect, ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcSizeSelect","IfcTextAlignment","IfcTextDecoration","IfcSizeSelect","IfcSizeSelect","IfcTextTransformation","IfcSizeSelect"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** TextIndent is an OPTIONAL attribute**/
	protected IfcSizeSelect TextIndent;
	/** TextAlign is an OPTIONAL attribute**/
	protected IfcTextAlignment TextAlign;
	/** TextDecoration is an OPTIONAL attribute**/
	protected IfcTextDecoration TextDecoration;
	/** LetterSpacing is an OPTIONAL attribute**/
	protected IfcSizeSelect LetterSpacing;
	/** WordSpacing is an OPTIONAL attribute**/
	protected IfcSizeSelect WordSpacing;
	/** TextTransform is an OPTIONAL attribute**/
	protected IfcTextTransformation TextTransform;
	/** LineHeight is an OPTIONAL attribute**/
	protected IfcSizeSelect LineHeight;
	/**
	* The default constructor.
	**/
	public IfcTextStyleTextModel(){}

	private static final String[] attributes = new String[]{"TextIndent","TextAlign","TextDecoration","LetterSpacing","WordSpacing","TextTransform","LineHeight"};

	public String[] getAttributes(){
		return IfcTextStyleTextModel.attributes;
	}

	/**
	* Constructs a new IfcTextStyleTextModel object using the given parameters.
	*
	* @param TextIndent OPTIONAL parameter of type IfcSizeSelect
	* @param TextAlign OPTIONAL parameter of type IfcTextAlignment
	* @param TextDecoration OPTIONAL parameter of type IfcTextDecoration
	* @param LetterSpacing OPTIONAL parameter of type IfcSizeSelect
	* @param WordSpacing OPTIONAL parameter of type IfcSizeSelect
	* @param TextTransform OPTIONAL parameter of type IfcTextTransformation
	* @param LineHeight OPTIONAL parameter of type IfcSizeSelect
	**/
	public IfcTextStyleTextModel(IfcSizeSelect TextIndent, IfcTextAlignment TextAlign, IfcTextDecoration TextDecoration, IfcSizeSelect LetterSpacing, IfcSizeSelect WordSpacing, IfcTextTransformation TextTransform, IfcSizeSelect LineHeight)
	{
		this.TextIndent = TextIndent;
		this.TextAlign = TextAlign;
		this.TextDecoration = TextDecoration;
		this.LetterSpacing = LetterSpacing;
		this.WordSpacing = WordSpacing;
		this.TextTransform = TextTransform;
		this.LineHeight = LineHeight;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcTextStyleTextModel object using the given parameters.
	*
	* @param TextIndent OPTIONAL parameter of type IfcSizeSelect
	* @param TextAlign OPTIONAL parameter of type IfcTextAlignment
	* @param TextDecoration OPTIONAL parameter of type IfcTextDecoration
	* @param LetterSpacing OPTIONAL parameter of type IfcSizeSelect
	* @param WordSpacing OPTIONAL parameter of type IfcSizeSelect
	* @param TextTransform OPTIONAL parameter of type IfcTextTransformation
	* @param LineHeight OPTIONAL parameter of type IfcSizeSelect
	**/
	public void setParameters(IfcSizeSelect TextIndent, IfcTextAlignment TextAlign, IfcTextDecoration TextDecoration, IfcSizeSelect LetterSpacing, IfcSizeSelect WordSpacing, IfcTextTransformation TextTransform, IfcSizeSelect LineHeight)
	{
		this.TextIndent = TextIndent;
		this.TextAlign = TextAlign;
		this.TextDecoration = TextDecoration;
		this.LetterSpacing = LetterSpacing;
		this.WordSpacing = WordSpacing;
		this.TextTransform = TextTransform;
		this.LineHeight = LineHeight;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.TextIndent = (IfcSizeSelect) parameters.get(0);
		this.TextAlign = (IfcTextAlignment) parameters.get(1);
		this.TextDecoration = (IfcTextDecoration) parameters.get(2);
		this.LetterSpacing = (IfcSizeSelect) parameters.get(3);
		this.WordSpacing = (IfcSizeSelect) parameters.get(4);
		this.TextTransform = (IfcTextTransformation) parameters.get(5);
		this.LineHeight = (IfcSizeSelect) parameters.get(6);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcTextStyleTextModel.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCTEXTSTYLETEXTMODEL(");
		if(getRedefinedDerivedAttributeTypes().contains("TextIndent")) stepString = stepString.concat("*,");
		else{
		if(this.TextIndent != null)		stepString = stepString.concat(((RootInterface)this.TextIndent).getStepParameter(IfcSizeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TextAlign")) stepString = stepString.concat("*,");
		else{
		if(this.TextAlign != null)		stepString = stepString.concat(((RootInterface)this.TextAlign).getStepParameter(IfcTextAlignment.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TextDecoration")) stepString = stepString.concat("*,");
		else{
		if(this.TextDecoration != null)		stepString = stepString.concat(((RootInterface)this.TextDecoration).getStepParameter(IfcTextDecoration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LetterSpacing")) stepString = stepString.concat("*,");
		else{
		if(this.LetterSpacing != null)		stepString = stepString.concat(((RootInterface)this.LetterSpacing).getStepParameter(IfcSizeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WordSpacing")) stepString = stepString.concat("*,");
		else{
		if(this.WordSpacing != null)		stepString = stepString.concat(((RootInterface)this.WordSpacing).getStepParameter(IfcSizeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TextTransform")) stepString = stepString.concat("*,");
		else{
		if(this.TextTransform != null)		stepString = stepString.concat(((RootInterface)this.TextTransform).getStepParameter(IfcTextTransformation.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LineHeight")) stepString = stepString.concat("*);");
		else{
		if(this.LineHeight != null)		stepString = stepString.concat(((RootInterface)this.LineHeight).getStepParameter(IfcSizeSelect.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the TextIndent attribute to the given value.
	*
	* @param TextIndent DEMANDED value to set - may not be null
	**/
	public void setTextIndent(IfcSizeSelect TextIndent)
	{
		this.TextIndent = TextIndent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TextIndent attribute.
	*
	* @return the value of TextIndent
	/**/
	public IfcSizeSelect getTextIndent()
	{
		return this.TextIndent;
	}

	/**
	* This method sets the TextAlign attribute to the given value.
	*
	* @param TextAlign DEMANDED value to set - may not be null
	**/
	public void setTextAlign(IfcTextAlignment TextAlign)
	{
		this.TextAlign = TextAlign;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TextAlign attribute.
	*
	* @return the value of TextAlign
	/**/
	public IfcTextAlignment getTextAlign()
	{
		return this.TextAlign;
	}

	/**
	* This method sets the TextDecoration attribute to the given value.
	*
	* @param TextDecoration DEMANDED value to set - may not be null
	**/
	public void setTextDecoration(IfcTextDecoration TextDecoration)
	{
		this.TextDecoration = TextDecoration;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TextDecoration attribute.
	*
	* @return the value of TextDecoration
	/**/
	public IfcTextDecoration getTextDecoration()
	{
		return this.TextDecoration;
	}

	/**
	* This method sets the LetterSpacing attribute to the given value.
	*
	* @param LetterSpacing DEMANDED value to set - may not be null
	**/
	public void setLetterSpacing(IfcSizeSelect LetterSpacing)
	{
		this.LetterSpacing = LetterSpacing;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LetterSpacing attribute.
	*
	* @return the value of LetterSpacing
	/**/
	public IfcSizeSelect getLetterSpacing()
	{
		return this.LetterSpacing;
	}

	/**
	* This method sets the WordSpacing attribute to the given value.
	*
	* @param WordSpacing DEMANDED value to set - may not be null
	**/
	public void setWordSpacing(IfcSizeSelect WordSpacing)
	{
		this.WordSpacing = WordSpacing;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the WordSpacing attribute.
	*
	* @return the value of WordSpacing
	/**/
	public IfcSizeSelect getWordSpacing()
	{
		return this.WordSpacing;
	}

	/**
	* This method sets the TextTransform attribute to the given value.
	*
	* @param TextTransform DEMANDED value to set - may not be null
	**/
	public void setTextTransform(IfcTextTransformation TextTransform)
	{
		this.TextTransform = TextTransform;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TextTransform attribute.
	*
	* @return the value of TextTransform
	/**/
	public IfcTextTransformation getTextTransform()
	{
		return this.TextTransform;
	}

	/**
	* This method sets the LineHeight attribute to the given value.
	*
	* @param LineHeight DEMANDED value to set - may not be null
	**/
	public void setLineHeight(IfcSizeSelect LineHeight)
	{
		this.LineHeight = LineHeight;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LineHeight attribute.
	*
	* @return the value of LineHeight
	/**/
	public IfcSizeSelect getLineHeight()
	{
		return this.LineHeight;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcTextStyleTextModel ifcTextStyleTextModel = new IfcTextStyleTextModel();
		if(this.TextIndent != null)
			ifcTextStyleTextModel.setTextIndent((IfcSizeSelect)this.TextIndent.clone());
		if(this.TextAlign != null)
			ifcTextStyleTextModel.setTextAlign((IfcTextAlignment)this.TextAlign.clone());
		if(this.TextDecoration != null)
			ifcTextStyleTextModel.setTextDecoration((IfcTextDecoration)this.TextDecoration.clone());
		if(this.LetterSpacing != null)
			ifcTextStyleTextModel.setLetterSpacing((IfcSizeSelect)this.LetterSpacing.clone());
		if(this.WordSpacing != null)
			ifcTextStyleTextModel.setWordSpacing((IfcSizeSelect)this.WordSpacing.clone());
		if(this.TextTransform != null)
			ifcTextStyleTextModel.setTextTransform((IfcTextTransformation)this.TextTransform.clone());
		if(this.LineHeight != null)
			ifcTextStyleTextModel.setLineHeight((IfcSizeSelect)this.LineHeight.clone());
		return ifcTextStyleTextModel;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcTextStyleTextModel ifcTextStyleTextModel = new IfcTextStyleTextModel();
		if(this.TextIndent != null)
			ifcTextStyleTextModel.setTextIndent(this.TextIndent);
		if(this.TextAlign != null)
			ifcTextStyleTextModel.setTextAlign(this.TextAlign);
		if(this.TextDecoration != null)
			ifcTextStyleTextModel.setTextDecoration(this.TextDecoration);
		if(this.LetterSpacing != null)
			ifcTextStyleTextModel.setLetterSpacing(this.LetterSpacing);
		if(this.WordSpacing != null)
			ifcTextStyleTextModel.setWordSpacing(this.WordSpacing);
		if(this.TextTransform != null)
			ifcTextStyleTextModel.setTextTransform(this.TextTransform);
		if(this.LineHeight != null)
			ifcTextStyleTextModel.setLineHeight(this.LineHeight);
		return ifcTextStyleTextModel;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
