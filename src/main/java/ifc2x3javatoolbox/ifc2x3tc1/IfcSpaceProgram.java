/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcSpaceProgram<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcSpaceProgram extends IfcControl implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcLabel","IfcIdentifier","IfcAreaMeasure","IfcAreaMeasure","IfcSpatialStructureElement","IfcAreaMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** SpaceProgramIdentifier is an DEMANDED attribute - may not be null**/
	protected IfcIdentifier SpaceProgramIdentifier;
	/** MaxRequiredArea is an OPTIONAL attribute**/
	protected IfcAreaMeasure MaxRequiredArea;
	/** MinRequiredArea is an OPTIONAL attribute**/
	protected IfcAreaMeasure MinRequiredArea;
	/** RequestedLocation is an OPTIONAL attribute**/
	protected IfcSpatialStructureElement RequestedLocation;
	/** StandardRequiredArea is an DEMANDED attribute - may not be null**/
	protected IfcAreaMeasure StandardRequiredArea;
	protected SET<IfcRelInteractionRequirements> HasInteractionReqsFrom_Inverse;
	protected SET<IfcRelInteractionRequirements> HasInteractionReqsTo_Inverse;
	/**
	* The default constructor.
	**/
	public IfcSpaceProgram(){}

	private static final String[] attributes = new String[]{"GlobalId","OwnerHistory","Name","Description",
			"ObjectType","SpaceProgramIdentifier","MaxRequiredArea","MinRequiredArea","RequestedLocation","StandardRequiredArea"};

	public String[] getAttributes(){
		return IfcSpaceProgram.attributes;
	}

	/**
	* Constructs a new IfcSpaceProgram object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param SpaceProgramIdentifier DEMANDED parameter of type IfcIdentifier - may not be null.
	* @param MaxRequiredArea OPTIONAL parameter of type IfcAreaMeasure
	* @param MinRequiredArea OPTIONAL parameter of type IfcAreaMeasure
	* @param RequestedLocation OPTIONAL parameter of type IfcSpatialStructureElement
	* @param StandardRequiredArea DEMANDED parameter of type IfcAreaMeasure - may not be null.
	**/
	public IfcSpaceProgram(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier SpaceProgramIdentifier, IfcAreaMeasure MaxRequiredArea, IfcAreaMeasure MinRequiredArea, IfcSpatialStructureElement RequestedLocation, IfcAreaMeasure StandardRequiredArea)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.SpaceProgramIdentifier = SpaceProgramIdentifier;
		this.MaxRequiredArea = MaxRequiredArea;
		this.MinRequiredArea = MinRequiredArea;
		this.RequestedLocation = RequestedLocation;
		this.StandardRequiredArea = StandardRequiredArea;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcSpaceProgram object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param SpaceProgramIdentifier DEMANDED parameter of type IfcIdentifier - may not be null.
	* @param MaxRequiredArea OPTIONAL parameter of type IfcAreaMeasure
	* @param MinRequiredArea OPTIONAL parameter of type IfcAreaMeasure
	* @param RequestedLocation OPTIONAL parameter of type IfcSpatialStructureElement
	* @param StandardRequiredArea DEMANDED parameter of type IfcAreaMeasure - may not be null.
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier SpaceProgramIdentifier, IfcAreaMeasure MaxRequiredArea, IfcAreaMeasure MinRequiredArea, IfcSpatialStructureElement RequestedLocation, IfcAreaMeasure StandardRequiredArea)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.SpaceProgramIdentifier = SpaceProgramIdentifier;
		this.MaxRequiredArea = MaxRequiredArea;
		this.MinRequiredArea = MinRequiredArea;
		this.RequestedLocation = RequestedLocation;
		this.StandardRequiredArea = StandardRequiredArea;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.ObjectType = (IfcLabel) parameters.get(4);
		this.SpaceProgramIdentifier = (IfcIdentifier) parameters.get(5);
		this.MaxRequiredArea = (IfcAreaMeasure) parameters.get(6);
		this.MinRequiredArea = (IfcAreaMeasure) parameters.get(7);
		this.RequestedLocation = (IfcSpatialStructureElement) parameters.get(8);
		this.StandardRequiredArea = (IfcAreaMeasure) parameters.get(9);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
		HasInteractionReqsFrom_Inverse = null;
		HasInteractionReqsTo_Inverse = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcSpaceProgram.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSPACEPROGRAM(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectType")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectType != null)		stepString = stepString.concat(((RootInterface)this.ObjectType).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("SpaceProgramIdentifier")) stepString = stepString.concat("*,");
		else{
		if(this.SpaceProgramIdentifier != null)		stepString = stepString.concat(((RootInterface)this.SpaceProgramIdentifier).getStepParameter(IfcIdentifier.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MaxRequiredArea")) stepString = stepString.concat("*,");
		else{
		if(this.MaxRequiredArea != null)		stepString = stepString.concat(((RootInterface)this.MaxRequiredArea).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MinRequiredArea")) stepString = stepString.concat("*,");
		else{
		if(this.MinRequiredArea != null)		stepString = stepString.concat(((RootInterface)this.MinRequiredArea).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RequestedLocation")) stepString = stepString.concat("*,");
		else{
		if(this.RequestedLocation != null)		stepString = stepString.concat(((RootInterface)this.RequestedLocation).getStepParameter(IfcSpatialStructureElement.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("StandardRequiredArea")) stepString = stepString.concat("*);");
		else{
		if(this.StandardRequiredArea != null)		stepString = stepString.concat(((RootInterface)this.StandardRequiredArea).getStepParameter(IfcAreaMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method returns a copy of the set of the HasInteractionReqsFrom_Inverse attribute.
	*
	* @return a copy of the HasInteractionReqsFrom_Inverse set
	**/
	public SET<IfcRelInteractionRequirements> getHasInteractionReqsFrom_Inverse()
	{
		if(this.HasInteractionReqsFrom_Inverse != null)
			return new SET<IfcRelInteractionRequirements>(this.HasInteractionReqsFrom_Inverse);
		return null;
	}

	/**
	* This method returns a copy of the set of the HasInteractionReqsTo_Inverse attribute.
	*
	* @return a copy of the HasInteractionReqsTo_Inverse set
	**/
	public SET<IfcRelInteractionRequirements> getHasInteractionReqsTo_Inverse()
	{
		if(this.HasInteractionReqsTo_Inverse != null)
			return new SET<IfcRelInteractionRequirements>(this.HasInteractionReqsTo_Inverse);
		return null;
	}

	/**
	* This method sets the SpaceProgramIdentifier attribute to the given value.
	*
	* @param SpaceProgramIdentifier OPTIONAL value to set
	**/
	public void setSpaceProgramIdentifier(IfcIdentifier SpaceProgramIdentifier)
	{
		this.SpaceProgramIdentifier = SpaceProgramIdentifier;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the SpaceProgramIdentifier attribute.
	*
	* @return the value of SpaceProgramIdentifier
	/**/
	public IfcIdentifier getSpaceProgramIdentifier()
	{
		return this.SpaceProgramIdentifier;
	}

	/**
	* This method sets the MaxRequiredArea attribute to the given value.
	*
	* @param MaxRequiredArea DEMANDED value to set - may not be null
	**/
	public void setMaxRequiredArea(IfcAreaMeasure MaxRequiredArea)
	{
		this.MaxRequiredArea = MaxRequiredArea;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MaxRequiredArea attribute.
	*
	* @return the value of MaxRequiredArea
	/**/
	public IfcAreaMeasure getMaxRequiredArea()
	{
		return this.MaxRequiredArea;
	}

	/**
	* This method sets the MinRequiredArea attribute to the given value.
	*
	* @param MinRequiredArea DEMANDED value to set - may not be null
	**/
	public void setMinRequiredArea(IfcAreaMeasure MinRequiredArea)
	{
		this.MinRequiredArea = MinRequiredArea;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MinRequiredArea attribute.
	*
	* @return the value of MinRequiredArea
	/**/
	public IfcAreaMeasure getMinRequiredArea()
	{
		return this.MinRequiredArea;
	}

	/**
	* This method sets the RequestedLocation attribute to the given value.
	*
	* @param RequestedLocation DEMANDED value to set - may not be null
	**/
	public void setRequestedLocation(IfcSpatialStructureElement RequestedLocation)
	{
		this.RequestedLocation = RequestedLocation;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RequestedLocation attribute.
	*
	* @return the value of RequestedLocation
	/**/
	public IfcSpatialStructureElement getRequestedLocation()
	{
		return this.RequestedLocation;
	}

	/**
	* This method sets the StandardRequiredArea attribute to the given value.
	*
	* @param StandardRequiredArea OPTIONAL value to set
	**/
	public void setStandardRequiredArea(IfcAreaMeasure StandardRequiredArea)
	{
		this.StandardRequiredArea = StandardRequiredArea;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the StandardRequiredArea attribute.
	*
	* @return the value of StandardRequiredArea
	/**/
	public IfcAreaMeasure getStandardRequiredArea()
	{
		return this.StandardRequiredArea;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcSpaceProgram ifcSpaceProgram = new IfcSpaceProgram();
		if(this.GlobalId != null)
			ifcSpaceProgram.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcSpaceProgram.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcSpaceProgram.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcSpaceProgram.setDescription((IfcText)this.Description.clone());
		if(this.ObjectType != null)
			ifcSpaceProgram.setObjectType((IfcLabel)this.ObjectType.clone());
		if(this.SpaceProgramIdentifier != null)
			ifcSpaceProgram.setSpaceProgramIdentifier((IfcIdentifier)this.SpaceProgramIdentifier.clone());
		if(this.MaxRequiredArea != null)
			ifcSpaceProgram.setMaxRequiredArea((IfcAreaMeasure)this.MaxRequiredArea.clone());
		if(this.MinRequiredArea != null)
			ifcSpaceProgram.setMinRequiredArea((IfcAreaMeasure)this.MinRequiredArea.clone());
		if(this.RequestedLocation != null)
			ifcSpaceProgram.setRequestedLocation((IfcSpatialStructureElement)this.RequestedLocation.clone());
		if(this.StandardRequiredArea != null)
			ifcSpaceProgram.setStandardRequiredArea((IfcAreaMeasure)this.StandardRequiredArea.clone());
		return ifcSpaceProgram;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcSpaceProgram ifcSpaceProgram = new IfcSpaceProgram();
		if(this.GlobalId != null)
			ifcSpaceProgram.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcSpaceProgram.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcSpaceProgram.setName(this.Name);
		if(this.Description != null)
			ifcSpaceProgram.setDescription(this.Description);
		if(this.ObjectType != null)
			ifcSpaceProgram.setObjectType(this.ObjectType);
		if(this.SpaceProgramIdentifier != null)
			ifcSpaceProgram.setSpaceProgramIdentifier(this.SpaceProgramIdentifier);
		if(this.MaxRequiredArea != null)
			ifcSpaceProgram.setMaxRequiredArea(this.MaxRequiredArea);
		if(this.MinRequiredArea != null)
			ifcSpaceProgram.setMinRequiredArea(this.MinRequiredArea);
		if(this.RequestedLocation != null)
			ifcSpaceProgram.setRequestedLocation(this.RequestedLocation);
		if(this.StandardRequiredArea != null)
			ifcSpaceProgram.setStandardRequiredArea(this.StandardRequiredArea);
		return ifcSpaceProgram;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
