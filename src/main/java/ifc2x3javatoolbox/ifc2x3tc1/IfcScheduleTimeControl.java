/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcScheduleTimeControl<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcScheduleTimeControl extends IfcControl implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcLabel","IfcDateTimeSelect","IfcDateTimeSelect","IfcDateTimeSelect","IfcDateTimeSelect","IfcDateTimeSelect","IfcDateTimeSelect","IfcDateTimeSelect","IfcDateTimeSelect","IfcTimeMeasure","IfcTimeMeasure","IfcTimeMeasure","IfcTimeMeasure","IfcTimeMeasure","BOOLEAN","IfcDateTimeSelect","IfcTimeMeasure","IfcTimeMeasure","IfcPositiveRatioMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** ActualStart is an OPTIONAL attribute**/
	protected IfcDateTimeSelect ActualStart;
	/** EarlyStart is an OPTIONAL attribute**/
	protected IfcDateTimeSelect EarlyStart;
	/** LateStart is an OPTIONAL attribute**/
	protected IfcDateTimeSelect LateStart;
	/** ScheduleStart is an OPTIONAL attribute**/
	protected IfcDateTimeSelect ScheduleStart;
	/** ActualFinish is an OPTIONAL attribute**/
	protected IfcDateTimeSelect ActualFinish;
	/** EarlyFinish is an OPTIONAL attribute**/
	protected IfcDateTimeSelect EarlyFinish;
	/** LateFinish is an OPTIONAL attribute**/
	protected IfcDateTimeSelect LateFinish;
	/** ScheduleFinish is an OPTIONAL attribute**/
	protected IfcDateTimeSelect ScheduleFinish;
	/** ScheduleDuration is an OPTIONAL attribute**/
	protected IfcTimeMeasure ScheduleDuration;
	/** ActualDuration is an OPTIONAL attribute**/
	protected IfcTimeMeasure ActualDuration;
	/** RemainingTime is an OPTIONAL attribute**/
	protected IfcTimeMeasure RemainingTime;
	/** FreeFloat is an OPTIONAL attribute**/
	protected IfcTimeMeasure FreeFloat;
	/** TotalFloat is an OPTIONAL attribute**/
	protected IfcTimeMeasure TotalFloat;
	/** IsCritical is an OPTIONAL attribute**/
	protected BOOLEAN IsCritical;
	/** StatusTime is an OPTIONAL attribute**/
	protected IfcDateTimeSelect StatusTime;
	/** StartFloat is an OPTIONAL attribute**/
	protected IfcTimeMeasure StartFloat;
	/** FinishFloat is an OPTIONAL attribute**/
	protected IfcTimeMeasure FinishFloat;
	/** Completion is an OPTIONAL attribute**/
	protected IfcPositiveRatioMeasure Completion;
	protected IfcRelAssignsTasks ScheduleTimeControlAssigned_Inverse;
	/**
	* The default constructor.
	**/
	public IfcScheduleTimeControl(){}

	private static final String[] attributes = new String[]{"GlobalId","OwnerHistory","Name"
			,"Description","ObjectType","ActualStart"
			,"EarlyStart","LateStart","ScheduleStart"
			,"ActualFinish","EarlyFinish","LateFinish"
			,"ScheduleFinish","ScheduleDuration","ActualDuration"
			,"RemainingTime","FreeFloat","TotalFloat"
			,"IsCritical","StatusTime","StartFloat","FinishFloat","Completion"};

	public String[] getAttributes(){
		return IfcScheduleTimeControl.attributes;
	}


	/**
	* Constructs a new IfcScheduleTimeControl object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param ActualStart OPTIONAL parameter of type IfcDateTimeSelect
	* @param EarlyStart OPTIONAL parameter of type IfcDateTimeSelect
	* @param LateStart OPTIONAL parameter of type IfcDateTimeSelect
	* @param ScheduleStart OPTIONAL parameter of type IfcDateTimeSelect
	* @param ActualFinish OPTIONAL parameter of type IfcDateTimeSelect
	* @param EarlyFinish OPTIONAL parameter of type IfcDateTimeSelect
	* @param LateFinish OPTIONAL parameter of type IfcDateTimeSelect
	* @param ScheduleFinish OPTIONAL parameter of type IfcDateTimeSelect
	* @param ScheduleDuration OPTIONAL parameter of type IfcTimeMeasure
	* @param ActualDuration OPTIONAL parameter of type IfcTimeMeasure
	* @param RemainingTime OPTIONAL parameter of type IfcTimeMeasure
	* @param FreeFloat OPTIONAL parameter of type IfcTimeMeasure
	* @param TotalFloat OPTIONAL parameter of type IfcTimeMeasure
	* @param IsCritical OPTIONAL parameter of type BOOLEAN
	* @param StatusTime OPTIONAL parameter of type IfcDateTimeSelect
	* @param StartFloat OPTIONAL parameter of type IfcTimeMeasure
	* @param FinishFloat OPTIONAL parameter of type IfcTimeMeasure
	* @param Completion OPTIONAL parameter of type IfcPositiveRatioMeasure
	**/
	public IfcScheduleTimeControl(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcDateTimeSelect ActualStart, IfcDateTimeSelect EarlyStart, IfcDateTimeSelect LateStart, IfcDateTimeSelect ScheduleStart, IfcDateTimeSelect ActualFinish, IfcDateTimeSelect EarlyFinish, IfcDateTimeSelect LateFinish, IfcDateTimeSelect ScheduleFinish, IfcTimeMeasure ScheduleDuration, IfcTimeMeasure ActualDuration, IfcTimeMeasure RemainingTime, IfcTimeMeasure FreeFloat, IfcTimeMeasure TotalFloat, BOOLEAN IsCritical, IfcDateTimeSelect StatusTime, IfcTimeMeasure StartFloat, IfcTimeMeasure FinishFloat, IfcPositiveRatioMeasure Completion)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ActualStart = ActualStart;
		this.EarlyStart = EarlyStart;
		this.LateStart = LateStart;
		this.ScheduleStart = ScheduleStart;
		this.ActualFinish = ActualFinish;
		this.EarlyFinish = EarlyFinish;
		this.LateFinish = LateFinish;
		this.ScheduleFinish = ScheduleFinish;
		this.ScheduleDuration = ScheduleDuration;
		this.ActualDuration = ActualDuration;
		this.RemainingTime = RemainingTime;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.StartFloat = StartFloat;
		this.FinishFloat = FinishFloat;
		this.Completion = Completion;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcScheduleTimeControl object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param ActualStart OPTIONAL parameter of type IfcDateTimeSelect
	* @param EarlyStart OPTIONAL parameter of type IfcDateTimeSelect
	* @param LateStart OPTIONAL parameter of type IfcDateTimeSelect
	* @param ScheduleStart OPTIONAL parameter of type IfcDateTimeSelect
	* @param ActualFinish OPTIONAL parameter of type IfcDateTimeSelect
	* @param EarlyFinish OPTIONAL parameter of type IfcDateTimeSelect
	* @param LateFinish OPTIONAL parameter of type IfcDateTimeSelect
	* @param ScheduleFinish OPTIONAL parameter of type IfcDateTimeSelect
	* @param ScheduleDuration OPTIONAL parameter of type IfcTimeMeasure
	* @param ActualDuration OPTIONAL parameter of type IfcTimeMeasure
	* @param RemainingTime OPTIONAL parameter of type IfcTimeMeasure
	* @param FreeFloat OPTIONAL parameter of type IfcTimeMeasure
	* @param TotalFloat OPTIONAL parameter of type IfcTimeMeasure
	* @param IsCritical OPTIONAL parameter of type BOOLEAN
	* @param StatusTime OPTIONAL parameter of type IfcDateTimeSelect
	* @param StartFloat OPTIONAL parameter of type IfcTimeMeasure
	* @param FinishFloat OPTIONAL parameter of type IfcTimeMeasure
	* @param Completion OPTIONAL parameter of type IfcPositiveRatioMeasure
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcDateTimeSelect ActualStart, IfcDateTimeSelect EarlyStart, IfcDateTimeSelect LateStart, IfcDateTimeSelect ScheduleStart, IfcDateTimeSelect ActualFinish, IfcDateTimeSelect EarlyFinish, IfcDateTimeSelect LateFinish, IfcDateTimeSelect ScheduleFinish, IfcTimeMeasure ScheduleDuration, IfcTimeMeasure ActualDuration, IfcTimeMeasure RemainingTime, IfcTimeMeasure FreeFloat, IfcTimeMeasure TotalFloat, BOOLEAN IsCritical, IfcDateTimeSelect StatusTime, IfcTimeMeasure StartFloat, IfcTimeMeasure FinishFloat, IfcPositiveRatioMeasure Completion)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ActualStart = ActualStart;
		this.EarlyStart = EarlyStart;
		this.LateStart = LateStart;
		this.ScheduleStart = ScheduleStart;
		this.ActualFinish = ActualFinish;
		this.EarlyFinish = EarlyFinish;
		this.LateFinish = LateFinish;
		this.ScheduleFinish = ScheduleFinish;
		this.ScheduleDuration = ScheduleDuration;
		this.ActualDuration = ActualDuration;
		this.RemainingTime = RemainingTime;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.StartFloat = StartFloat;
		this.FinishFloat = FinishFloat;
		this.Completion = Completion;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.ObjectType = (IfcLabel) parameters.get(4);
		this.ActualStart = (IfcDateTimeSelect) parameters.get(5);
		this.EarlyStart = (IfcDateTimeSelect) parameters.get(6);
		this.LateStart = (IfcDateTimeSelect) parameters.get(7);
		this.ScheduleStart = (IfcDateTimeSelect) parameters.get(8);
		this.ActualFinish = (IfcDateTimeSelect) parameters.get(9);
		this.EarlyFinish = (IfcDateTimeSelect) parameters.get(10);
		this.LateFinish = (IfcDateTimeSelect) parameters.get(11);
		this.ScheduleFinish = (IfcDateTimeSelect) parameters.get(12);
		this.ScheduleDuration = (IfcTimeMeasure) parameters.get(13);
		this.ActualDuration = (IfcTimeMeasure) parameters.get(14);
		this.RemainingTime = (IfcTimeMeasure) parameters.get(15);
		this.FreeFloat = (IfcTimeMeasure) parameters.get(16);
		this.TotalFloat = (IfcTimeMeasure) parameters.get(17);
		this.IsCritical = (BOOLEAN) parameters.get(18);
		this.StatusTime = (IfcDateTimeSelect) parameters.get(19);
		this.StartFloat = (IfcTimeMeasure) parameters.get(20);
		this.FinishFloat = (IfcTimeMeasure) parameters.get(21);
		this.Completion = (IfcPositiveRatioMeasure) parameters.get(22);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
		ScheduleTimeControlAssigned_Inverse = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcScheduleTimeControl.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSCHEDULETIMECONTROL(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectType")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectType != null)		stepString = stepString.concat(((RootInterface)this.ObjectType).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ActualStart")) stepString = stepString.concat("*,");
		else{
		if(this.ActualStart != null)		stepString = stepString.concat(((RootInterface)this.ActualStart).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("EarlyStart")) stepString = stepString.concat("*,");
		else{
		if(this.EarlyStart != null)		stepString = stepString.concat(((RootInterface)this.EarlyStart).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LateStart")) stepString = stepString.concat("*,");
		else{
		if(this.LateStart != null)		stepString = stepString.concat(((RootInterface)this.LateStart).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ScheduleStart")) stepString = stepString.concat("*,");
		else{
		if(this.ScheduleStart != null)		stepString = stepString.concat(((RootInterface)this.ScheduleStart).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ActualFinish")) stepString = stepString.concat("*,");
		else{
		if(this.ActualFinish != null)		stepString = stepString.concat(((RootInterface)this.ActualFinish).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("EarlyFinish")) stepString = stepString.concat("*,");
		else{
		if(this.EarlyFinish != null)		stepString = stepString.concat(((RootInterface)this.EarlyFinish).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LateFinish")) stepString = stepString.concat("*,");
		else{
		if(this.LateFinish != null)		stepString = stepString.concat(((RootInterface)this.LateFinish).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ScheduleFinish")) stepString = stepString.concat("*,");
		else{
		if(this.ScheduleFinish != null)		stepString = stepString.concat(((RootInterface)this.ScheduleFinish).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ScheduleDuration")) stepString = stepString.concat("*,");
		else{
		if(this.ScheduleDuration != null)		stepString = stepString.concat(((RootInterface)this.ScheduleDuration).getStepParameter(IfcTimeMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ActualDuration")) stepString = stepString.concat("*,");
		else{
		if(this.ActualDuration != null)		stepString = stepString.concat(((RootInterface)this.ActualDuration).getStepParameter(IfcTimeMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RemainingTime")) stepString = stepString.concat("*,");
		else{
		if(this.RemainingTime != null)		stepString = stepString.concat(((RootInterface)this.RemainingTime).getStepParameter(IfcTimeMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FreeFloat")) stepString = stepString.concat("*,");
		else{
		if(this.FreeFloat != null)		stepString = stepString.concat(((RootInterface)this.FreeFloat).getStepParameter(IfcTimeMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TotalFloat")) stepString = stepString.concat("*,");
		else{
		if(this.TotalFloat != null)		stepString = stepString.concat(((RootInterface)this.TotalFloat).getStepParameter(IfcTimeMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("IsCritical")) stepString = stepString.concat("*,");
		else{
		if(this.IsCritical != null)		stepString = stepString.concat(((RootInterface)this.IsCritical).getStepParameter(BOOLEAN.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("StatusTime")) stepString = stepString.concat("*,");
		else{
		if(this.StatusTime != null)		stepString = stepString.concat(((RootInterface)this.StatusTime).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("StartFloat")) stepString = stepString.concat("*,");
		else{
		if(this.StartFloat != null)		stepString = stepString.concat(((RootInterface)this.StartFloat).getStepParameter(IfcTimeMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FinishFloat")) stepString = stepString.concat("*,");
		else{
		if(this.FinishFloat != null)		stepString = stepString.concat(((RootInterface)this.FinishFloat).getStepParameter(IfcTimeMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Completion")) stepString = stepString.concat("*);");
		else{
		if(this.Completion != null)		stepString = stepString.concat(((RootInterface)this.Completion).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method returns the value of the ScheduleTimeControlAssigned_Inverse attribute.
	*
	* @return the value of ScheduleTimeControlAssigned_Inverse
	/**/
	public IfcRelAssignsTasks getScheduleTimeControlAssigned_Inverse()
	{
		return this.ScheduleTimeControlAssigned_Inverse;
	}

	/**
	* This method sets the ActualStart attribute to the given value.
	*
	* @param ActualStart DEMANDED value to set - may not be null
	**/
	public void setActualStart(IfcDateTimeSelect ActualStart)
	{
		this.ActualStart = ActualStart;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ActualStart attribute.
	*
	* @return the value of ActualStart
	/**/
	public IfcDateTimeSelect getActualStart()
	{
		return this.ActualStart;
	}

	/**
	* This method sets the EarlyStart attribute to the given value.
	*
	* @param EarlyStart DEMANDED value to set - may not be null
	**/
	public void setEarlyStart(IfcDateTimeSelect EarlyStart)
	{
		this.EarlyStart = EarlyStart;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the EarlyStart attribute.
	*
	* @return the value of EarlyStart
	/**/
	public IfcDateTimeSelect getEarlyStart()
	{
		return this.EarlyStart;
	}

	/**
	* This method sets the LateStart attribute to the given value.
	*
	* @param LateStart DEMANDED value to set - may not be null
	**/
	public void setLateStart(IfcDateTimeSelect LateStart)
	{
		this.LateStart = LateStart;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LateStart attribute.
	*
	* @return the value of LateStart
	/**/
	public IfcDateTimeSelect getLateStart()
	{
		return this.LateStart;
	}

	/**
	* This method sets the ScheduleStart attribute to the given value.
	*
	* @param ScheduleStart DEMANDED value to set - may not be null
	**/
	public void setScheduleStart(IfcDateTimeSelect ScheduleStart)
	{
		this.ScheduleStart = ScheduleStart;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ScheduleStart attribute.
	*
	* @return the value of ScheduleStart
	/**/
	public IfcDateTimeSelect getScheduleStart()
	{
		return this.ScheduleStart;
	}

	/**
	* This method sets the ActualFinish attribute to the given value.
	*
	* @param ActualFinish DEMANDED value to set - may not be null
	**/
	public void setActualFinish(IfcDateTimeSelect ActualFinish)
	{
		this.ActualFinish = ActualFinish;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ActualFinish attribute.
	*
	* @return the value of ActualFinish
	/**/
	public IfcDateTimeSelect getActualFinish()
	{
		return this.ActualFinish;
	}

	/**
	* This method sets the EarlyFinish attribute to the given value.
	*
	* @param EarlyFinish DEMANDED value to set - may not be null
	**/
	public void setEarlyFinish(IfcDateTimeSelect EarlyFinish)
	{
		this.EarlyFinish = EarlyFinish;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the EarlyFinish attribute.
	*
	* @return the value of EarlyFinish
	/**/
	public IfcDateTimeSelect getEarlyFinish()
	{
		return this.EarlyFinish;
	}

	/**
	* This method sets the LateFinish attribute to the given value.
	*
	* @param LateFinish DEMANDED value to set - may not be null
	**/
	public void setLateFinish(IfcDateTimeSelect LateFinish)
	{
		this.LateFinish = LateFinish;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LateFinish attribute.
	*
	* @return the value of LateFinish
	/**/
	public IfcDateTimeSelect getLateFinish()
	{
		return this.LateFinish;
	}

	/**
	* This method sets the ScheduleFinish attribute to the given value.
	*
	* @param ScheduleFinish DEMANDED value to set - may not be null
	**/
	public void setScheduleFinish(IfcDateTimeSelect ScheduleFinish)
	{
		this.ScheduleFinish = ScheduleFinish;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ScheduleFinish attribute.
	*
	* @return the value of ScheduleFinish
	/**/
	public IfcDateTimeSelect getScheduleFinish()
	{
		return this.ScheduleFinish;
	}

	/**
	* This method sets the ScheduleDuration attribute to the given value.
	*
	* @param ScheduleDuration DEMANDED value to set - may not be null
	**/
	public void setScheduleDuration(IfcTimeMeasure ScheduleDuration)
	{
		this.ScheduleDuration = ScheduleDuration;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ScheduleDuration attribute.
	*
	* @return the value of ScheduleDuration
	/**/
	public IfcTimeMeasure getScheduleDuration()
	{
		return this.ScheduleDuration;
	}

	/**
	* This method sets the ActualDuration attribute to the given value.
	*
	* @param ActualDuration DEMANDED value to set - may not be null
	**/
	public void setActualDuration(IfcTimeMeasure ActualDuration)
	{
		this.ActualDuration = ActualDuration;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ActualDuration attribute.
	*
	* @return the value of ActualDuration
	/**/
	public IfcTimeMeasure getActualDuration()
	{
		return this.ActualDuration;
	}

	/**
	* This method sets the RemainingTime attribute to the given value.
	*
	* @param RemainingTime DEMANDED value to set - may not be null
	**/
	public void setRemainingTime(IfcTimeMeasure RemainingTime)
	{
		this.RemainingTime = RemainingTime;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RemainingTime attribute.
	*
	* @return the value of RemainingTime
	/**/
	public IfcTimeMeasure getRemainingTime()
	{
		return this.RemainingTime;
	}

	/**
	* This method sets the FreeFloat attribute to the given value.
	*
	* @param FreeFloat DEMANDED value to set - may not be null
	**/
	public void setFreeFloat(IfcTimeMeasure FreeFloat)
	{
		this.FreeFloat = FreeFloat;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the FreeFloat attribute.
	*
	* @return the value of FreeFloat
	/**/
	public IfcTimeMeasure getFreeFloat()
	{
		return this.FreeFloat;
	}

	/**
	* This method sets the TotalFloat attribute to the given value.
	*
	* @param TotalFloat DEMANDED value to set - may not be null
	**/
	public void setTotalFloat(IfcTimeMeasure TotalFloat)
	{
		this.TotalFloat = TotalFloat;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TotalFloat attribute.
	*
	* @return the value of TotalFloat
	/**/
	public IfcTimeMeasure getTotalFloat()
	{
		return this.TotalFloat;
	}

	/**
	* This method sets the IsCritical attribute to the given value.
	*
	* @param IsCritical DEMANDED value to set - may not be null
	**/
	public void setIsCritical(BOOLEAN IsCritical)
	{
		this.IsCritical = IsCritical;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the IsCritical attribute.
	*
	* @return the value of IsCritical
	/**/
	public BOOLEAN getIsCritical()
	{
		return this.IsCritical;
	}

	/**
	* This method sets the StatusTime attribute to the given value.
	*
	* @param StatusTime DEMANDED value to set - may not be null
	**/
	public void setStatusTime(IfcDateTimeSelect StatusTime)
	{
		this.StatusTime = StatusTime;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the StatusTime attribute.
	*
	* @return the value of StatusTime
	/**/
	public IfcDateTimeSelect getStatusTime()
	{
		return this.StatusTime;
	}

	/**
	* This method sets the StartFloat attribute to the given value.
	*
	* @param StartFloat DEMANDED value to set - may not be null
	**/
	public void setStartFloat(IfcTimeMeasure StartFloat)
	{
		this.StartFloat = StartFloat;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the StartFloat attribute.
	*
	* @return the value of StartFloat
	/**/
	public IfcTimeMeasure getStartFloat()
	{
		return this.StartFloat;
	}

	/**
	* This method sets the FinishFloat attribute to the given value.
	*
	* @param FinishFloat DEMANDED value to set - may not be null
	**/
	public void setFinishFloat(IfcTimeMeasure FinishFloat)
	{
		this.FinishFloat = FinishFloat;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the FinishFloat attribute.
	*
	* @return the value of FinishFloat
	/**/
	public IfcTimeMeasure getFinishFloat()
	{
		return this.FinishFloat;
	}

	/**
	* This method sets the Completion attribute to the given value.
	*
	* @param Completion DEMANDED value to set - may not be null
	**/
	public void setCompletion(IfcPositiveRatioMeasure Completion)
	{
		this.Completion = Completion;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Completion attribute.
	*
	* @return the value of Completion
	/**/
	public IfcPositiveRatioMeasure getCompletion()
	{
		return this.Completion;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcScheduleTimeControl ifcScheduleTimeControl = new IfcScheduleTimeControl();
		if(this.GlobalId != null)
			ifcScheduleTimeControl.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcScheduleTimeControl.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcScheduleTimeControl.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcScheduleTimeControl.setDescription((IfcText)this.Description.clone());
		if(this.ObjectType != null)
			ifcScheduleTimeControl.setObjectType((IfcLabel)this.ObjectType.clone());
		if(this.ActualStart != null)
			ifcScheduleTimeControl.setActualStart((IfcDateTimeSelect)this.ActualStart.clone());
		if(this.EarlyStart != null)
			ifcScheduleTimeControl.setEarlyStart((IfcDateTimeSelect)this.EarlyStart.clone());
		if(this.LateStart != null)
			ifcScheduleTimeControl.setLateStart((IfcDateTimeSelect)this.LateStart.clone());
		if(this.ScheduleStart != null)
			ifcScheduleTimeControl.setScheduleStart((IfcDateTimeSelect)this.ScheduleStart.clone());
		if(this.ActualFinish != null)
			ifcScheduleTimeControl.setActualFinish((IfcDateTimeSelect)this.ActualFinish.clone());
		if(this.EarlyFinish != null)
			ifcScheduleTimeControl.setEarlyFinish((IfcDateTimeSelect)this.EarlyFinish.clone());
		if(this.LateFinish != null)
			ifcScheduleTimeControl.setLateFinish((IfcDateTimeSelect)this.LateFinish.clone());
		if(this.ScheduleFinish != null)
			ifcScheduleTimeControl.setScheduleFinish((IfcDateTimeSelect)this.ScheduleFinish.clone());
		if(this.ScheduleDuration != null)
			ifcScheduleTimeControl.setScheduleDuration((IfcTimeMeasure)this.ScheduleDuration.clone());
		if(this.ActualDuration != null)
			ifcScheduleTimeControl.setActualDuration((IfcTimeMeasure)this.ActualDuration.clone());
		if(this.RemainingTime != null)
			ifcScheduleTimeControl.setRemainingTime((IfcTimeMeasure)this.RemainingTime.clone());
		if(this.FreeFloat != null)
			ifcScheduleTimeControl.setFreeFloat((IfcTimeMeasure)this.FreeFloat.clone());
		if(this.TotalFloat != null)
			ifcScheduleTimeControl.setTotalFloat((IfcTimeMeasure)this.TotalFloat.clone());
		if(this.IsCritical != null)
			ifcScheduleTimeControl.setIsCritical((BOOLEAN)this.IsCritical.clone());
		if(this.StatusTime != null)
			ifcScheduleTimeControl.setStatusTime((IfcDateTimeSelect)this.StatusTime.clone());
		if(this.StartFloat != null)
			ifcScheduleTimeControl.setStartFloat((IfcTimeMeasure)this.StartFloat.clone());
		if(this.FinishFloat != null)
			ifcScheduleTimeControl.setFinishFloat((IfcTimeMeasure)this.FinishFloat.clone());
		if(this.Completion != null)
			ifcScheduleTimeControl.setCompletion((IfcPositiveRatioMeasure)this.Completion.clone());
		return ifcScheduleTimeControl;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcScheduleTimeControl ifcScheduleTimeControl = new IfcScheduleTimeControl();
		if(this.GlobalId != null)
			ifcScheduleTimeControl.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcScheduleTimeControl.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcScheduleTimeControl.setName(this.Name);
		if(this.Description != null)
			ifcScheduleTimeControl.setDescription(this.Description);
		if(this.ObjectType != null)
			ifcScheduleTimeControl.setObjectType(this.ObjectType);
		if(this.ActualStart != null)
			ifcScheduleTimeControl.setActualStart(this.ActualStart);
		if(this.EarlyStart != null)
			ifcScheduleTimeControl.setEarlyStart(this.EarlyStart);
		if(this.LateStart != null)
			ifcScheduleTimeControl.setLateStart(this.LateStart);
		if(this.ScheduleStart != null)
			ifcScheduleTimeControl.setScheduleStart(this.ScheduleStart);
		if(this.ActualFinish != null)
			ifcScheduleTimeControl.setActualFinish(this.ActualFinish);
		if(this.EarlyFinish != null)
			ifcScheduleTimeControl.setEarlyFinish(this.EarlyFinish);
		if(this.LateFinish != null)
			ifcScheduleTimeControl.setLateFinish(this.LateFinish);
		if(this.ScheduleFinish != null)
			ifcScheduleTimeControl.setScheduleFinish(this.ScheduleFinish);
		if(this.ScheduleDuration != null)
			ifcScheduleTimeControl.setScheduleDuration(this.ScheduleDuration);
		if(this.ActualDuration != null)
			ifcScheduleTimeControl.setActualDuration(this.ActualDuration);
		if(this.RemainingTime != null)
			ifcScheduleTimeControl.setRemainingTime(this.RemainingTime);
		if(this.FreeFloat != null)
			ifcScheduleTimeControl.setFreeFloat(this.FreeFloat);
		if(this.TotalFloat != null)
			ifcScheduleTimeControl.setTotalFloat(this.TotalFloat);
		if(this.IsCritical != null)
			ifcScheduleTimeControl.setIsCritical(this.IsCritical);
		if(this.StatusTime != null)
			ifcScheduleTimeControl.setStatusTime(this.StatusTime);
		if(this.StartFloat != null)
			ifcScheduleTimeControl.setStartFloat(this.StartFloat);
		if(this.FinishFloat != null)
			ifcScheduleTimeControl.setFinishFloat(this.FinishFloat);
		if(this.Completion != null)
			ifcScheduleTimeControl.setCompletion(this.Completion);
		return ifcScheduleTimeControl;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
