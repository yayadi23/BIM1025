/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcDoorLiningProperties<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcDoorLiningProperties extends IfcPropertySetDefinition implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcLengthMeasure","IfcLengthMeasure","IfcLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcShapeAspect"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** LiningDepth is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure LiningDepth;
	/** LiningThickness is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure LiningThickness;
	/** ThresholdDepth is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure ThresholdDepth;
	/** ThresholdThickness is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure ThresholdThickness;
	/** TransomThickness is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure TransomThickness;
	/** TransomOffset is an OPTIONAL attribute**/
	protected IfcLengthMeasure TransomOffset;
	/** LiningOffset is an OPTIONAL attribute**/
	protected IfcLengthMeasure LiningOffset;
	/** ThresholdOffset is an OPTIONAL attribute**/
	protected IfcLengthMeasure ThresholdOffset;
	/** CasingThickness is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure CasingThickness;
	/** CasingDepth is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure CasingDepth;
	/** ShapeAspectStyle is an OPTIONAL attribute**/
	protected IfcShapeAspect ShapeAspectStyle;
	/**
	* The default constructor.
	**/
	public IfcDoorLiningProperties(){}

	private static final String[] attributes = new String[]{"GlobalId","OwnerHistory","Name","Description"
			,"LiningDepth","LiningThickness","ThresholdDepth","ThresholdThickness","TransomThickness","TransomOffset","LiningOffset"
	,"ThresholdOffset","CasingThickness","CasingDepth","ShapeAspectStyle"};

	public String[] getAttributes() {
		return IfcDoorLiningProperties.attributes;
	}

	/**
	* Constructs a new IfcDoorLiningProperties object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param LiningDepth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param LiningThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param ThresholdDepth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param ThresholdThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TransomThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TransomOffset OPTIONAL parameter of type IfcLengthMeasure
	* @param LiningOffset OPTIONAL parameter of type IfcLengthMeasure
	* @param ThresholdOffset OPTIONAL parameter of type IfcLengthMeasure
	* @param CasingThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param CasingDepth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param ShapeAspectStyle OPTIONAL parameter of type IfcShapeAspect
	**/
	public IfcDoorLiningProperties(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPositiveLengthMeasure LiningDepth, IfcPositiveLengthMeasure LiningThickness, IfcPositiveLengthMeasure ThresholdDepth, IfcPositiveLengthMeasure ThresholdThickness, IfcPositiveLengthMeasure TransomThickness, IfcLengthMeasure TransomOffset, IfcLengthMeasure LiningOffset, IfcLengthMeasure ThresholdOffset, IfcPositiveLengthMeasure CasingThickness, IfcPositiveLengthMeasure CasingDepth, IfcShapeAspect ShapeAspectStyle)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.LiningDepth = LiningDepth;
		this.LiningThickness = LiningThickness;
		this.ThresholdDepth = ThresholdDepth;
		this.ThresholdThickness = ThresholdThickness;
		this.TransomThickness = TransomThickness;
		this.TransomOffset = TransomOffset;
		this.LiningOffset = LiningOffset;
		this.ThresholdOffset = ThresholdOffset;
		this.CasingThickness = CasingThickness;
		this.CasingDepth = CasingDepth;
		this.ShapeAspectStyle = ShapeAspectStyle;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcDoorLiningProperties object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param LiningDepth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param LiningThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param ThresholdDepth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param ThresholdThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TransomThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TransomOffset OPTIONAL parameter of type IfcLengthMeasure
	* @param LiningOffset OPTIONAL parameter of type IfcLengthMeasure
	* @param ThresholdOffset OPTIONAL parameter of type IfcLengthMeasure
	* @param CasingThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param CasingDepth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param ShapeAspectStyle OPTIONAL parameter of type IfcShapeAspect
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPositiveLengthMeasure LiningDepth, IfcPositiveLengthMeasure LiningThickness, IfcPositiveLengthMeasure ThresholdDepth, IfcPositiveLengthMeasure ThresholdThickness, IfcPositiveLengthMeasure TransomThickness, IfcLengthMeasure TransomOffset, IfcLengthMeasure LiningOffset, IfcLengthMeasure ThresholdOffset, IfcPositiveLengthMeasure CasingThickness, IfcPositiveLengthMeasure CasingDepth, IfcShapeAspect ShapeAspectStyle)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.LiningDepth = LiningDepth;
		this.LiningThickness = LiningThickness;
		this.ThresholdDepth = ThresholdDepth;
		this.ThresholdThickness = ThresholdThickness;
		this.TransomThickness = TransomThickness;
		this.TransomOffset = TransomOffset;
		this.LiningOffset = LiningOffset;
		this.ThresholdOffset = ThresholdOffset;
		this.CasingThickness = CasingThickness;
		this.CasingDepth = CasingDepth;
		this.ShapeAspectStyle = ShapeAspectStyle;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.LiningDepth = (IfcPositiveLengthMeasure) parameters.get(4);
		this.LiningThickness = (IfcPositiveLengthMeasure) parameters.get(5);
		this.ThresholdDepth = (IfcPositiveLengthMeasure) parameters.get(6);
		this.ThresholdThickness = (IfcPositiveLengthMeasure) parameters.get(7);
		this.TransomThickness = (IfcPositiveLengthMeasure) parameters.get(8);
		this.TransomOffset = (IfcLengthMeasure) parameters.get(9);
		this.LiningOffset = (IfcLengthMeasure) parameters.get(10);
		this.ThresholdOffset = (IfcLengthMeasure) parameters.get(11);
		this.CasingThickness = (IfcPositiveLengthMeasure) parameters.get(12);
		this.CasingDepth = (IfcPositiveLengthMeasure) parameters.get(13);
		this.ShapeAspectStyle = (IfcShapeAspect) parameters.get(14);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcDoorLiningProperties.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCDOORLININGPROPERTIES(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LiningDepth")) stepString = stepString.concat("*,");
		else{
		if(this.LiningDepth != null)		stepString = stepString.concat(((RootInterface)this.LiningDepth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LiningThickness")) stepString = stepString.concat("*,");
		else{
		if(this.LiningThickness != null)		stepString = stepString.concat(((RootInterface)this.LiningThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ThresholdDepth")) stepString = stepString.concat("*,");
		else{
		if(this.ThresholdDepth != null)		stepString = stepString.concat(((RootInterface)this.ThresholdDepth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ThresholdThickness")) stepString = stepString.concat("*,");
		else{
		if(this.ThresholdThickness != null)		stepString = stepString.concat(((RootInterface)this.ThresholdThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TransomThickness")) stepString = stepString.concat("*,");
		else{
		if(this.TransomThickness != null)		stepString = stepString.concat(((RootInterface)this.TransomThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TransomOffset")) stepString = stepString.concat("*,");
		else{
		if(this.TransomOffset != null)		stepString = stepString.concat(((RootInterface)this.TransomOffset).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LiningOffset")) stepString = stepString.concat("*,");
		else{
		if(this.LiningOffset != null)		stepString = stepString.concat(((RootInterface)this.LiningOffset).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ThresholdOffset")) stepString = stepString.concat("*,");
		else{
		if(this.ThresholdOffset != null)		stepString = stepString.concat(((RootInterface)this.ThresholdOffset).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CasingThickness")) stepString = stepString.concat("*,");
		else{
		if(this.CasingThickness != null)		stepString = stepString.concat(((RootInterface)this.CasingThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CasingDepth")) stepString = stepString.concat("*,");
		else{
		if(this.CasingDepth != null)		stepString = stepString.concat(((RootInterface)this.CasingDepth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShapeAspectStyle")) stepString = stepString.concat("*);");
		else{
		if(this.ShapeAspectStyle != null)		stepString = stepString.concat(((RootInterface)this.ShapeAspectStyle).getStepParameter(IfcShapeAspect.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the LiningDepth attribute to the given value.
	*
	* @param LiningDepth DEMANDED value to set - may not be null
	**/
	public void setLiningDepth(IfcPositiveLengthMeasure LiningDepth)
	{
		this.LiningDepth = LiningDepth;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LiningDepth attribute.
	*
	* @return the value of LiningDepth
	/**/
	public IfcPositiveLengthMeasure getLiningDepth()
	{
		return this.LiningDepth;
	}

	/**
	* This method sets the LiningThickness attribute to the given value.
	*
	* @param LiningThickness DEMANDED value to set - may not be null
	**/
	public void setLiningThickness(IfcPositiveLengthMeasure LiningThickness)
	{
		this.LiningThickness = LiningThickness;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LiningThickness attribute.
	*
	* @return the value of LiningThickness
	/**/
	public IfcPositiveLengthMeasure getLiningThickness()
	{
		return this.LiningThickness;
	}

	/**
	* This method sets the ThresholdDepth attribute to the given value.
	*
	* @param ThresholdDepth DEMANDED value to set - may not be null
	**/
	public void setThresholdDepth(IfcPositiveLengthMeasure ThresholdDepth)
	{
		this.ThresholdDepth = ThresholdDepth;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ThresholdDepth attribute.
	*
	* @return the value of ThresholdDepth
	/**/
	public IfcPositiveLengthMeasure getThresholdDepth()
	{
		return this.ThresholdDepth;
	}

	/**
	* This method sets the ThresholdThickness attribute to the given value.
	*
	* @param ThresholdThickness DEMANDED value to set - may not be null
	**/
	public void setThresholdThickness(IfcPositiveLengthMeasure ThresholdThickness)
	{
		this.ThresholdThickness = ThresholdThickness;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ThresholdThickness attribute.
	*
	* @return the value of ThresholdThickness
	/**/
	public IfcPositiveLengthMeasure getThresholdThickness()
	{
		return this.ThresholdThickness;
	}

	/**
	* This method sets the TransomThickness attribute to the given value.
	*
	* @param TransomThickness DEMANDED value to set - may not be null
	**/
	public void setTransomThickness(IfcPositiveLengthMeasure TransomThickness)
	{
		this.TransomThickness = TransomThickness;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TransomThickness attribute.
	*
	* @return the value of TransomThickness
	/**/
	public IfcPositiveLengthMeasure getTransomThickness()
	{
		return this.TransomThickness;
	}

	/**
	* This method sets the TransomOffset attribute to the given value.
	*
	* @param TransomOffset DEMANDED value to set - may not be null
	**/
	public void setTransomOffset(IfcLengthMeasure TransomOffset)
	{
		this.TransomOffset = TransomOffset;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TransomOffset attribute.
	*
	* @return the value of TransomOffset
	/**/
	public IfcLengthMeasure getTransomOffset()
	{
		return this.TransomOffset;
	}

	/**
	* This method sets the LiningOffset attribute to the given value.
	*
	* @param LiningOffset DEMANDED value to set - may not be null
	**/
	public void setLiningOffset(IfcLengthMeasure LiningOffset)
	{
		this.LiningOffset = LiningOffset;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LiningOffset attribute.
	*
	* @return the value of LiningOffset
	/**/
	public IfcLengthMeasure getLiningOffset()
	{
		return this.LiningOffset;
	}

	/**
	* This method sets the ThresholdOffset attribute to the given value.
	*
	* @param ThresholdOffset DEMANDED value to set - may not be null
	**/
	public void setThresholdOffset(IfcLengthMeasure ThresholdOffset)
	{
		this.ThresholdOffset = ThresholdOffset;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ThresholdOffset attribute.
	*
	* @return the value of ThresholdOffset
	/**/
	public IfcLengthMeasure getThresholdOffset()
	{
		return this.ThresholdOffset;
	}

	/**
	* This method sets the CasingThickness attribute to the given value.
	*
	* @param CasingThickness DEMANDED value to set - may not be null
	**/
	public void setCasingThickness(IfcPositiveLengthMeasure CasingThickness)
	{
		this.CasingThickness = CasingThickness;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the CasingThickness attribute.
	*
	* @return the value of CasingThickness
	/**/
	public IfcPositiveLengthMeasure getCasingThickness()
	{
		return this.CasingThickness;
	}

	/**
	* This method sets the CasingDepth attribute to the given value.
	*
	* @param CasingDepth DEMANDED value to set - may not be null
	**/
	public void setCasingDepth(IfcPositiveLengthMeasure CasingDepth)
	{
		this.CasingDepth = CasingDepth;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the CasingDepth attribute.
	*
	* @return the value of CasingDepth
	/**/
	public IfcPositiveLengthMeasure getCasingDepth()
	{
		return this.CasingDepth;
	}

	/**
	* This method sets the ShapeAspectStyle attribute to the given value.
	*
	* @param ShapeAspectStyle DEMANDED value to set - may not be null
	**/
	public void setShapeAspectStyle(IfcShapeAspect ShapeAspectStyle)
	{
		this.ShapeAspectStyle = ShapeAspectStyle;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ShapeAspectStyle attribute.
	*
	* @return the value of ShapeAspectStyle
	/**/
	public IfcShapeAspect getShapeAspectStyle()
	{
		return this.ShapeAspectStyle;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcDoorLiningProperties ifcDoorLiningProperties = new IfcDoorLiningProperties();
		if(this.GlobalId != null)
			ifcDoorLiningProperties.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcDoorLiningProperties.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcDoorLiningProperties.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcDoorLiningProperties.setDescription((IfcText)this.Description.clone());
		if(this.LiningDepth != null)
			ifcDoorLiningProperties.setLiningDepth((IfcPositiveLengthMeasure)this.LiningDepth.clone());
		if(this.LiningThickness != null)
			ifcDoorLiningProperties.setLiningThickness((IfcPositiveLengthMeasure)this.LiningThickness.clone());
		if(this.ThresholdDepth != null)
			ifcDoorLiningProperties.setThresholdDepth((IfcPositiveLengthMeasure)this.ThresholdDepth.clone());
		if(this.ThresholdThickness != null)
			ifcDoorLiningProperties.setThresholdThickness((IfcPositiveLengthMeasure)this.ThresholdThickness.clone());
		if(this.TransomThickness != null)
			ifcDoorLiningProperties.setTransomThickness((IfcPositiveLengthMeasure)this.TransomThickness.clone());
		if(this.TransomOffset != null)
			ifcDoorLiningProperties.setTransomOffset((IfcLengthMeasure)this.TransomOffset.clone());
		if(this.LiningOffset != null)
			ifcDoorLiningProperties.setLiningOffset((IfcLengthMeasure)this.LiningOffset.clone());
		if(this.ThresholdOffset != null)
			ifcDoorLiningProperties.setThresholdOffset((IfcLengthMeasure)this.ThresholdOffset.clone());
		if(this.CasingThickness != null)
			ifcDoorLiningProperties.setCasingThickness((IfcPositiveLengthMeasure)this.CasingThickness.clone());
		if(this.CasingDepth != null)
			ifcDoorLiningProperties.setCasingDepth((IfcPositiveLengthMeasure)this.CasingDepth.clone());
		if(this.ShapeAspectStyle != null)
			ifcDoorLiningProperties.setShapeAspectStyle((IfcShapeAspect)this.ShapeAspectStyle.clone());
		return ifcDoorLiningProperties;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcDoorLiningProperties ifcDoorLiningProperties = new IfcDoorLiningProperties();
		if(this.GlobalId != null)
			ifcDoorLiningProperties.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcDoorLiningProperties.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcDoorLiningProperties.setName(this.Name);
		if(this.Description != null)
			ifcDoorLiningProperties.setDescription(this.Description);
		if(this.LiningDepth != null)
			ifcDoorLiningProperties.setLiningDepth(this.LiningDepth);
		if(this.LiningThickness != null)
			ifcDoorLiningProperties.setLiningThickness(this.LiningThickness);
		if(this.ThresholdDepth != null)
			ifcDoorLiningProperties.setThresholdDepth(this.ThresholdDepth);
		if(this.ThresholdThickness != null)
			ifcDoorLiningProperties.setThresholdThickness(this.ThresholdThickness);
		if(this.TransomThickness != null)
			ifcDoorLiningProperties.setTransomThickness(this.TransomThickness);
		if(this.TransomOffset != null)
			ifcDoorLiningProperties.setTransomOffset(this.TransomOffset);
		if(this.LiningOffset != null)
			ifcDoorLiningProperties.setLiningOffset(this.LiningOffset);
		if(this.ThresholdOffset != null)
			ifcDoorLiningProperties.setThresholdOffset(this.ThresholdOffset);
		if(this.CasingThickness != null)
			ifcDoorLiningProperties.setCasingThickness(this.CasingThickness);
		if(this.CasingDepth != null)
			ifcDoorLiningProperties.setCasingDepth(this.CasingDepth);
		if(this.ShapeAspectStyle != null)
			ifcDoorLiningProperties.setShapeAspectStyle(this.ShapeAspectStyle);
		return ifcDoorLiningProperties;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
