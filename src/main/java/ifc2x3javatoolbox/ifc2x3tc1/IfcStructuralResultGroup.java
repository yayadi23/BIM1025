/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcStructuralResultGroup<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcStructuralResultGroup extends IfcGroup implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcLabel","IfcAnalysisTheoryTypeEnum","IfcStructuralLoadGroup","BOOLEAN"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** TheoryType is an DEMANDED attribute - may not be null**/
	protected IfcAnalysisTheoryTypeEnum TheoryType;
	/** ResultForLoadGroup is an OPTIONAL attribute**/
	protected IfcStructuralLoadGroup ResultForLoadGroup;
	/** IsLinear is an DEMANDED attribute - may not be null**/
	protected BOOLEAN IsLinear;
	protected SET<IfcStructuralAnalysisModel> ResultGroupFor_Inverse;
	/**
	* The default constructor.
	**/
	public IfcStructuralResultGroup(){}

	private static final String[] attributes = new String[]{"GlobalId","OwnerHistory","Name","Description",
			"ObjectType","TheoryType","ResultForLoadGroup","IsLinear"};

	public String[] getAttributes(){
		return IfcStructuralResultGroup.attributes;
	}

	/**
	* Constructs a new IfcStructuralResultGroup object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param TheoryType DEMANDED parameter of type IfcAnalysisTheoryTypeEnum - may not be null.
	* @param ResultForLoadGroup OPTIONAL parameter of type IfcStructuralLoadGroup
	* @param IsLinear DEMANDED parameter of type BOOLEAN - may not be null.
	**/
	public IfcStructuralResultGroup(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcAnalysisTheoryTypeEnum TheoryType, IfcStructuralLoadGroup ResultForLoadGroup, BOOLEAN IsLinear)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheoryType = TheoryType;
		this.ResultForLoadGroup = ResultForLoadGroup;
		this.IsLinear = IsLinear;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcStructuralResultGroup object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory DEMANDED parameter of type IfcOwnerHistory - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param TheoryType DEMANDED parameter of type IfcAnalysisTheoryTypeEnum - may not be null.
	* @param ResultForLoadGroup OPTIONAL parameter of type IfcStructuralLoadGroup
	* @param IsLinear DEMANDED parameter of type BOOLEAN - may not be null.
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcAnalysisTheoryTypeEnum TheoryType, IfcStructuralLoadGroup ResultForLoadGroup, BOOLEAN IsLinear)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheoryType = TheoryType;
		this.ResultForLoadGroup = ResultForLoadGroup;
		this.IsLinear = IsLinear;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.ObjectType = (IfcLabel) parameters.get(4);
		this.TheoryType = (IfcAnalysisTheoryTypeEnum) parameters.get(5);
		this.ResultForLoadGroup = (IfcStructuralLoadGroup) parameters.get(6);
		this.IsLinear = (BOOLEAN) parameters.get(7);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
		ResultGroupFor_Inverse = null;
	}

	private void resolveInverses()
	{
		if(ResultForLoadGroup != null)
		{
				if(ResultForLoadGroup.SourceOfResultGroup_Inverse == null)
				{
					ResultForLoadGroup.SourceOfResultGroup_Inverse = new SET<IfcStructuralResultGroup>();
				}
				ResultForLoadGroup.SourceOfResultGroup_Inverse.add(this);
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcStructuralResultGroup.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSTRUCTURALRESULTGROUP(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectType")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectType != null)		stepString = stepString.concat(((RootInterface)this.ObjectType).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TheoryType")) stepString = stepString.concat("*,");
		else{
		if(this.TheoryType != null)		stepString = stepString.concat(((RootInterface)this.TheoryType).getStepParameter(IfcAnalysisTheoryTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ResultForLoadGroup")) stepString = stepString.concat("*,");
		else{
		if(this.ResultForLoadGroup != null)		stepString = stepString.concat(((RootInterface)this.ResultForLoadGroup).getStepParameter(IfcStructuralLoadGroup.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("IsLinear")) stepString = stepString.concat("*);");
		else{
		if(this.IsLinear != null)		stepString = stepString.concat(((RootInterface)this.IsLinear).getStepParameter(BOOLEAN.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method returns a copy of the set of the ResultGroupFor_Inverse attribute.
	*
	* @return a copy of the ResultGroupFor_Inverse set
	**/
	public SET<IfcStructuralAnalysisModel> getResultGroupFor_Inverse()
	{
		if(this.ResultGroupFor_Inverse != null)
			return new SET<IfcStructuralAnalysisModel>(this.ResultGroupFor_Inverse);
		return null;
	}

	/**
	* This method sets the TheoryType attribute to the given value.
	*
	* @param TheoryType OPTIONAL value to set
	**/
	public void setTheoryType(IfcAnalysisTheoryTypeEnum TheoryType)
	{
		this.TheoryType = TheoryType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TheoryType attribute.
	*
	* @return the value of TheoryType
	/**/
	public IfcAnalysisTheoryTypeEnum getTheoryType()
	{
		return this.TheoryType;
	}

	/**
	* This method sets the ResultForLoadGroup attribute to the given value.
	*
	* @param ResultForLoadGroup DEMANDED value to set - may not be null
	**/
	public void setResultForLoadGroup(IfcStructuralLoadGroup ResultForLoadGroup)
	{
		synchronizeInversesRemoveResultForLoadGroup(this.ResultForLoadGroup);
		this.ResultForLoadGroup = ResultForLoadGroup;
		synchronizeInversesAddResultForLoadGroup(this.ResultForLoadGroup);
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ResultForLoadGroup attribute.
	*
	* @return the value of ResultForLoadGroup
	/**/
	public IfcStructuralLoadGroup getResultForLoadGroup()
	{
		return this.ResultForLoadGroup;
	}

	private void synchronizeInversesAddResultForLoadGroup(IfcStructuralLoadGroup ResultForLoadGroup)
	{
		if(ResultForLoadGroup != null)
		{
				if(ResultForLoadGroup.SourceOfResultGroup_Inverse == null)
				{
					ResultForLoadGroup.SourceOfResultGroup_Inverse = new SET<IfcStructuralResultGroup>();
				}
				ResultForLoadGroup.SourceOfResultGroup_Inverse.add(this);
		}
	}

	private void synchronizeInversesRemoveResultForLoadGroup(IfcStructuralLoadGroup ResultForLoadGroup)
	{
		if(ResultForLoadGroup != null)
		{
				if(ResultForLoadGroup.SourceOfResultGroup_Inverse != null)
				{
					ResultForLoadGroup.SourceOfResultGroup_Inverse.remove(this);
				}
		}
	}

	/**
	* This method sets the IsLinear attribute to the given value.
	*
	* @param IsLinear OPTIONAL value to set
	**/
	public void setIsLinear(BOOLEAN IsLinear)
	{
		this.IsLinear = IsLinear;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the IsLinear attribute.
	*
	* @return the value of IsLinear
	/**/
	public BOOLEAN getIsLinear()
	{
		return this.IsLinear;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcStructuralResultGroup ifcStructuralResultGroup = new IfcStructuralResultGroup();
		if(this.GlobalId != null)
			ifcStructuralResultGroup.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcStructuralResultGroup.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcStructuralResultGroup.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcStructuralResultGroup.setDescription((IfcText)this.Description.clone());
		if(this.ObjectType != null)
			ifcStructuralResultGroup.setObjectType((IfcLabel)this.ObjectType.clone());
		if(this.TheoryType != null)
			ifcStructuralResultGroup.setTheoryType((IfcAnalysisTheoryTypeEnum)this.TheoryType.clone());
		if(this.ResultForLoadGroup != null)
			ifcStructuralResultGroup.setResultForLoadGroup((IfcStructuralLoadGroup)this.ResultForLoadGroup.clone());
		if(this.IsLinear != null)
			ifcStructuralResultGroup.setIsLinear((BOOLEAN)this.IsLinear.clone());
		return ifcStructuralResultGroup;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcStructuralResultGroup ifcStructuralResultGroup = new IfcStructuralResultGroup();
		if(this.GlobalId != null)
			ifcStructuralResultGroup.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcStructuralResultGroup.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcStructuralResultGroup.setName(this.Name);
		if(this.Description != null)
			ifcStructuralResultGroup.setDescription(this.Description);
		if(this.ObjectType != null)
			ifcStructuralResultGroup.setObjectType(this.ObjectType);
		if(this.TheoryType != null)
			ifcStructuralResultGroup.setTheoryType(this.TheoryType);
		if(this.ResultForLoadGroup != null)
			ifcStructuralResultGroup.setResultForLoadGroup(this.ResultForLoadGroup);
		if(this.IsLinear != null)
			ifcStructuralResultGroup.setIsLinear(this.IsLinear);
		return ifcStructuralResultGroup;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
