/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcStructuralSteelProfileProperties<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcStructuralSteelProfileProperties extends IfcStructuralProfileProperties implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcProfileDef","IfcMassPerLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcAreaMeasure","IfcMomentOfInertiaMeasure","IfcMomentOfInertiaMeasure","IfcMomentOfInertiaMeasure","IfcMomentOfInertiaMeasure","IfcWarpingConstantMeasure","IfcLengthMeasure","IfcLengthMeasure","IfcAreaMeasure","IfcAreaMeasure","IfcSectionModulusMeasure","IfcSectionModulusMeasure","IfcSectionModulusMeasure","IfcSectionModulusMeasure","IfcSectionModulusMeasure","IfcLengthMeasure","IfcLengthMeasure","IfcAreaMeasure","IfcAreaMeasure","IfcPositiveRatioMeasure","IfcPositiveRatioMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** ShearAreaZ is an OPTIONAL attribute**/
	protected IfcAreaMeasure ShearAreaZ;
	/** ShearAreaY is an OPTIONAL attribute**/
	protected IfcAreaMeasure ShearAreaY;
	/** PlasticShapeFactorY is an OPTIONAL attribute**/
	protected IfcPositiveRatioMeasure PlasticShapeFactorY;
	/** PlasticShapeFactorZ is an OPTIONAL attribute**/
	protected IfcPositiveRatioMeasure PlasticShapeFactorZ;
	/**
	* The default constructor.
	**/
	public IfcStructuralSteelProfileProperties(){}

	private static final String[] attributes = new String[]{"ProfileName","ProfileDefinition","PhysicalWeight","Perimeter",
			"MinimumPlateThickness","MaximumPlateThickness","CrossSectionArea","TorsionalConstantX"
	,"MomentOfInertiaYZ","MomentOfInertiaY","MomentOfInertiaZ","WarpingConstant","ShearCentreZ",
			"ShearCentreY","ShearDeformationAreaZ","ShearDeformationAreaY","MaximumSectionModulusY",
			"MinimumSectionModulusY","MaximumSectionModulusZ","MinimumSectionModulusZ","TorsionalSectionModulus"
	,"CentreOfGravityInX","CentreOfGravityInY","ShearAreaZ","ShearAreaY","PlasticShapeFactorY","PlasticShapeFactorZ"};

	public String[] getAttributes(){
		return IfcStructuralSteelProfileProperties.attributes;
	}


	/**
	* Constructs a new IfcStructuralSteelProfileProperties object using the given parameters.
	*
	* @param ProfileName OPTIONAL parameter of type IfcLabel
	* @param ProfileDefinition OPTIONAL parameter of type IfcProfileDef
	* @param PhysicalWeight OPTIONAL parameter of type IfcMassPerLengthMeasure
	* @param Perimeter OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MinimumPlateThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MaximumPlateThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param CrossSectionArea OPTIONAL parameter of type IfcAreaMeasure
	* @param TorsionalConstantX OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaYZ OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaY OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaZ OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param WarpingConstant OPTIONAL parameter of type IfcWarpingConstantMeasure
	* @param ShearCentreZ OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearCentreY OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearDeformationAreaZ OPTIONAL parameter of type IfcAreaMeasure
	* @param ShearDeformationAreaY OPTIONAL parameter of type IfcAreaMeasure
	* @param MaximumSectionModulusY OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MinimumSectionModulusY OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MaximumSectionModulusZ OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MinimumSectionModulusZ OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param TorsionalSectionModulus OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param CentreOfGravityInX OPTIONAL parameter of type IfcLengthMeasure
	* @param CentreOfGravityInY OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearAreaZ OPTIONAL parameter of type IfcAreaMeasure
	* @param ShearAreaY OPTIONAL parameter of type IfcAreaMeasure
	* @param PlasticShapeFactorY OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param PlasticShapeFactorZ OPTIONAL parameter of type IfcPositiveRatioMeasure
	**/
	public IfcStructuralSteelProfileProperties(IfcLabel ProfileName, IfcProfileDef ProfileDefinition, IfcMassPerLengthMeasure PhysicalWeight, IfcPositiveLengthMeasure Perimeter, IfcPositiveLengthMeasure MinimumPlateThickness, IfcPositiveLengthMeasure MaximumPlateThickness, IfcAreaMeasure CrossSectionArea, IfcMomentOfInertiaMeasure TorsionalConstantX, IfcMomentOfInertiaMeasure MomentOfInertiaYZ, IfcMomentOfInertiaMeasure MomentOfInertiaY, IfcMomentOfInertiaMeasure MomentOfInertiaZ, IfcWarpingConstantMeasure WarpingConstant, IfcLengthMeasure ShearCentreZ, IfcLengthMeasure ShearCentreY, IfcAreaMeasure ShearDeformationAreaZ, IfcAreaMeasure ShearDeformationAreaY, IfcSectionModulusMeasure MaximumSectionModulusY, IfcSectionModulusMeasure MinimumSectionModulusY, IfcSectionModulusMeasure MaximumSectionModulusZ, IfcSectionModulusMeasure MinimumSectionModulusZ, IfcSectionModulusMeasure TorsionalSectionModulus, IfcLengthMeasure CentreOfGravityInX, IfcLengthMeasure CentreOfGravityInY, IfcAreaMeasure ShearAreaZ, IfcAreaMeasure ShearAreaY, IfcPositiveRatioMeasure PlasticShapeFactorY, IfcPositiveRatioMeasure PlasticShapeFactorZ)
	{
		this.ProfileName = ProfileName;
		this.ProfileDefinition = ProfileDefinition;
		this.PhysicalWeight = PhysicalWeight;
		this.Perimeter = Perimeter;
		this.MinimumPlateThickness = MinimumPlateThickness;
		this.MaximumPlateThickness = MaximumPlateThickness;
		this.CrossSectionArea = CrossSectionArea;
		this.TorsionalConstantX = TorsionalConstantX;
		this.MomentOfInertiaYZ = MomentOfInertiaYZ;
		this.MomentOfInertiaY = MomentOfInertiaY;
		this.MomentOfInertiaZ = MomentOfInertiaZ;
		this.WarpingConstant = WarpingConstant;
		this.ShearCentreZ = ShearCentreZ;
		this.ShearCentreY = ShearCentreY;
		this.ShearDeformationAreaZ = ShearDeformationAreaZ;
		this.ShearDeformationAreaY = ShearDeformationAreaY;
		this.MaximumSectionModulusY = MaximumSectionModulusY;
		this.MinimumSectionModulusY = MinimumSectionModulusY;
		this.MaximumSectionModulusZ = MaximumSectionModulusZ;
		this.MinimumSectionModulusZ = MinimumSectionModulusZ;
		this.TorsionalSectionModulus = TorsionalSectionModulus;
		this.CentreOfGravityInX = CentreOfGravityInX;
		this.CentreOfGravityInY = CentreOfGravityInY;
		this.ShearAreaZ = ShearAreaZ;
		this.ShearAreaY = ShearAreaY;
		this.PlasticShapeFactorY = PlasticShapeFactorY;
		this.PlasticShapeFactorZ = PlasticShapeFactorZ;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcStructuralSteelProfileProperties object using the given parameters.
	*
	* @param ProfileName OPTIONAL parameter of type IfcLabel
	* @param ProfileDefinition OPTIONAL parameter of type IfcProfileDef
	* @param PhysicalWeight OPTIONAL parameter of type IfcMassPerLengthMeasure
	* @param Perimeter OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MinimumPlateThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MaximumPlateThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param CrossSectionArea OPTIONAL parameter of type IfcAreaMeasure
	* @param TorsionalConstantX OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaYZ OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaY OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param MomentOfInertiaZ OPTIONAL parameter of type IfcMomentOfInertiaMeasure
	* @param WarpingConstant OPTIONAL parameter of type IfcWarpingConstantMeasure
	* @param ShearCentreZ OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearCentreY OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearDeformationAreaZ OPTIONAL parameter of type IfcAreaMeasure
	* @param ShearDeformationAreaY OPTIONAL parameter of type IfcAreaMeasure
	* @param MaximumSectionModulusY OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MinimumSectionModulusY OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MaximumSectionModulusZ OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param MinimumSectionModulusZ OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param TorsionalSectionModulus OPTIONAL parameter of type IfcSectionModulusMeasure
	* @param CentreOfGravityInX OPTIONAL parameter of type IfcLengthMeasure
	* @param CentreOfGravityInY OPTIONAL parameter of type IfcLengthMeasure
	* @param ShearAreaZ OPTIONAL parameter of type IfcAreaMeasure
	* @param ShearAreaY OPTIONAL parameter of type IfcAreaMeasure
	* @param PlasticShapeFactorY OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param PlasticShapeFactorZ OPTIONAL parameter of type IfcPositiveRatioMeasure
	**/
	public void setParameters(IfcLabel ProfileName, IfcProfileDef ProfileDefinition, IfcMassPerLengthMeasure PhysicalWeight, IfcPositiveLengthMeasure Perimeter, IfcPositiveLengthMeasure MinimumPlateThickness, IfcPositiveLengthMeasure MaximumPlateThickness, IfcAreaMeasure CrossSectionArea, IfcMomentOfInertiaMeasure TorsionalConstantX, IfcMomentOfInertiaMeasure MomentOfInertiaYZ, IfcMomentOfInertiaMeasure MomentOfInertiaY, IfcMomentOfInertiaMeasure MomentOfInertiaZ, IfcWarpingConstantMeasure WarpingConstant, IfcLengthMeasure ShearCentreZ, IfcLengthMeasure ShearCentreY, IfcAreaMeasure ShearDeformationAreaZ, IfcAreaMeasure ShearDeformationAreaY, IfcSectionModulusMeasure MaximumSectionModulusY, IfcSectionModulusMeasure MinimumSectionModulusY, IfcSectionModulusMeasure MaximumSectionModulusZ, IfcSectionModulusMeasure MinimumSectionModulusZ, IfcSectionModulusMeasure TorsionalSectionModulus, IfcLengthMeasure CentreOfGravityInX, IfcLengthMeasure CentreOfGravityInY, IfcAreaMeasure ShearAreaZ, IfcAreaMeasure ShearAreaY, IfcPositiveRatioMeasure PlasticShapeFactorY, IfcPositiveRatioMeasure PlasticShapeFactorZ)
	{
		this.ProfileName = ProfileName;
		this.ProfileDefinition = ProfileDefinition;
		this.PhysicalWeight = PhysicalWeight;
		this.Perimeter = Perimeter;
		this.MinimumPlateThickness = MinimumPlateThickness;
		this.MaximumPlateThickness = MaximumPlateThickness;
		this.CrossSectionArea = CrossSectionArea;
		this.TorsionalConstantX = TorsionalConstantX;
		this.MomentOfInertiaYZ = MomentOfInertiaYZ;
		this.MomentOfInertiaY = MomentOfInertiaY;
		this.MomentOfInertiaZ = MomentOfInertiaZ;
		this.WarpingConstant = WarpingConstant;
		this.ShearCentreZ = ShearCentreZ;
		this.ShearCentreY = ShearCentreY;
		this.ShearDeformationAreaZ = ShearDeformationAreaZ;
		this.ShearDeformationAreaY = ShearDeformationAreaY;
		this.MaximumSectionModulusY = MaximumSectionModulusY;
		this.MinimumSectionModulusY = MinimumSectionModulusY;
		this.MaximumSectionModulusZ = MaximumSectionModulusZ;
		this.MinimumSectionModulusZ = MinimumSectionModulusZ;
		this.TorsionalSectionModulus = TorsionalSectionModulus;
		this.CentreOfGravityInX = CentreOfGravityInX;
		this.CentreOfGravityInY = CentreOfGravityInY;
		this.ShearAreaZ = ShearAreaZ;
		this.ShearAreaY = ShearAreaY;
		this.PlasticShapeFactorY = PlasticShapeFactorY;
		this.PlasticShapeFactorZ = PlasticShapeFactorZ;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.ProfileName = (IfcLabel) parameters.get(0);
		this.ProfileDefinition = (IfcProfileDef) parameters.get(1);
		this.PhysicalWeight = (IfcMassPerLengthMeasure) parameters.get(2);
		this.Perimeter = (IfcPositiveLengthMeasure) parameters.get(3);
		this.MinimumPlateThickness = (IfcPositiveLengthMeasure) parameters.get(4);
		this.MaximumPlateThickness = (IfcPositiveLengthMeasure) parameters.get(5);
		this.CrossSectionArea = (IfcAreaMeasure) parameters.get(6);
		this.TorsionalConstantX = (IfcMomentOfInertiaMeasure) parameters.get(7);
		this.MomentOfInertiaYZ = (IfcMomentOfInertiaMeasure) parameters.get(8);
		this.MomentOfInertiaY = (IfcMomentOfInertiaMeasure) parameters.get(9);
		this.MomentOfInertiaZ = (IfcMomentOfInertiaMeasure) parameters.get(10);
		this.WarpingConstant = (IfcWarpingConstantMeasure) parameters.get(11);
		this.ShearCentreZ = (IfcLengthMeasure) parameters.get(12);
		this.ShearCentreY = (IfcLengthMeasure) parameters.get(13);
		this.ShearDeformationAreaZ = (IfcAreaMeasure) parameters.get(14);
		this.ShearDeformationAreaY = (IfcAreaMeasure) parameters.get(15);
		this.MaximumSectionModulusY = (IfcSectionModulusMeasure) parameters.get(16);
		this.MinimumSectionModulusY = (IfcSectionModulusMeasure) parameters.get(17);
		this.MaximumSectionModulusZ = (IfcSectionModulusMeasure) parameters.get(18);
		this.MinimumSectionModulusZ = (IfcSectionModulusMeasure) parameters.get(19);
		this.TorsionalSectionModulus = (IfcSectionModulusMeasure) parameters.get(20);
		this.CentreOfGravityInX = (IfcLengthMeasure) parameters.get(21);
		this.CentreOfGravityInY = (IfcLengthMeasure) parameters.get(22);
		this.ShearAreaZ = (IfcAreaMeasure) parameters.get(23);
		this.ShearAreaY = (IfcAreaMeasure) parameters.get(24);
		this.PlasticShapeFactorY = (IfcPositiveRatioMeasure) parameters.get(25);
		this.PlasticShapeFactorZ = (IfcPositiveRatioMeasure) parameters.get(26);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcStructuralSteelProfileProperties.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSTRUCTURALSTEELPROFILEPROPERTIES(");
		if(getRedefinedDerivedAttributeTypes().contains("ProfileName")) stepString = stepString.concat("*,");
		else{
		if(this.ProfileName != null)		stepString = stepString.concat(((RootInterface)this.ProfileName).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ProfileDefinition")) stepString = stepString.concat("*,");
		else{
		if(this.ProfileDefinition != null)		stepString = stepString.concat(((RootInterface)this.ProfileDefinition).getStepParameter(IfcProfileDef.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PhysicalWeight")) stepString = stepString.concat("*,");
		else{
		if(this.PhysicalWeight != null)		stepString = stepString.concat(((RootInterface)this.PhysicalWeight).getStepParameter(IfcMassPerLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Perimeter")) stepString = stepString.concat("*,");
		else{
		if(this.Perimeter != null)		stepString = stepString.concat(((RootInterface)this.Perimeter).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MinimumPlateThickness")) stepString = stepString.concat("*,");
		else{
		if(this.MinimumPlateThickness != null)		stepString = stepString.concat(((RootInterface)this.MinimumPlateThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MaximumPlateThickness")) stepString = stepString.concat("*,");
		else{
		if(this.MaximumPlateThickness != null)		stepString = stepString.concat(((RootInterface)this.MaximumPlateThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CrossSectionArea")) stepString = stepString.concat("*,");
		else{
		if(this.CrossSectionArea != null)		stepString = stepString.concat(((RootInterface)this.CrossSectionArea).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TorsionalConstantX")) stepString = stepString.concat("*,");
		else{
		if(this.TorsionalConstantX != null)		stepString = stepString.concat(((RootInterface)this.TorsionalConstantX).getStepParameter(IfcMomentOfInertiaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MomentOfInertiaYZ")) stepString = stepString.concat("*,");
		else{
		if(this.MomentOfInertiaYZ != null)		stepString = stepString.concat(((RootInterface)this.MomentOfInertiaYZ).getStepParameter(IfcMomentOfInertiaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MomentOfInertiaY")) stepString = stepString.concat("*,");
		else{
		if(this.MomentOfInertiaY != null)		stepString = stepString.concat(((RootInterface)this.MomentOfInertiaY).getStepParameter(IfcMomentOfInertiaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MomentOfInertiaZ")) stepString = stepString.concat("*,");
		else{
		if(this.MomentOfInertiaZ != null)		stepString = stepString.concat(((RootInterface)this.MomentOfInertiaZ).getStepParameter(IfcMomentOfInertiaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WarpingConstant")) stepString = stepString.concat("*,");
		else{
		if(this.WarpingConstant != null)		stepString = stepString.concat(((RootInterface)this.WarpingConstant).getStepParameter(IfcWarpingConstantMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearCentreZ")) stepString = stepString.concat("*,");
		else{
		if(this.ShearCentreZ != null)		stepString = stepString.concat(((RootInterface)this.ShearCentreZ).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearCentreY")) stepString = stepString.concat("*,");
		else{
		if(this.ShearCentreY != null)		stepString = stepString.concat(((RootInterface)this.ShearCentreY).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearDeformationAreaZ")) stepString = stepString.concat("*,");
		else{
		if(this.ShearDeformationAreaZ != null)		stepString = stepString.concat(((RootInterface)this.ShearDeformationAreaZ).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearDeformationAreaY")) stepString = stepString.concat("*,");
		else{
		if(this.ShearDeformationAreaY != null)		stepString = stepString.concat(((RootInterface)this.ShearDeformationAreaY).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MaximumSectionModulusY")) stepString = stepString.concat("*,");
		else{
		if(this.MaximumSectionModulusY != null)		stepString = stepString.concat(((RootInterface)this.MaximumSectionModulusY).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MinimumSectionModulusY")) stepString = stepString.concat("*,");
		else{
		if(this.MinimumSectionModulusY != null)		stepString = stepString.concat(((RootInterface)this.MinimumSectionModulusY).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MaximumSectionModulusZ")) stepString = stepString.concat("*,");
		else{
		if(this.MaximumSectionModulusZ != null)		stepString = stepString.concat(((RootInterface)this.MaximumSectionModulusZ).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MinimumSectionModulusZ")) stepString = stepString.concat("*,");
		else{
		if(this.MinimumSectionModulusZ != null)		stepString = stepString.concat(((RootInterface)this.MinimumSectionModulusZ).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TorsionalSectionModulus")) stepString = stepString.concat("*,");
		else{
		if(this.TorsionalSectionModulus != null)		stepString = stepString.concat(((RootInterface)this.TorsionalSectionModulus).getStepParameter(IfcSectionModulusMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CentreOfGravityInX")) stepString = stepString.concat("*,");
		else{
		if(this.CentreOfGravityInX != null)		stepString = stepString.concat(((RootInterface)this.CentreOfGravityInX).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CentreOfGravityInY")) stepString = stepString.concat("*,");
		else{
		if(this.CentreOfGravityInY != null)		stepString = stepString.concat(((RootInterface)this.CentreOfGravityInY).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearAreaZ")) stepString = stepString.concat("*,");
		else{
		if(this.ShearAreaZ != null)		stepString = stepString.concat(((RootInterface)this.ShearAreaZ).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearAreaY")) stepString = stepString.concat("*,");
		else{
		if(this.ShearAreaY != null)		stepString = stepString.concat(((RootInterface)this.ShearAreaY).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PlasticShapeFactorY")) stepString = stepString.concat("*,");
		else{
		if(this.PlasticShapeFactorY != null)		stepString = stepString.concat(((RootInterface)this.PlasticShapeFactorY).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PlasticShapeFactorZ")) stepString = stepString.concat("*);");
		else{
		if(this.PlasticShapeFactorZ != null)		stepString = stepString.concat(((RootInterface)this.PlasticShapeFactorZ).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the ShearAreaZ attribute to the given value.
	*
	* @param ShearAreaZ DEMANDED value to set - may not be null
	**/
	public void setShearAreaZ(IfcAreaMeasure ShearAreaZ)
	{
		this.ShearAreaZ = ShearAreaZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ShearAreaZ attribute.
	*
	* @return the value of ShearAreaZ
	/**/
	public IfcAreaMeasure getShearAreaZ()
	{
		return this.ShearAreaZ;
	}

	/**
	* This method sets the ShearAreaY attribute to the given value.
	*
	* @param ShearAreaY DEMANDED value to set - may not be null
	**/
	public void setShearAreaY(IfcAreaMeasure ShearAreaY)
	{
		this.ShearAreaY = ShearAreaY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ShearAreaY attribute.
	*
	* @return the value of ShearAreaY
	/**/
	public IfcAreaMeasure getShearAreaY()
	{
		return this.ShearAreaY;
	}

	/**
	* This method sets the PlasticShapeFactorY attribute to the given value.
	*
	* @param PlasticShapeFactorY DEMANDED value to set - may not be null
	**/
	public void setPlasticShapeFactorY(IfcPositiveRatioMeasure PlasticShapeFactorY)
	{
		this.PlasticShapeFactorY = PlasticShapeFactorY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PlasticShapeFactorY attribute.
	*
	* @return the value of PlasticShapeFactorY
	/**/
	public IfcPositiveRatioMeasure getPlasticShapeFactorY()
	{
		return this.PlasticShapeFactorY;
	}

	/**
	* This method sets the PlasticShapeFactorZ attribute to the given value.
	*
	* @param PlasticShapeFactorZ DEMANDED value to set - may not be null
	**/
	public void setPlasticShapeFactorZ(IfcPositiveRatioMeasure PlasticShapeFactorZ)
	{
		this.PlasticShapeFactorZ = PlasticShapeFactorZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PlasticShapeFactorZ attribute.
	*
	* @return the value of PlasticShapeFactorZ
	/**/
	public IfcPositiveRatioMeasure getPlasticShapeFactorZ()
	{
		return this.PlasticShapeFactorZ;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcStructuralSteelProfileProperties ifcStructuralSteelProfileProperties = new IfcStructuralSteelProfileProperties();
		if(this.ProfileName != null)
			ifcStructuralSteelProfileProperties.setProfileName((IfcLabel)this.ProfileName.clone());
		if(this.ProfileDefinition != null)
			ifcStructuralSteelProfileProperties.setProfileDefinition((IfcProfileDef)this.ProfileDefinition.clone());
		if(this.PhysicalWeight != null)
			ifcStructuralSteelProfileProperties.setPhysicalWeight((IfcMassPerLengthMeasure)this.PhysicalWeight.clone());
		if(this.Perimeter != null)
			ifcStructuralSteelProfileProperties.setPerimeter((IfcPositiveLengthMeasure)this.Perimeter.clone());
		if(this.MinimumPlateThickness != null)
			ifcStructuralSteelProfileProperties.setMinimumPlateThickness((IfcPositiveLengthMeasure)this.MinimumPlateThickness.clone());
		if(this.MaximumPlateThickness != null)
			ifcStructuralSteelProfileProperties.setMaximumPlateThickness((IfcPositiveLengthMeasure)this.MaximumPlateThickness.clone());
		if(this.CrossSectionArea != null)
			ifcStructuralSteelProfileProperties.setCrossSectionArea((IfcAreaMeasure)this.CrossSectionArea.clone());
		if(this.TorsionalConstantX != null)
			ifcStructuralSteelProfileProperties.setTorsionalConstantX((IfcMomentOfInertiaMeasure)this.TorsionalConstantX.clone());
		if(this.MomentOfInertiaYZ != null)
			ifcStructuralSteelProfileProperties.setMomentOfInertiaYZ((IfcMomentOfInertiaMeasure)this.MomentOfInertiaYZ.clone());
		if(this.MomentOfInertiaY != null)
			ifcStructuralSteelProfileProperties.setMomentOfInertiaY((IfcMomentOfInertiaMeasure)this.MomentOfInertiaY.clone());
		if(this.MomentOfInertiaZ != null)
			ifcStructuralSteelProfileProperties.setMomentOfInertiaZ((IfcMomentOfInertiaMeasure)this.MomentOfInertiaZ.clone());
		if(this.WarpingConstant != null)
			ifcStructuralSteelProfileProperties.setWarpingConstant((IfcWarpingConstantMeasure)this.WarpingConstant.clone());
		if(this.ShearCentreZ != null)
			ifcStructuralSteelProfileProperties.setShearCentreZ((IfcLengthMeasure)this.ShearCentreZ.clone());
		if(this.ShearCentreY != null)
			ifcStructuralSteelProfileProperties.setShearCentreY((IfcLengthMeasure)this.ShearCentreY.clone());
		if(this.ShearDeformationAreaZ != null)
			ifcStructuralSteelProfileProperties.setShearDeformationAreaZ((IfcAreaMeasure)this.ShearDeformationAreaZ.clone());
		if(this.ShearDeformationAreaY != null)
			ifcStructuralSteelProfileProperties.setShearDeformationAreaY((IfcAreaMeasure)this.ShearDeformationAreaY.clone());
		if(this.MaximumSectionModulusY != null)
			ifcStructuralSteelProfileProperties.setMaximumSectionModulusY((IfcSectionModulusMeasure)this.MaximumSectionModulusY.clone());
		if(this.MinimumSectionModulusY != null)
			ifcStructuralSteelProfileProperties.setMinimumSectionModulusY((IfcSectionModulusMeasure)this.MinimumSectionModulusY.clone());
		if(this.MaximumSectionModulusZ != null)
			ifcStructuralSteelProfileProperties.setMaximumSectionModulusZ((IfcSectionModulusMeasure)this.MaximumSectionModulusZ.clone());
		if(this.MinimumSectionModulusZ != null)
			ifcStructuralSteelProfileProperties.setMinimumSectionModulusZ((IfcSectionModulusMeasure)this.MinimumSectionModulusZ.clone());
		if(this.TorsionalSectionModulus != null)
			ifcStructuralSteelProfileProperties.setTorsionalSectionModulus((IfcSectionModulusMeasure)this.TorsionalSectionModulus.clone());
		if(this.CentreOfGravityInX != null)
			ifcStructuralSteelProfileProperties.setCentreOfGravityInX((IfcLengthMeasure)this.CentreOfGravityInX.clone());
		if(this.CentreOfGravityInY != null)
			ifcStructuralSteelProfileProperties.setCentreOfGravityInY((IfcLengthMeasure)this.CentreOfGravityInY.clone());
		if(this.ShearAreaZ != null)
			ifcStructuralSteelProfileProperties.setShearAreaZ((IfcAreaMeasure)this.ShearAreaZ.clone());
		if(this.ShearAreaY != null)
			ifcStructuralSteelProfileProperties.setShearAreaY((IfcAreaMeasure)this.ShearAreaY.clone());
		if(this.PlasticShapeFactorY != null)
			ifcStructuralSteelProfileProperties.setPlasticShapeFactorY((IfcPositiveRatioMeasure)this.PlasticShapeFactorY.clone());
		if(this.PlasticShapeFactorZ != null)
			ifcStructuralSteelProfileProperties.setPlasticShapeFactorZ((IfcPositiveRatioMeasure)this.PlasticShapeFactorZ.clone());
		return ifcStructuralSteelProfileProperties;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcStructuralSteelProfileProperties ifcStructuralSteelProfileProperties = new IfcStructuralSteelProfileProperties();
		if(this.ProfileName != null)
			ifcStructuralSteelProfileProperties.setProfileName(this.ProfileName);
		if(this.ProfileDefinition != null)
			ifcStructuralSteelProfileProperties.setProfileDefinition(this.ProfileDefinition);
		if(this.PhysicalWeight != null)
			ifcStructuralSteelProfileProperties.setPhysicalWeight(this.PhysicalWeight);
		if(this.Perimeter != null)
			ifcStructuralSteelProfileProperties.setPerimeter(this.Perimeter);
		if(this.MinimumPlateThickness != null)
			ifcStructuralSteelProfileProperties.setMinimumPlateThickness(this.MinimumPlateThickness);
		if(this.MaximumPlateThickness != null)
			ifcStructuralSteelProfileProperties.setMaximumPlateThickness(this.MaximumPlateThickness);
		if(this.CrossSectionArea != null)
			ifcStructuralSteelProfileProperties.setCrossSectionArea(this.CrossSectionArea);
		if(this.TorsionalConstantX != null)
			ifcStructuralSteelProfileProperties.setTorsionalConstantX(this.TorsionalConstantX);
		if(this.MomentOfInertiaYZ != null)
			ifcStructuralSteelProfileProperties.setMomentOfInertiaYZ(this.MomentOfInertiaYZ);
		if(this.MomentOfInertiaY != null)
			ifcStructuralSteelProfileProperties.setMomentOfInertiaY(this.MomentOfInertiaY);
		if(this.MomentOfInertiaZ != null)
			ifcStructuralSteelProfileProperties.setMomentOfInertiaZ(this.MomentOfInertiaZ);
		if(this.WarpingConstant != null)
			ifcStructuralSteelProfileProperties.setWarpingConstant(this.WarpingConstant);
		if(this.ShearCentreZ != null)
			ifcStructuralSteelProfileProperties.setShearCentreZ(this.ShearCentreZ);
		if(this.ShearCentreY != null)
			ifcStructuralSteelProfileProperties.setShearCentreY(this.ShearCentreY);
		if(this.ShearDeformationAreaZ != null)
			ifcStructuralSteelProfileProperties.setShearDeformationAreaZ(this.ShearDeformationAreaZ);
		if(this.ShearDeformationAreaY != null)
			ifcStructuralSteelProfileProperties.setShearDeformationAreaY(this.ShearDeformationAreaY);
		if(this.MaximumSectionModulusY != null)
			ifcStructuralSteelProfileProperties.setMaximumSectionModulusY(this.MaximumSectionModulusY);
		if(this.MinimumSectionModulusY != null)
			ifcStructuralSteelProfileProperties.setMinimumSectionModulusY(this.MinimumSectionModulusY);
		if(this.MaximumSectionModulusZ != null)
			ifcStructuralSteelProfileProperties.setMaximumSectionModulusZ(this.MaximumSectionModulusZ);
		if(this.MinimumSectionModulusZ != null)
			ifcStructuralSteelProfileProperties.setMinimumSectionModulusZ(this.MinimumSectionModulusZ);
		if(this.TorsionalSectionModulus != null)
			ifcStructuralSteelProfileProperties.setTorsionalSectionModulus(this.TorsionalSectionModulus);
		if(this.CentreOfGravityInX != null)
			ifcStructuralSteelProfileProperties.setCentreOfGravityInX(this.CentreOfGravityInX);
		if(this.CentreOfGravityInY != null)
			ifcStructuralSteelProfileProperties.setCentreOfGravityInY(this.CentreOfGravityInY);
		if(this.ShearAreaZ != null)
			ifcStructuralSteelProfileProperties.setShearAreaZ(this.ShearAreaZ);
		if(this.ShearAreaY != null)
			ifcStructuralSteelProfileProperties.setShearAreaY(this.ShearAreaY);
		if(this.PlasticShapeFactorY != null)
			ifcStructuralSteelProfileProperties.setPlasticShapeFactorY(this.PlasticShapeFactorY);
		if(this.PlasticShapeFactorZ != null)
			ifcStructuralSteelProfileProperties.setPlasticShapeFactorZ(this.PlasticShapeFactorZ);
		return ifcStructuralSteelProfileProperties;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
