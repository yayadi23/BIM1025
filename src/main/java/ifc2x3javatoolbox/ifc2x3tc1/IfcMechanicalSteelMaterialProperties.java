/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcMechanicalSteelMaterialProperties<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcMechanicalSteelMaterialProperties extends IfcMechanicalMaterialProperties implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcMaterial","IfcDynamicViscosityMeasure","IfcModulusOfElasticityMeasure","IfcModulusOfElasticityMeasure","IfcPositiveRatioMeasure","IfcThermalExpansionCoefficientMeasure","IfcPressureMeasure","IfcPressureMeasure","IfcPositiveRatioMeasure","IfcModulusOfElasticityMeasure","IfcPressureMeasure","IfcPositiveRatioMeasure","SET<IfcRelaxation>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** YieldStress is an OPTIONAL attribute**/
	protected IfcPressureMeasure YieldStress;
	/** UltimateStress is an OPTIONAL attribute**/
	protected IfcPressureMeasure UltimateStress;
	/** UltimateStrain is an OPTIONAL attribute**/
	protected IfcPositiveRatioMeasure UltimateStrain;
	/** HardeningModule is an OPTIONAL attribute**/
	protected IfcModulusOfElasticityMeasure HardeningModule;
	/** ProportionalStress is an OPTIONAL attribute**/
	protected IfcPressureMeasure ProportionalStress;
	/** PlasticStrain is an OPTIONAL attribute**/
	protected IfcPositiveRatioMeasure PlasticStrain;
	/** Relaxations is an OPTIONAL attribute**/
	protected SET<IfcRelaxation> Relaxations;
	/**
	* The default constructor.
	**/
	public IfcMechanicalSteelMaterialProperties(){}
	private static final String[] attributes = new String[]{"Material","DynamicViscosity","YoungModulus","ShearModulus"
			,"PoissonRatio","ThermalExpansionCoefficient","YieldStress","UltimateStress","UltimateStrain"
	,"HardeningModule","ProportionalStress","PlasticStrain","Relaxations"};

	public String[] getAttributes() {
		return IfcMechanicalSteelMaterialProperties.attributes;
	}

	/**
	* Constructs a new IfcMechanicalSteelMaterialProperties object using the given parameters.
	*
	* @param Material DEMANDED parameter of type IfcMaterial - may not be null.
	* @param DynamicViscosity OPTIONAL parameter of type IfcDynamicViscosityMeasure
	* @param YoungModulus OPTIONAL parameter of type IfcModulusOfElasticityMeasure
	* @param ShearModulus OPTIONAL parameter of type IfcModulusOfElasticityMeasure
	* @param PoissonRatio OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param ThermalExpansionCoefficient OPTIONAL parameter of type IfcThermalExpansionCoefficientMeasure
	* @param YieldStress OPTIONAL parameter of type IfcPressureMeasure
	* @param UltimateStress OPTIONAL parameter of type IfcPressureMeasure
	* @param UltimateStrain OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param HardeningModule OPTIONAL parameter of type IfcModulusOfElasticityMeasure
	* @param ProportionalStress OPTIONAL parameter of type IfcPressureMeasure
	* @param PlasticStrain OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param Relaxations OPTIONAL parameter of type SET<IfcRelaxation>
	**/
	public IfcMechanicalSteelMaterialProperties(IfcMaterial Material, IfcDynamicViscosityMeasure DynamicViscosity, IfcModulusOfElasticityMeasure YoungModulus, IfcModulusOfElasticityMeasure ShearModulus, IfcPositiveRatioMeasure PoissonRatio, IfcThermalExpansionCoefficientMeasure ThermalExpansionCoefficient, IfcPressureMeasure YieldStress, IfcPressureMeasure UltimateStress, IfcPositiveRatioMeasure UltimateStrain, IfcModulusOfElasticityMeasure HardeningModule, IfcPressureMeasure ProportionalStress, IfcPositiveRatioMeasure PlasticStrain, SET<IfcRelaxation> Relaxations)
	{
		this.Material = Material;
		this.DynamicViscosity = DynamicViscosity;
		this.YoungModulus = YoungModulus;
		this.ShearModulus = ShearModulus;
		this.PoissonRatio = PoissonRatio;
		this.ThermalExpansionCoefficient = ThermalExpansionCoefficient;
		this.YieldStress = YieldStress;
		this.UltimateStress = UltimateStress;
		this.UltimateStrain = UltimateStrain;
		this.HardeningModule = HardeningModule;
		this.ProportionalStress = ProportionalStress;
		this.PlasticStrain = PlasticStrain;
		this.Relaxations = Relaxations;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcMechanicalSteelMaterialProperties object using the given parameters.
	*
	* @param Material DEMANDED parameter of type IfcMaterial - may not be null.
	* @param DynamicViscosity OPTIONAL parameter of type IfcDynamicViscosityMeasure
	* @param YoungModulus OPTIONAL parameter of type IfcModulusOfElasticityMeasure
	* @param ShearModulus OPTIONAL parameter of type IfcModulusOfElasticityMeasure
	* @param PoissonRatio OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param ThermalExpansionCoefficient OPTIONAL parameter of type IfcThermalExpansionCoefficientMeasure
	* @param YieldStress OPTIONAL parameter of type IfcPressureMeasure
	* @param UltimateStress OPTIONAL parameter of type IfcPressureMeasure
	* @param UltimateStrain OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param HardeningModule OPTIONAL parameter of type IfcModulusOfElasticityMeasure
	* @param ProportionalStress OPTIONAL parameter of type IfcPressureMeasure
	* @param PlasticStrain OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param Relaxations OPTIONAL parameter of type SET<IfcRelaxation>
	**/
	public void setParameters(IfcMaterial Material, IfcDynamicViscosityMeasure DynamicViscosity, IfcModulusOfElasticityMeasure YoungModulus, IfcModulusOfElasticityMeasure ShearModulus, IfcPositiveRatioMeasure PoissonRatio, IfcThermalExpansionCoefficientMeasure ThermalExpansionCoefficient, IfcPressureMeasure YieldStress, IfcPressureMeasure UltimateStress, IfcPositiveRatioMeasure UltimateStrain, IfcModulusOfElasticityMeasure HardeningModule, IfcPressureMeasure ProportionalStress, IfcPositiveRatioMeasure PlasticStrain, SET<IfcRelaxation> Relaxations)
	{
		this.Material = Material;
		this.DynamicViscosity = DynamicViscosity;
		this.YoungModulus = YoungModulus;
		this.ShearModulus = ShearModulus;
		this.PoissonRatio = PoissonRatio;
		this.ThermalExpansionCoefficient = ThermalExpansionCoefficient;
		this.YieldStress = YieldStress;
		this.UltimateStress = UltimateStress;
		this.UltimateStrain = UltimateStrain;
		this.HardeningModule = HardeningModule;
		this.ProportionalStress = ProportionalStress;
		this.PlasticStrain = PlasticStrain;
		this.Relaxations = Relaxations;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Material = (IfcMaterial) parameters.get(0);
		this.DynamicViscosity = (IfcDynamicViscosityMeasure) parameters.get(1);
		this.YoungModulus = (IfcModulusOfElasticityMeasure) parameters.get(2);
		this.ShearModulus = (IfcModulusOfElasticityMeasure) parameters.get(3);
		this.PoissonRatio = (IfcPositiveRatioMeasure) parameters.get(4);
		this.ThermalExpansionCoefficient = (IfcThermalExpansionCoefficientMeasure) parameters.get(5);
		this.YieldStress = (IfcPressureMeasure) parameters.get(6);
		this.UltimateStress = (IfcPressureMeasure) parameters.get(7);
		this.UltimateStrain = (IfcPositiveRatioMeasure) parameters.get(8);
		this.HardeningModule = (IfcModulusOfElasticityMeasure) parameters.get(9);
		this.ProportionalStress = (IfcPressureMeasure) parameters.get(10);
		this.PlasticStrain = (IfcPositiveRatioMeasure) parameters.get(11);
		this.Relaxations = (SET<IfcRelaxation>) parameters.get(12);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcMechanicalSteelMaterialProperties.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCMECHANICALSTEELMATERIALPROPERTIES(");
		if(getRedefinedDerivedAttributeTypes().contains("Material")) stepString = stepString.concat("*,");
		else{
		if(this.Material != null)		stepString = stepString.concat(((RootInterface)this.Material).getStepParameter(IfcMaterial.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DynamicViscosity")) stepString = stepString.concat("*,");
		else{
		if(this.DynamicViscosity != null)		stepString = stepString.concat(((RootInterface)this.DynamicViscosity).getStepParameter(IfcDynamicViscosityMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("YoungModulus")) stepString = stepString.concat("*,");
		else{
		if(this.YoungModulus != null)		stepString = stepString.concat(((RootInterface)this.YoungModulus).getStepParameter(IfcModulusOfElasticityMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ShearModulus")) stepString = stepString.concat("*,");
		else{
		if(this.ShearModulus != null)		stepString = stepString.concat(((RootInterface)this.ShearModulus).getStepParameter(IfcModulusOfElasticityMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PoissonRatio")) stepString = stepString.concat("*,");
		else{
		if(this.PoissonRatio != null)		stepString = stepString.concat(((RootInterface)this.PoissonRatio).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ThermalExpansionCoefficient")) stepString = stepString.concat("*,");
		else{
		if(this.ThermalExpansionCoefficient != null)		stepString = stepString.concat(((RootInterface)this.ThermalExpansionCoefficient).getStepParameter(IfcThermalExpansionCoefficientMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("YieldStress")) stepString = stepString.concat("*,");
		else{
		if(this.YieldStress != null)		stepString = stepString.concat(((RootInterface)this.YieldStress).getStepParameter(IfcPressureMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UltimateStress")) stepString = stepString.concat("*,");
		else{
		if(this.UltimateStress != null)		stepString = stepString.concat(((RootInterface)this.UltimateStress).getStepParameter(IfcPressureMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UltimateStrain")) stepString = stepString.concat("*,");
		else{
		if(this.UltimateStrain != null)		stepString = stepString.concat(((RootInterface)this.UltimateStrain).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("HardeningModule")) stepString = stepString.concat("*,");
		else{
		if(this.HardeningModule != null)		stepString = stepString.concat(((RootInterface)this.HardeningModule).getStepParameter(IfcModulusOfElasticityMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ProportionalStress")) stepString = stepString.concat("*,");
		else{
		if(this.ProportionalStress != null)		stepString = stepString.concat(((RootInterface)this.ProportionalStress).getStepParameter(IfcPressureMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PlasticStrain")) stepString = stepString.concat("*,");
		else{
		if(this.PlasticStrain != null)		stepString = stepString.concat(((RootInterface)this.PlasticStrain).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Relaxations")) stepString = stepString.concat("*);");
		else{
		if(this.Relaxations != null)		stepString = stepString.concat(((RootInterface)this.Relaxations).getStepParameter(IfcRelaxation.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the YieldStress attribute to the given value.
	*
	* @param YieldStress DEMANDED value to set - may not be null
	**/
	public void setYieldStress(IfcPressureMeasure YieldStress)
	{
		this.YieldStress = YieldStress;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the YieldStress attribute.
	*
	* @return the value of YieldStress
	/**/
	public IfcPressureMeasure getYieldStress()
	{
		return this.YieldStress;
	}

	/**
	* This method sets the UltimateStress attribute to the given value.
	*
	* @param UltimateStress DEMANDED value to set - may not be null
	**/
	public void setUltimateStress(IfcPressureMeasure UltimateStress)
	{
		this.UltimateStress = UltimateStress;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the UltimateStress attribute.
	*
	* @return the value of UltimateStress
	/**/
	public IfcPressureMeasure getUltimateStress()
	{
		return this.UltimateStress;
	}

	/**
	* This method sets the UltimateStrain attribute to the given value.
	*
	* @param UltimateStrain DEMANDED value to set - may not be null
	**/
	public void setUltimateStrain(IfcPositiveRatioMeasure UltimateStrain)
	{
		this.UltimateStrain = UltimateStrain;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the UltimateStrain attribute.
	*
	* @return the value of UltimateStrain
	/**/
	public IfcPositiveRatioMeasure getUltimateStrain()
	{
		return this.UltimateStrain;
	}

	/**
	* This method sets the HardeningModule attribute to the given value.
	*
	* @param HardeningModule DEMANDED value to set - may not be null
	**/
	public void setHardeningModule(IfcModulusOfElasticityMeasure HardeningModule)
	{
		this.HardeningModule = HardeningModule;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the HardeningModule attribute.
	*
	* @return the value of HardeningModule
	/**/
	public IfcModulusOfElasticityMeasure getHardeningModule()
	{
		return this.HardeningModule;
	}

	/**
	* This method sets the ProportionalStress attribute to the given value.
	*
	* @param ProportionalStress DEMANDED value to set - may not be null
	**/
	public void setProportionalStress(IfcPressureMeasure ProportionalStress)
	{
		this.ProportionalStress = ProportionalStress;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ProportionalStress attribute.
	*
	* @return the value of ProportionalStress
	/**/
	public IfcPressureMeasure getProportionalStress()
	{
		return this.ProportionalStress;
	}

	/**
	* This method sets the PlasticStrain attribute to the given value.
	*
	* @param PlasticStrain DEMANDED value to set - may not be null
	**/
	public void setPlasticStrain(IfcPositiveRatioMeasure PlasticStrain)
	{
		this.PlasticStrain = PlasticStrain;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PlasticStrain attribute.
	*
	* @return the value of PlasticStrain
	/**/
	public IfcPositiveRatioMeasure getPlasticStrain()
	{
		return this.PlasticStrain;
	}

	/**
	* This method sets the Relaxations attribute to the given value.
	*
	* @param Relaxations DEMANDED value to set - may not be null
	**/
	public void setRelaxations(SET<IfcRelaxation> Relaxations)
	{
		this.Relaxations = Relaxations;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the Relaxations attribute.
	*
	* @return a copy of the Relaxations set
	**/
	public SET<IfcRelaxation> getRelaxations()
	{
		if(this.Relaxations != null)
			return new SET<IfcRelaxation>(this.Relaxations);
		return null;
	}

	/**
	* This method adds an IfcRelaxation object to the Relaxations set.
	* @param Relaxations element to be appended to this set.
	**/
	public void addRelaxations(IfcRelaxation Relaxations)
	{
		if(this.Relaxations == null)
			this.Relaxations = new SET<IfcRelaxation>();
		this.Relaxations.add(Relaxations);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcRelaxation objects to the Relaxations set.
	* @param Relaxations collection containing elements to be added to this set.
	**/
	public void addAllRelaxations(java.util.Collection<IfcRelaxation> Relaxations)
	{
		if(this.Relaxations == null)
			this.Relaxations = new SET<IfcRelaxation>();
		this.Relaxations.addAll(Relaxations);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the Relaxations set.
	**/
	public void clearRelaxations()
	{
		if(this.Relaxations != null)
		{
			this.Relaxations.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcRelaxation object from the Relaxations set.
	* @param Relaxations element to be removed from this set.
	**/
	public void removeRelaxations(IfcRelaxation Relaxations)
	{
		if(this.Relaxations != null)
		{
			this.Relaxations.remove(Relaxations);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcRelaxation objects from the Relaxations set.
	* @param Relaxations collection containing elements to be removed from this set.
	**/
	public void removeAllRelaxations(java.util.Collection<IfcRelaxation> Relaxations)
	{
		if(this.Relaxations != null)
		{
			this.Relaxations.removeAll(Relaxations);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcMechanicalSteelMaterialProperties ifcMechanicalSteelMaterialProperties = new IfcMechanicalSteelMaterialProperties();
		if(this.Material != null)
			ifcMechanicalSteelMaterialProperties.setMaterial((IfcMaterial)this.Material.clone());
		if(this.DynamicViscosity != null)
			ifcMechanicalSteelMaterialProperties.setDynamicViscosity((IfcDynamicViscosityMeasure)this.DynamicViscosity.clone());
		if(this.YoungModulus != null)
			ifcMechanicalSteelMaterialProperties.setYoungModulus((IfcModulusOfElasticityMeasure)this.YoungModulus.clone());
		if(this.ShearModulus != null)
			ifcMechanicalSteelMaterialProperties.setShearModulus((IfcModulusOfElasticityMeasure)this.ShearModulus.clone());
		if(this.PoissonRatio != null)
			ifcMechanicalSteelMaterialProperties.setPoissonRatio((IfcPositiveRatioMeasure)this.PoissonRatio.clone());
		if(this.ThermalExpansionCoefficient != null)
			ifcMechanicalSteelMaterialProperties.setThermalExpansionCoefficient((IfcThermalExpansionCoefficientMeasure)this.ThermalExpansionCoefficient.clone());
		if(this.YieldStress != null)
			ifcMechanicalSteelMaterialProperties.setYieldStress((IfcPressureMeasure)this.YieldStress.clone());
		if(this.UltimateStress != null)
			ifcMechanicalSteelMaterialProperties.setUltimateStress((IfcPressureMeasure)this.UltimateStress.clone());
		if(this.UltimateStrain != null)
			ifcMechanicalSteelMaterialProperties.setUltimateStrain((IfcPositiveRatioMeasure)this.UltimateStrain.clone());
		if(this.HardeningModule != null)
			ifcMechanicalSteelMaterialProperties.setHardeningModule((IfcModulusOfElasticityMeasure)this.HardeningModule.clone());
		if(this.ProportionalStress != null)
			ifcMechanicalSteelMaterialProperties.setProportionalStress((IfcPressureMeasure)this.ProportionalStress.clone());
		if(this.PlasticStrain != null)
			ifcMechanicalSteelMaterialProperties.setPlasticStrain((IfcPositiveRatioMeasure)this.PlasticStrain.clone());
		if(this.Relaxations != null)
			ifcMechanicalSteelMaterialProperties.setRelaxations((SET<IfcRelaxation>)this.Relaxations.clone());
		return ifcMechanicalSteelMaterialProperties;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcMechanicalSteelMaterialProperties ifcMechanicalSteelMaterialProperties = new IfcMechanicalSteelMaterialProperties();
		if(this.Material != null)
			ifcMechanicalSteelMaterialProperties.setMaterial(this.Material);
		if(this.DynamicViscosity != null)
			ifcMechanicalSteelMaterialProperties.setDynamicViscosity(this.DynamicViscosity);
		if(this.YoungModulus != null)
			ifcMechanicalSteelMaterialProperties.setYoungModulus(this.YoungModulus);
		if(this.ShearModulus != null)
			ifcMechanicalSteelMaterialProperties.setShearModulus(this.ShearModulus);
		if(this.PoissonRatio != null)
			ifcMechanicalSteelMaterialProperties.setPoissonRatio(this.PoissonRatio);
		if(this.ThermalExpansionCoefficient != null)
			ifcMechanicalSteelMaterialProperties.setThermalExpansionCoefficient(this.ThermalExpansionCoefficient);
		if(this.YieldStress != null)
			ifcMechanicalSteelMaterialProperties.setYieldStress(this.YieldStress);
		if(this.UltimateStress != null)
			ifcMechanicalSteelMaterialProperties.setUltimateStress(this.UltimateStress);
		if(this.UltimateStrain != null)
			ifcMechanicalSteelMaterialProperties.setUltimateStrain(this.UltimateStrain);
		if(this.HardeningModule != null)
			ifcMechanicalSteelMaterialProperties.setHardeningModule(this.HardeningModule);
		if(this.ProportionalStress != null)
			ifcMechanicalSteelMaterialProperties.setProportionalStress(this.ProportionalStress);
		if(this.PlasticStrain != null)
			ifcMechanicalSteelMaterialProperties.setPlasticStrain(this.PlasticStrain);
		if(this.Relaxations != null)
			ifcMechanicalSteelMaterialProperties.setRelaxations(this.Relaxations);
		return ifcMechanicalSteelMaterialProperties;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
