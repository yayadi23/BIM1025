/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcWaterProperties<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcWaterProperties extends IfcMaterialProperties implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcMaterial","BOOLEAN","IfcIonConcentrationMeasure","IfcIonConcentrationMeasure","IfcIonConcentrationMeasure","IfcNormalisedRatioMeasure","IfcPHMeasure","IfcNormalisedRatioMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** IsPotable is an OPTIONAL attribute**/
	protected BOOLEAN IsPotable;
	/** Hardness is an OPTIONAL attribute**/
	protected IfcIonConcentrationMeasure Hardness;
	/** AlkalinityConcentration is an OPTIONAL attribute**/
	protected IfcIonConcentrationMeasure AlkalinityConcentration;
	/** AcidityConcentration is an OPTIONAL attribute**/
	protected IfcIonConcentrationMeasure AcidityConcentration;
	/** ImpuritiesContent is an OPTIONAL attribute**/
	protected IfcNormalisedRatioMeasure ImpuritiesContent;
	/** PHLevel is an OPTIONAL attribute**/
	protected IfcPHMeasure PHLevel;
	/** DissolvedSolidsContent is an OPTIONAL attribute**/
	protected IfcNormalisedRatioMeasure DissolvedSolidsContent;
	/**
	* The default constructor.
	**/
	public IfcWaterProperties(){}

	private static final String[] attributes = new String[]{"Material","IsPotable","Hardness","AlkalinityConcentration",
			"AcidityConcentration","ImpuritiesContent","PHLevel","DissolvedSolidsContent"};

	public String[] getAttributes(){
		return IfcWaterProperties.attributes;
	}

	/**
	* Constructs a new IfcWaterProperties object using the given parameters.
	*
	* @param Material DEMANDED parameter of type IfcMaterial - may not be null.
	* @param IsPotable OPTIONAL parameter of type BOOLEAN
	* @param Hardness OPTIONAL parameter of type IfcIonConcentrationMeasure
	* @param AlkalinityConcentration OPTIONAL parameter of type IfcIonConcentrationMeasure
	* @param AcidityConcentration OPTIONAL parameter of type IfcIonConcentrationMeasure
	* @param ImpuritiesContent OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param PHLevel OPTIONAL parameter of type IfcPHMeasure
	* @param DissolvedSolidsContent OPTIONAL parameter of type IfcNormalisedRatioMeasure
	**/
	public IfcWaterProperties(IfcMaterial Material, BOOLEAN IsPotable, IfcIonConcentrationMeasure Hardness, IfcIonConcentrationMeasure AlkalinityConcentration, IfcIonConcentrationMeasure AcidityConcentration, IfcNormalisedRatioMeasure ImpuritiesContent, IfcPHMeasure PHLevel, IfcNormalisedRatioMeasure DissolvedSolidsContent)
	{
		this.Material = Material;
		this.IsPotable = IsPotable;
		this.Hardness = Hardness;
		this.AlkalinityConcentration = AlkalinityConcentration;
		this.AcidityConcentration = AcidityConcentration;
		this.ImpuritiesContent = ImpuritiesContent;
		this.PHLevel = PHLevel;
		this.DissolvedSolidsContent = DissolvedSolidsContent;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcWaterProperties object using the given parameters.
	*
	* @param Material DEMANDED parameter of type IfcMaterial - may not be null.
	* @param IsPotable OPTIONAL parameter of type BOOLEAN
	* @param Hardness OPTIONAL parameter of type IfcIonConcentrationMeasure
	* @param AlkalinityConcentration OPTIONAL parameter of type IfcIonConcentrationMeasure
	* @param AcidityConcentration OPTIONAL parameter of type IfcIonConcentrationMeasure
	* @param ImpuritiesContent OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param PHLevel OPTIONAL parameter of type IfcPHMeasure
	* @param DissolvedSolidsContent OPTIONAL parameter of type IfcNormalisedRatioMeasure
	**/
	public void setParameters(IfcMaterial Material, BOOLEAN IsPotable, IfcIonConcentrationMeasure Hardness, IfcIonConcentrationMeasure AlkalinityConcentration, IfcIonConcentrationMeasure AcidityConcentration, IfcNormalisedRatioMeasure ImpuritiesContent, IfcPHMeasure PHLevel, IfcNormalisedRatioMeasure DissolvedSolidsContent)
	{
		this.Material = Material;
		this.IsPotable = IsPotable;
		this.Hardness = Hardness;
		this.AlkalinityConcentration = AlkalinityConcentration;
		this.AcidityConcentration = AcidityConcentration;
		this.ImpuritiesContent = ImpuritiesContent;
		this.PHLevel = PHLevel;
		this.DissolvedSolidsContent = DissolvedSolidsContent;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Material = (IfcMaterial) parameters.get(0);
		this.IsPotable = (BOOLEAN) parameters.get(1);
		this.Hardness = (IfcIonConcentrationMeasure) parameters.get(2);
		this.AlkalinityConcentration = (IfcIonConcentrationMeasure) parameters.get(3);
		this.AcidityConcentration = (IfcIonConcentrationMeasure) parameters.get(4);
		this.ImpuritiesContent = (IfcNormalisedRatioMeasure) parameters.get(5);
		this.PHLevel = (IfcPHMeasure) parameters.get(6);
		this.DissolvedSolidsContent = (IfcNormalisedRatioMeasure) parameters.get(7);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcWaterProperties.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCWATERPROPERTIES(");
		if(getRedefinedDerivedAttributeTypes().contains("Material")) stepString = stepString.concat("*,");
		else{
		if(this.Material != null)		stepString = stepString.concat(((RootInterface)this.Material).getStepParameter(IfcMaterial.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("IsPotable")) stepString = stepString.concat("*,");
		else{
		if(this.IsPotable != null)		stepString = stepString.concat(((RootInterface)this.IsPotable).getStepParameter(BOOLEAN.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Hardness")) stepString = stepString.concat("*,");
		else{
		if(this.Hardness != null)		stepString = stepString.concat(((RootInterface)this.Hardness).getStepParameter(IfcIonConcentrationMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AlkalinityConcentration")) stepString = stepString.concat("*,");
		else{
		if(this.AlkalinityConcentration != null)		stepString = stepString.concat(((RootInterface)this.AlkalinityConcentration).getStepParameter(IfcIonConcentrationMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AcidityConcentration")) stepString = stepString.concat("*,");
		else{
		if(this.AcidityConcentration != null)		stepString = stepString.concat(((RootInterface)this.AcidityConcentration).getStepParameter(IfcIonConcentrationMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ImpuritiesContent")) stepString = stepString.concat("*,");
		else{
		if(this.ImpuritiesContent != null)		stepString = stepString.concat(((RootInterface)this.ImpuritiesContent).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PHLevel")) stepString = stepString.concat("*,");
		else{
		if(this.PHLevel != null)		stepString = stepString.concat(((RootInterface)this.PHLevel).getStepParameter(IfcPHMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DissolvedSolidsContent")) stepString = stepString.concat("*);");
		else{
		if(this.DissolvedSolidsContent != null)		stepString = stepString.concat(((RootInterface)this.DissolvedSolidsContent).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the IsPotable attribute to the given value.
	*
	* @param IsPotable DEMANDED value to set - may not be null
	**/
	public void setIsPotable(BOOLEAN IsPotable)
	{
		this.IsPotable = IsPotable;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the IsPotable attribute.
	*
	* @return the value of IsPotable
	/**/
	public BOOLEAN getIsPotable()
	{
		return this.IsPotable;
	}

	/**
	* This method sets the Hardness attribute to the given value.
	*
	* @param Hardness DEMANDED value to set - may not be null
	**/
	public void setHardness(IfcIonConcentrationMeasure Hardness)
	{
		this.Hardness = Hardness;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Hardness attribute.
	*
	* @return the value of Hardness
	/**/
	public IfcIonConcentrationMeasure getHardness()
	{
		return this.Hardness;
	}

	/**
	* This method sets the AlkalinityConcentration attribute to the given value.
	*
	* @param AlkalinityConcentration DEMANDED value to set - may not be null
	**/
	public void setAlkalinityConcentration(IfcIonConcentrationMeasure AlkalinityConcentration)
	{
		this.AlkalinityConcentration = AlkalinityConcentration;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the AlkalinityConcentration attribute.
	*
	* @return the value of AlkalinityConcentration
	/**/
	public IfcIonConcentrationMeasure getAlkalinityConcentration()
	{
		return this.AlkalinityConcentration;
	}

	/**
	* This method sets the AcidityConcentration attribute to the given value.
	*
	* @param AcidityConcentration DEMANDED value to set - may not be null
	**/
	public void setAcidityConcentration(IfcIonConcentrationMeasure AcidityConcentration)
	{
		this.AcidityConcentration = AcidityConcentration;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the AcidityConcentration attribute.
	*
	* @return the value of AcidityConcentration
	/**/
	public IfcIonConcentrationMeasure getAcidityConcentration()
	{
		return this.AcidityConcentration;
	}

	/**
	* This method sets the ImpuritiesContent attribute to the given value.
	*
	* @param ImpuritiesContent DEMANDED value to set - may not be null
	**/
	public void setImpuritiesContent(IfcNormalisedRatioMeasure ImpuritiesContent)
	{
		this.ImpuritiesContent = ImpuritiesContent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ImpuritiesContent attribute.
	*
	* @return the value of ImpuritiesContent
	/**/
	public IfcNormalisedRatioMeasure getImpuritiesContent()
	{
		return this.ImpuritiesContent;
	}

	/**
	* This method sets the PHLevel attribute to the given value.
	*
	* @param PHLevel DEMANDED value to set - may not be null
	**/
	public void setPHLevel(IfcPHMeasure PHLevel)
	{
		this.PHLevel = PHLevel;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PHLevel attribute.
	*
	* @return the value of PHLevel
	/**/
	public IfcPHMeasure getPHLevel()
	{
		return this.PHLevel;
	}

	/**
	* This method sets the DissolvedSolidsContent attribute to the given value.
	*
	* @param DissolvedSolidsContent DEMANDED value to set - may not be null
	**/
	public void setDissolvedSolidsContent(IfcNormalisedRatioMeasure DissolvedSolidsContent)
	{
		this.DissolvedSolidsContent = DissolvedSolidsContent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the DissolvedSolidsContent attribute.
	*
	* @return the value of DissolvedSolidsContent
	/**/
	public IfcNormalisedRatioMeasure getDissolvedSolidsContent()
	{
		return this.DissolvedSolidsContent;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcWaterProperties ifcWaterProperties = new IfcWaterProperties();
		if(this.Material != null)
			ifcWaterProperties.setMaterial((IfcMaterial)this.Material.clone());
		if(this.IsPotable != null)
			ifcWaterProperties.setIsPotable((BOOLEAN)this.IsPotable.clone());
		if(this.Hardness != null)
			ifcWaterProperties.setHardness((IfcIonConcentrationMeasure)this.Hardness.clone());
		if(this.AlkalinityConcentration != null)
			ifcWaterProperties.setAlkalinityConcentration((IfcIonConcentrationMeasure)this.AlkalinityConcentration.clone());
		if(this.AcidityConcentration != null)
			ifcWaterProperties.setAcidityConcentration((IfcIonConcentrationMeasure)this.AcidityConcentration.clone());
		if(this.ImpuritiesContent != null)
			ifcWaterProperties.setImpuritiesContent((IfcNormalisedRatioMeasure)this.ImpuritiesContent.clone());
		if(this.PHLevel != null)
			ifcWaterProperties.setPHLevel((IfcPHMeasure)this.PHLevel.clone());
		if(this.DissolvedSolidsContent != null)
			ifcWaterProperties.setDissolvedSolidsContent((IfcNormalisedRatioMeasure)this.DissolvedSolidsContent.clone());
		return ifcWaterProperties;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcWaterProperties ifcWaterProperties = new IfcWaterProperties();
		if(this.Material != null)
			ifcWaterProperties.setMaterial(this.Material);
		if(this.IsPotable != null)
			ifcWaterProperties.setIsPotable(this.IsPotable);
		if(this.Hardness != null)
			ifcWaterProperties.setHardness(this.Hardness);
		if(this.AlkalinityConcentration != null)
			ifcWaterProperties.setAlkalinityConcentration(this.AlkalinityConcentration);
		if(this.AcidityConcentration != null)
			ifcWaterProperties.setAcidityConcentration(this.AcidityConcentration);
		if(this.ImpuritiesContent != null)
			ifcWaterProperties.setImpuritiesContent(this.ImpuritiesContent);
		if(this.PHLevel != null)
			ifcWaterProperties.setPHLevel(this.PHLevel);
		if(this.DissolvedSolidsContent != null)
			ifcWaterProperties.setDissolvedSolidsContent(this.DissolvedSolidsContent);
		return ifcWaterProperties;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
