/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcLightSourceSpot<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcLightSourceSpot extends IfcLightSourcePositional implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcColourRgb","IfcNormalisedRatioMeasure","IfcNormalisedRatioMeasure","IfcCartesianPoint","IfcPositiveLengthMeasure","IfcReal","IfcReal","IfcReal","IfcDirection","IfcReal","IfcPositivePlaneAngleMeasure","IfcPositivePlaneAngleMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** Orientation is an DEMANDED attribute - may not be null**/
	protected IfcDirection Orientation;
	/** ConcentrationExponent is an OPTIONAL attribute**/
	protected IfcReal ConcentrationExponent;
	/** SpreadAngle is an DEMANDED attribute - may not be null**/
	protected IfcPositivePlaneAngleMeasure SpreadAngle;
	/** BeamWidthAngle is an DEMANDED attribute - may not be null**/
	protected IfcPositivePlaneAngleMeasure BeamWidthAngle;
	/**
	* The default constructor.
	**/
	public IfcLightSourceSpot(){}

	private static final String[] attributes = new String[]{"Name","LightColour","AmbientIntensity","Intensity"
			,"Position","Radius","ConstantAttenuation","DistanceAttenuation","QuadricAttenuation"
	,"Orientation","ConcentrationExponent","SpreadAngle","BeamWidthAngle"};

	public String[] getAttributes() {
		return IfcLightSourceSpot.attributes;
	}


	/**
	* Constructs a new IfcLightSourceSpot object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param LightColour DEMANDED parameter of type IfcColourRgb - may not be null.
	* @param AmbientIntensity OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Intensity OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Position DEMANDED parameter of type IfcCartesianPoint - may not be null.
	* @param Radius DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param ConstantAttenuation DEMANDED parameter of type IfcReal - may not be null.
	* @param DistanceAttenuation DEMANDED parameter of type IfcReal - may not be null.
	* @param QuadricAttenuation DEMANDED parameter of type IfcReal - may not be null.
	* @param Orientation DEMANDED parameter of type IfcDirection - may not be null.
	* @param ConcentrationExponent OPTIONAL parameter of type IfcReal
	* @param SpreadAngle DEMANDED parameter of type IfcPositivePlaneAngleMeasure - may not be null.
	* @param BeamWidthAngle DEMANDED parameter of type IfcPositivePlaneAngleMeasure - may not be null.
	**/
	public IfcLightSourceSpot(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity, IfcCartesianPoint Position, IfcPositiveLengthMeasure Radius, IfcReal ConstantAttenuation, IfcReal DistanceAttenuation, IfcReal QuadricAttenuation, IfcDirection Orientation, IfcReal ConcentrationExponent, IfcPositivePlaneAngleMeasure SpreadAngle, IfcPositivePlaneAngleMeasure BeamWidthAngle)
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.Radius = Radius;
		this.ConstantAttenuation = ConstantAttenuation;
		this.DistanceAttenuation = DistanceAttenuation;
		this.QuadricAttenuation = QuadricAttenuation;
		this.Orientation = Orientation;
		this.ConcentrationExponent = ConcentrationExponent;
		this.SpreadAngle = SpreadAngle;
		this.BeamWidthAngle = BeamWidthAngle;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcLightSourceSpot object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param LightColour DEMANDED parameter of type IfcColourRgb - may not be null.
	* @param AmbientIntensity OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Intensity OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Position DEMANDED parameter of type IfcCartesianPoint - may not be null.
	* @param Radius DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param ConstantAttenuation DEMANDED parameter of type IfcReal - may not be null.
	* @param DistanceAttenuation DEMANDED parameter of type IfcReal - may not be null.
	* @param QuadricAttenuation DEMANDED parameter of type IfcReal - may not be null.
	* @param Orientation DEMANDED parameter of type IfcDirection - may not be null.
	* @param ConcentrationExponent OPTIONAL parameter of type IfcReal
	* @param SpreadAngle DEMANDED parameter of type IfcPositivePlaneAngleMeasure - may not be null.
	* @param BeamWidthAngle DEMANDED parameter of type IfcPositivePlaneAngleMeasure - may not be null.
	**/
	public void setParameters(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity, IfcCartesianPoint Position, IfcPositiveLengthMeasure Radius, IfcReal ConstantAttenuation, IfcReal DistanceAttenuation, IfcReal QuadricAttenuation, IfcDirection Orientation, IfcReal ConcentrationExponent, IfcPositivePlaneAngleMeasure SpreadAngle, IfcPositivePlaneAngleMeasure BeamWidthAngle)
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.Radius = Radius;
		this.ConstantAttenuation = ConstantAttenuation;
		this.DistanceAttenuation = DistanceAttenuation;
		this.QuadricAttenuation = QuadricAttenuation;
		this.Orientation = Orientation;
		this.ConcentrationExponent = ConcentrationExponent;
		this.SpreadAngle = SpreadAngle;
		this.BeamWidthAngle = BeamWidthAngle;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.LightColour = (IfcColourRgb) parameters.get(1);
		this.AmbientIntensity = (IfcNormalisedRatioMeasure) parameters.get(2);
		this.Intensity = (IfcNormalisedRatioMeasure) parameters.get(3);
		this.Position = (IfcCartesianPoint) parameters.get(4);
		this.Radius = (IfcPositiveLengthMeasure) parameters.get(5);
		this.ConstantAttenuation = (IfcReal) parameters.get(6);
		this.DistanceAttenuation = (IfcReal) parameters.get(7);
		this.QuadricAttenuation = (IfcReal) parameters.get(8);
		this.Orientation = (IfcDirection) parameters.get(9);
		this.ConcentrationExponent = (IfcReal) parameters.get(10);
		this.SpreadAngle = (IfcPositivePlaneAngleMeasure) parameters.get(11);
		this.BeamWidthAngle = (IfcPositivePlaneAngleMeasure) parameters.get(12);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcLightSourceSpot.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCLIGHTSOURCESPOT(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LightColour")) stepString = stepString.concat("*,");
		else{
		if(this.LightColour != null)		stepString = stepString.concat(((RootInterface)this.LightColour).getStepParameter(IfcColourRgb.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AmbientIntensity")) stepString = stepString.concat("*,");
		else{
		if(this.AmbientIntensity != null)		stepString = stepString.concat(((RootInterface)this.AmbientIntensity).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Intensity")) stepString = stepString.concat("*,");
		else{
		if(this.Intensity != null)		stepString = stepString.concat(((RootInterface)this.Intensity).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Position")) stepString = stepString.concat("*,");
		else{
		if(this.Position != null)		stepString = stepString.concat(((RootInterface)this.Position).getStepParameter(IfcCartesianPoint.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Radius")) stepString = stepString.concat("*,");
		else{
		if(this.Radius != null)		stepString = stepString.concat(((RootInterface)this.Radius).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ConstantAttenuation")) stepString = stepString.concat("*,");
		else{
		if(this.ConstantAttenuation != null)		stepString = stepString.concat(((RootInterface)this.ConstantAttenuation).getStepParameter(IfcReal.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DistanceAttenuation")) stepString = stepString.concat("*,");
		else{
		if(this.DistanceAttenuation != null)		stepString = stepString.concat(((RootInterface)this.DistanceAttenuation).getStepParameter(IfcReal.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("QuadricAttenuation")) stepString = stepString.concat("*,");
		else{
		if(this.QuadricAttenuation != null)		stepString = stepString.concat(((RootInterface)this.QuadricAttenuation).getStepParameter(IfcReal.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Orientation")) stepString = stepString.concat("*,");
		else{
		if(this.Orientation != null)		stepString = stepString.concat(((RootInterface)this.Orientation).getStepParameter(IfcDirection.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ConcentrationExponent")) stepString = stepString.concat("*,");
		else{
		if(this.ConcentrationExponent != null)		stepString = stepString.concat(((RootInterface)this.ConcentrationExponent).getStepParameter(IfcReal.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("SpreadAngle")) stepString = stepString.concat("*,");
		else{
		if(this.SpreadAngle != null)		stepString = stepString.concat(((RootInterface)this.SpreadAngle).getStepParameter(IfcPositivePlaneAngleMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BeamWidthAngle")) stepString = stepString.concat("*);");
		else{
		if(this.BeamWidthAngle != null)		stepString = stepString.concat(((RootInterface)this.BeamWidthAngle).getStepParameter(IfcPositivePlaneAngleMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the Orientation attribute to the given value.
	*
	* @param Orientation OPTIONAL value to set
	**/
	public void setOrientation(IfcDirection Orientation)
	{
		this.Orientation = Orientation;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Orientation attribute.
	*
	* @return the value of Orientation
	/**/
	public IfcDirection getOrientation()
	{
		return this.Orientation;
	}

	/**
	* This method sets the ConcentrationExponent attribute to the given value.
	*
	* @param ConcentrationExponent DEMANDED value to set - may not be null
	**/
	public void setConcentrationExponent(IfcReal ConcentrationExponent)
	{
		this.ConcentrationExponent = ConcentrationExponent;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ConcentrationExponent attribute.
	*
	* @return the value of ConcentrationExponent
	/**/
	public IfcReal getConcentrationExponent()
	{
		return this.ConcentrationExponent;
	}

	/**
	* This method sets the SpreadAngle attribute to the given value.
	*
	* @param SpreadAngle OPTIONAL value to set
	**/
	public void setSpreadAngle(IfcPositivePlaneAngleMeasure SpreadAngle)
	{
		this.SpreadAngle = SpreadAngle;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the SpreadAngle attribute.
	*
	* @return the value of SpreadAngle
	/**/
	public IfcPositivePlaneAngleMeasure getSpreadAngle()
	{
		return this.SpreadAngle;
	}

	/**
	* This method sets the BeamWidthAngle attribute to the given value.
	*
	* @param BeamWidthAngle OPTIONAL value to set
	**/
	public void setBeamWidthAngle(IfcPositivePlaneAngleMeasure BeamWidthAngle)
	{
		this.BeamWidthAngle = BeamWidthAngle;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the BeamWidthAngle attribute.
	*
	* @return the value of BeamWidthAngle
	/**/
	public IfcPositivePlaneAngleMeasure getBeamWidthAngle()
	{
		return this.BeamWidthAngle;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcLightSourceSpot ifcLightSourceSpot = new IfcLightSourceSpot();
		if(this.Name != null)
			ifcLightSourceSpot.setName((IfcLabel)this.Name.clone());
		if(this.LightColour != null)
			ifcLightSourceSpot.setLightColour((IfcColourRgb)this.LightColour.clone());
		if(this.AmbientIntensity != null)
			ifcLightSourceSpot.setAmbientIntensity((IfcNormalisedRatioMeasure)this.AmbientIntensity.clone());
		if(this.Intensity != null)
			ifcLightSourceSpot.setIntensity((IfcNormalisedRatioMeasure)this.Intensity.clone());
		if(this.Position != null)
			ifcLightSourceSpot.setPosition((IfcCartesianPoint)this.Position.clone());
		if(this.Radius != null)
			ifcLightSourceSpot.setRadius((IfcPositiveLengthMeasure)this.Radius.clone());
		if(this.ConstantAttenuation != null)
			ifcLightSourceSpot.setConstantAttenuation((IfcReal)this.ConstantAttenuation.clone());
		if(this.DistanceAttenuation != null)
			ifcLightSourceSpot.setDistanceAttenuation((IfcReal)this.DistanceAttenuation.clone());
		if(this.QuadricAttenuation != null)
			ifcLightSourceSpot.setQuadricAttenuation((IfcReal)this.QuadricAttenuation.clone());
		if(this.Orientation != null)
			ifcLightSourceSpot.setOrientation((IfcDirection)this.Orientation.clone());
		if(this.ConcentrationExponent != null)
			ifcLightSourceSpot.setConcentrationExponent((IfcReal)this.ConcentrationExponent.clone());
		if(this.SpreadAngle != null)
			ifcLightSourceSpot.setSpreadAngle((IfcPositivePlaneAngleMeasure)this.SpreadAngle.clone());
		if(this.BeamWidthAngle != null)
			ifcLightSourceSpot.setBeamWidthAngle((IfcPositivePlaneAngleMeasure)this.BeamWidthAngle.clone());
		return ifcLightSourceSpot;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcLightSourceSpot ifcLightSourceSpot = new IfcLightSourceSpot();
		if(this.Name != null)
			ifcLightSourceSpot.setName(this.Name);
		if(this.LightColour != null)
			ifcLightSourceSpot.setLightColour(this.LightColour);
		if(this.AmbientIntensity != null)
			ifcLightSourceSpot.setAmbientIntensity(this.AmbientIntensity);
		if(this.Intensity != null)
			ifcLightSourceSpot.setIntensity(this.Intensity);
		if(this.Position != null)
			ifcLightSourceSpot.setPosition(this.Position);
		if(this.Radius != null)
			ifcLightSourceSpot.setRadius(this.Radius);
		if(this.ConstantAttenuation != null)
			ifcLightSourceSpot.setConstantAttenuation(this.ConstantAttenuation);
		if(this.DistanceAttenuation != null)
			ifcLightSourceSpot.setDistanceAttenuation(this.DistanceAttenuation);
		if(this.QuadricAttenuation != null)
			ifcLightSourceSpot.setQuadricAttenuation(this.QuadricAttenuation);
		if(this.Orientation != null)
			ifcLightSourceSpot.setOrientation(this.Orientation);
		if(this.ConcentrationExponent != null)
			ifcLightSourceSpot.setConcentrationExponent(this.ConcentrationExponent);
		if(this.SpreadAngle != null)
			ifcLightSourceSpot.setSpreadAngle(this.SpreadAngle);
		if(this.BeamWidthAngle != null)
			ifcLightSourceSpot.setBeamWidthAngle(this.BeamWidthAngle);
		return ifcLightSourceSpot;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
