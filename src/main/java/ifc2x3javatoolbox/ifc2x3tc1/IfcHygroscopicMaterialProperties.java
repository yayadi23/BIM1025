/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcHygroscopicMaterialProperties<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcHygroscopicMaterialProperties extends IfcMaterialProperties implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcMaterial","IfcPositiveRatioMeasure","IfcPositiveRatioMeasure","IfcIsothermalMoistureCapacityMeasure","IfcVaporPermeabilityMeasure","IfcMoistureDiffusivityMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** UpperVaporResistanceFactor is an OPTIONAL attribute**/
	protected IfcPositiveRatioMeasure UpperVaporResistanceFactor;
	/** LowerVaporResistanceFactor is an OPTIONAL attribute**/
	protected IfcPositiveRatioMeasure LowerVaporResistanceFactor;
	/** IsothermalMoistureCapacity is an OPTIONAL attribute**/
	protected IfcIsothermalMoistureCapacityMeasure IsothermalMoistureCapacity;
	/** VaporPermeability is an OPTIONAL attribute**/
	protected IfcVaporPermeabilityMeasure VaporPermeability;
	/** MoistureDiffusivity is an OPTIONAL attribute**/
	protected IfcMoistureDiffusivityMeasure MoistureDiffusivity;
	/**
	* The default constructor.
	**/
	public IfcHygroscopicMaterialProperties(){}

	private static final String[] attributes = new String[]{"Material","UpperVaporResistanceFactor","LowerVaporResistanceFactor"
			,"IsothermalMoistureCapacity","VaporPermeability","MoistureDiffusivity"};

	public String[] getAttributes() {
		return IfcHygroscopicMaterialProperties.attributes;
	}

	/**
	* Constructs a new IfcHygroscopicMaterialProperties object using the given parameters.
	*
	* @param Material DEMANDED parameter of type IfcMaterial - may not be null.
	* @param UpperVaporResistanceFactor OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param LowerVaporResistanceFactor OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param IsothermalMoistureCapacity OPTIONAL parameter of type IfcIsothermalMoistureCapacityMeasure
	* @param VaporPermeability OPTIONAL parameter of type IfcVaporPermeabilityMeasure
	* @param MoistureDiffusivity OPTIONAL parameter of type IfcMoistureDiffusivityMeasure
	**/
	public IfcHygroscopicMaterialProperties(IfcMaterial Material, IfcPositiveRatioMeasure UpperVaporResistanceFactor, IfcPositiveRatioMeasure LowerVaporResistanceFactor, IfcIsothermalMoistureCapacityMeasure IsothermalMoistureCapacity, IfcVaporPermeabilityMeasure VaporPermeability, IfcMoistureDiffusivityMeasure MoistureDiffusivity)
	{
		this.Material = Material;
		this.UpperVaporResistanceFactor = UpperVaporResistanceFactor;
		this.LowerVaporResistanceFactor = LowerVaporResistanceFactor;
		this.IsothermalMoistureCapacity = IsothermalMoistureCapacity;
		this.VaporPermeability = VaporPermeability;
		this.MoistureDiffusivity = MoistureDiffusivity;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcHygroscopicMaterialProperties object using the given parameters.
	*
	* @param Material DEMANDED parameter of type IfcMaterial - may not be null.
	* @param UpperVaporResistanceFactor OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param LowerVaporResistanceFactor OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param IsothermalMoistureCapacity OPTIONAL parameter of type IfcIsothermalMoistureCapacityMeasure
	* @param VaporPermeability OPTIONAL parameter of type IfcVaporPermeabilityMeasure
	* @param MoistureDiffusivity OPTIONAL parameter of type IfcMoistureDiffusivityMeasure
	**/
	public void setParameters(IfcMaterial Material, IfcPositiveRatioMeasure UpperVaporResistanceFactor, IfcPositiveRatioMeasure LowerVaporResistanceFactor, IfcIsothermalMoistureCapacityMeasure IsothermalMoistureCapacity, IfcVaporPermeabilityMeasure VaporPermeability, IfcMoistureDiffusivityMeasure MoistureDiffusivity)
	{
		this.Material = Material;
		this.UpperVaporResistanceFactor = UpperVaporResistanceFactor;
		this.LowerVaporResistanceFactor = LowerVaporResistanceFactor;
		this.IsothermalMoistureCapacity = IsothermalMoistureCapacity;
		this.VaporPermeability = VaporPermeability;
		this.MoistureDiffusivity = MoistureDiffusivity;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Material = (IfcMaterial) parameters.get(0);
		this.UpperVaporResistanceFactor = (IfcPositiveRatioMeasure) parameters.get(1);
		this.LowerVaporResistanceFactor = (IfcPositiveRatioMeasure) parameters.get(2);
		this.IsothermalMoistureCapacity = (IfcIsothermalMoistureCapacityMeasure) parameters.get(3);
		this.VaporPermeability = (IfcVaporPermeabilityMeasure) parameters.get(4);
		this.MoistureDiffusivity = (IfcMoistureDiffusivityMeasure) parameters.get(5);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcHygroscopicMaterialProperties.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCHYGROSCOPICMATERIALPROPERTIES(");
		if(getRedefinedDerivedAttributeTypes().contains("Material")) stepString = stepString.concat("*,");
		else{
		if(this.Material != null)		stepString = stepString.concat(((RootInterface)this.Material).getStepParameter(IfcMaterial.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UpperVaporResistanceFactor")) stepString = stepString.concat("*,");
		else{
		if(this.UpperVaporResistanceFactor != null)		stepString = stepString.concat(((RootInterface)this.UpperVaporResistanceFactor).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LowerVaporResistanceFactor")) stepString = stepString.concat("*,");
		else{
		if(this.LowerVaporResistanceFactor != null)		stepString = stepString.concat(((RootInterface)this.LowerVaporResistanceFactor).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("IsothermalMoistureCapacity")) stepString = stepString.concat("*,");
		else{
		if(this.IsothermalMoistureCapacity != null)		stepString = stepString.concat(((RootInterface)this.IsothermalMoistureCapacity).getStepParameter(IfcIsothermalMoistureCapacityMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("VaporPermeability")) stepString = stepString.concat("*,");
		else{
		if(this.VaporPermeability != null)		stepString = stepString.concat(((RootInterface)this.VaporPermeability).getStepParameter(IfcVaporPermeabilityMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MoistureDiffusivity")) stepString = stepString.concat("*);");
		else{
		if(this.MoistureDiffusivity != null)		stepString = stepString.concat(((RootInterface)this.MoistureDiffusivity).getStepParameter(IfcMoistureDiffusivityMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the UpperVaporResistanceFactor attribute to the given value.
	*
	* @param UpperVaporResistanceFactor DEMANDED value to set - may not be null
	**/
	public void setUpperVaporResistanceFactor(IfcPositiveRatioMeasure UpperVaporResistanceFactor)
	{
		this.UpperVaporResistanceFactor = UpperVaporResistanceFactor;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the UpperVaporResistanceFactor attribute.
	*
	* @return the value of UpperVaporResistanceFactor
	/**/
	public IfcPositiveRatioMeasure getUpperVaporResistanceFactor()
	{
		return this.UpperVaporResistanceFactor;
	}

	/**
	* This method sets the LowerVaporResistanceFactor attribute to the given value.
	*
	* @param LowerVaporResistanceFactor DEMANDED value to set - may not be null
	**/
	public void setLowerVaporResistanceFactor(IfcPositiveRatioMeasure LowerVaporResistanceFactor)
	{
		this.LowerVaporResistanceFactor = LowerVaporResistanceFactor;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LowerVaporResistanceFactor attribute.
	*
	* @return the value of LowerVaporResistanceFactor
	/**/
	public IfcPositiveRatioMeasure getLowerVaporResistanceFactor()
	{
		return this.LowerVaporResistanceFactor;
	}

	/**
	* This method sets the IsothermalMoistureCapacity attribute to the given value.
	*
	* @param IsothermalMoistureCapacity DEMANDED value to set - may not be null
	**/
	public void setIsothermalMoistureCapacity(IfcIsothermalMoistureCapacityMeasure IsothermalMoistureCapacity)
	{
		this.IsothermalMoistureCapacity = IsothermalMoistureCapacity;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the IsothermalMoistureCapacity attribute.
	*
	* @return the value of IsothermalMoistureCapacity
	/**/
	public IfcIsothermalMoistureCapacityMeasure getIsothermalMoistureCapacity()
	{
		return this.IsothermalMoistureCapacity;
	}

	/**
	* This method sets the VaporPermeability attribute to the given value.
	*
	* @param VaporPermeability DEMANDED value to set - may not be null
	**/
	public void setVaporPermeability(IfcVaporPermeabilityMeasure VaporPermeability)
	{
		this.VaporPermeability = VaporPermeability;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the VaporPermeability attribute.
	*
	* @return the value of VaporPermeability
	/**/
	public IfcVaporPermeabilityMeasure getVaporPermeability()
	{
		return this.VaporPermeability;
	}

	/**
	* This method sets the MoistureDiffusivity attribute to the given value.
	*
	* @param MoistureDiffusivity DEMANDED value to set - may not be null
	**/
	public void setMoistureDiffusivity(IfcMoistureDiffusivityMeasure MoistureDiffusivity)
	{
		this.MoistureDiffusivity = MoistureDiffusivity;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MoistureDiffusivity attribute.
	*
	* @return the value of MoistureDiffusivity
	/**/
	public IfcMoistureDiffusivityMeasure getMoistureDiffusivity()
	{
		return this.MoistureDiffusivity;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcHygroscopicMaterialProperties ifcHygroscopicMaterialProperties = new IfcHygroscopicMaterialProperties();
		if(this.Material != null)
			ifcHygroscopicMaterialProperties.setMaterial((IfcMaterial)this.Material.clone());
		if(this.UpperVaporResistanceFactor != null)
			ifcHygroscopicMaterialProperties.setUpperVaporResistanceFactor((IfcPositiveRatioMeasure)this.UpperVaporResistanceFactor.clone());
		if(this.LowerVaporResistanceFactor != null)
			ifcHygroscopicMaterialProperties.setLowerVaporResistanceFactor((IfcPositiveRatioMeasure)this.LowerVaporResistanceFactor.clone());
		if(this.IsothermalMoistureCapacity != null)
			ifcHygroscopicMaterialProperties.setIsothermalMoistureCapacity((IfcIsothermalMoistureCapacityMeasure)this.IsothermalMoistureCapacity.clone());
		if(this.VaporPermeability != null)
			ifcHygroscopicMaterialProperties.setVaporPermeability((IfcVaporPermeabilityMeasure)this.VaporPermeability.clone());
		if(this.MoistureDiffusivity != null)
			ifcHygroscopicMaterialProperties.setMoistureDiffusivity((IfcMoistureDiffusivityMeasure)this.MoistureDiffusivity.clone());
		return ifcHygroscopicMaterialProperties;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcHygroscopicMaterialProperties ifcHygroscopicMaterialProperties = new IfcHygroscopicMaterialProperties();
		if(this.Material != null)
			ifcHygroscopicMaterialProperties.setMaterial(this.Material);
		if(this.UpperVaporResistanceFactor != null)
			ifcHygroscopicMaterialProperties.setUpperVaporResistanceFactor(this.UpperVaporResistanceFactor);
		if(this.LowerVaporResistanceFactor != null)
			ifcHygroscopicMaterialProperties.setLowerVaporResistanceFactor(this.LowerVaporResistanceFactor);
		if(this.IsothermalMoistureCapacity != null)
			ifcHygroscopicMaterialProperties.setIsothermalMoistureCapacity(this.IsothermalMoistureCapacity);
		if(this.VaporPermeability != null)
			ifcHygroscopicMaterialProperties.setVaporPermeability(this.VaporPermeability);
		if(this.MoistureDiffusivity != null)
			ifcHygroscopicMaterialProperties.setMoistureDiffusivity(this.MoistureDiffusivity);
		return ifcHygroscopicMaterialProperties;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
