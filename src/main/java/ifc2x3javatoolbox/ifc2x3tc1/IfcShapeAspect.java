/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcShapeAspect<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcShapeAspect extends InternalAccessClass implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"LIST<IfcShapeModel>","IfcLabel","IfcText","LOGICAL","IfcProductDefinitionShape"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** ShapeRepresentations is an DEMANDED attribute - may not be null**/
	protected LIST<IfcShapeModel> ShapeRepresentations;
	/** Name is an OPTIONAL attribute**/
	protected IfcLabel Name;
	/** Description is an OPTIONAL attribute**/
	protected IfcText Description;
	/** ProductDefinitional is an DEMANDED attribute - may not be null**/
	protected LOGICAL ProductDefinitional;
	/** PartOfProductDefinitionShape is an DEMANDED attribute - may not be null**/
	protected IfcProductDefinitionShape PartOfProductDefinitionShape;
	/**
	* The default constructor.
	**/
	public IfcShapeAspect(){}

	private static final String[] attributes = new String[]{"ShapeRepresentations","Name","Description","ProductDefinitional","PartOfProductDefinitionShape"};

	public String[] getAttributes(){
		return IfcShapeAspect.attributes;
	}
	/**
	* Constructs a new IfcShapeAspect object using the given parameters.
	*
	* @param ShapeRepresentations DEMANDED parameter of type LIST<IfcShapeModel> - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ProductDefinitional DEMANDED parameter of type LOGICAL - may not be null.
	* @param PartOfProductDefinitionShape DEMANDED parameter of type IfcProductDefinitionShape - may not be null.
	**/
	public IfcShapeAspect(LIST<IfcShapeModel> ShapeRepresentations, IfcLabel Name, IfcText Description, LOGICAL ProductDefinitional, IfcProductDefinitionShape PartOfProductDefinitionShape)
	{
		this.ShapeRepresentations = ShapeRepresentations;
		this.Name = Name;
		this.Description = Description;
		this.ProductDefinitional = ProductDefinitional;
		this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcShapeAspect object using the given parameters.
	*
	* @param ShapeRepresentations DEMANDED parameter of type LIST<IfcShapeModel> - may not be null.
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ProductDefinitional DEMANDED parameter of type LOGICAL - may not be null.
	* @param PartOfProductDefinitionShape DEMANDED parameter of type IfcProductDefinitionShape - may not be null.
	**/
	public void setParameters(LIST<IfcShapeModel> ShapeRepresentations, IfcLabel Name, IfcText Description, LOGICAL ProductDefinitional, IfcProductDefinitionShape PartOfProductDefinitionShape)
	{
		this.ShapeRepresentations = ShapeRepresentations;
		this.Name = Name;
		this.Description = Description;
		this.ProductDefinitional = ProductDefinitional;
		this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.ShapeRepresentations = (LIST<IfcShapeModel>) parameters.get(0);
		this.Name = (IfcLabel) parameters.get(1);
		this.Description = (IfcText) parameters.get(2);
		this.ProductDefinitional = (LOGICAL) parameters.get(3);
		this.PartOfProductDefinitionShape = (IfcProductDefinitionShape) parameters.get(4);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(ShapeRepresentations != null)
		{
			for(IfcShapeModel ShapeRepresentations$ : ShapeRepresentations)
			{
				if(ShapeRepresentations$.OfShapeAspect_Inverse == null)
				{
					ShapeRepresentations$.OfShapeAspect_Inverse = new SET<IfcShapeAspect>();
				}
				ShapeRepresentations$.OfShapeAspect_Inverse.add(this);
			}
		}
		if(PartOfProductDefinitionShape != null)
		{
				if(PartOfProductDefinitionShape.HasShapeAspects_Inverse == null)
				{
					PartOfProductDefinitionShape.HasShapeAspects_Inverse = new SET<IfcShapeAspect>();
				}
				PartOfProductDefinitionShape.HasShapeAspects_Inverse.add(this);
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcShapeAspect.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSHAPEASPECT(");
		if(getRedefinedDerivedAttributeTypes().contains("ShapeRepresentations")) stepString = stepString.concat("*,");
		else{
		if(this.ShapeRepresentations != null)		stepString = stepString.concat(((RootInterface)this.ShapeRepresentations).getStepParameter(IfcShapeModel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ProductDefinitional")) stepString = stepString.concat("*,");
		else{
		if(this.ProductDefinitional != null)		stepString = stepString.concat(((RootInterface)this.ProductDefinitional).getStepParameter(LOGICAL.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PartOfProductDefinitionShape")) stepString = stepString.concat("*);");
		else{
		if(this.PartOfProductDefinitionShape != null)		stepString = stepString.concat(((RootInterface)this.PartOfProductDefinitionShape).getStepParameter(IfcProductDefinitionShape.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the ShapeRepresentations attribute to the given value.
	*
	* @param ShapeRepresentations OPTIONAL value to set
	**/
	public void setShapeRepresentations(LIST<IfcShapeModel> ShapeRepresentations)
	{
		synchronizeInversesRemoveShapeRepresentations(this.ShapeRepresentations);
		this.ShapeRepresentations = ShapeRepresentations;
		synchronizeInversesAddShapeRepresentations(this.ShapeRepresentations);
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the ShapeRepresentations attribute.
	*
	* @return a copy of the ShapeRepresentations list
	**/
	public LIST<IfcShapeModel> getShapeRepresentations()
	{
		if(this.ShapeRepresentations != null)
			return new LIST<IfcShapeModel>(this.ShapeRepresentations);
		return null;
	}

	/**
	* This method adds an IfcShapeModel object to the ShapeRepresentations list.
	* @param ShapeRepresentations element to be appended to this list.
	**/
	public void addShapeRepresentations(IfcShapeModel ShapeRepresentations)
	{
		if(this.ShapeRepresentations == null)
			this.ShapeRepresentations = new LIST<IfcShapeModel>();
		this.ShapeRepresentations.add(ShapeRepresentations);
		synchronizeInversesAddShapeRepresentations(ShapeRepresentations);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcShapeModel objects to the ShapeRepresentations list.
	* @param ShapeRepresentations collection containing elements to be added to this list.
	**/
	public void addAllShapeRepresentations(java.util.Collection<IfcShapeModel> ShapeRepresentations)
	{
		if(this.ShapeRepresentations == null)
			this.ShapeRepresentations = new LIST<IfcShapeModel>();
		this.ShapeRepresentations.addAll(ShapeRepresentations);
		synchronizeInversesAddShapeRepresentations(ShapeRepresentations);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the ShapeRepresentations list.
	**/
	public void clearShapeRepresentations()
	{
		if(this.ShapeRepresentations != null)
		{
			synchronizeInversesRemoveShapeRepresentations(this.ShapeRepresentations);
			this.ShapeRepresentations.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcShapeModel object from the ShapeRepresentations list.
	* @param ShapeRepresentations element to be removed from this list.
	**/
	public void removeShapeRepresentations(IfcShapeModel ShapeRepresentations)
	{
		if(this.ShapeRepresentations != null)
		{
			this.ShapeRepresentations.remove(ShapeRepresentations);
			synchronizeInversesRemoveShapeRepresentations(ShapeRepresentations);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcShapeModel objects from the ShapeRepresentations list.
	* @param ShapeRepresentations collection containing elements to be removed from this list.
	**/
	public void removeAllShapeRepresentations(java.util.Collection<IfcShapeModel> ShapeRepresentations)
	{
		if(this.ShapeRepresentations != null)
		{
			this.ShapeRepresentations.removeAll(ShapeRepresentations);
			synchronizeInversesRemoveShapeRepresentations(ShapeRepresentations);
			fireChangeEvent();
		}
	}

	private void synchronizeInversesAddShapeRepresentations(IfcShapeModel ShapeRepresentations)
	{
		if(ShapeRepresentations != null)
		{
				if(ShapeRepresentations.OfShapeAspect_Inverse == null)
				{
					ShapeRepresentations.OfShapeAspect_Inverse = new SET<IfcShapeAspect>();
				}
				ShapeRepresentations.OfShapeAspect_Inverse.add(this);
		}
	}

	private void synchronizeInversesAddShapeRepresentations(java.util.Collection<IfcShapeModel> ShapeRepresentations)
	{
		if(ShapeRepresentations != null)
		{
			for(IfcShapeModel ShapeRepresentations$ : ShapeRepresentations)
			{
				synchronizeInversesAddShapeRepresentations(ShapeRepresentations$);
			}
		}
	}

	private void synchronizeInversesRemoveShapeRepresentations(IfcShapeModel ShapeRepresentations)
	{
		if(ShapeRepresentations != null)
		{
				if(ShapeRepresentations.OfShapeAspect_Inverse != null)
				{
					ShapeRepresentations.OfShapeAspect_Inverse.remove(this);
				}
		}
	}

	private void synchronizeInversesRemoveShapeRepresentations(java.util.Collection<IfcShapeModel> ShapeRepresentations)
	{
		if(ShapeRepresentations != null)
		{
			for(IfcShapeModel ShapeRepresentations$ : ShapeRepresentations)
			{
				synchronizeInversesRemoveShapeRepresentations(ShapeRepresentations$);
			}
		}
	}

	/**
	* This method sets the Name attribute to the given value.
	*
	* @param Name DEMANDED value to set - may not be null
	**/
	public void setName(IfcLabel Name)
	{
		this.Name = Name;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Name attribute.
	*
	* @return the value of Name
	/**/
	public IfcLabel getName()
	{
		return this.Name;
	}

	/**
	* This method sets the Description attribute to the given value.
	*
	* @param Description DEMANDED value to set - may not be null
	**/
	public void setDescription(IfcText Description)
	{
		this.Description = Description;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Description attribute.
	*
	* @return the value of Description
	/**/
	public IfcText getDescription()
	{
		return this.Description;
	}

	/**
	* This method sets the ProductDefinitional attribute to the given value.
	*
	* @param ProductDefinitional OPTIONAL value to set
	**/
	public void setProductDefinitional(LOGICAL ProductDefinitional)
	{
		this.ProductDefinitional = ProductDefinitional;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ProductDefinitional attribute.
	*
	* @return the value of ProductDefinitional
	/**/
	public LOGICAL getProductDefinitional()
	{
		return this.ProductDefinitional;
	}

	/**
	* This method sets the PartOfProductDefinitionShape attribute to the given value.
	*
	* @param PartOfProductDefinitionShape OPTIONAL value to set
	**/
	public void setPartOfProductDefinitionShape(IfcProductDefinitionShape PartOfProductDefinitionShape)
	{
		synchronizeInversesRemovePartOfProductDefinitionShape(this.PartOfProductDefinitionShape);
		this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
		synchronizeInversesAddPartOfProductDefinitionShape(this.PartOfProductDefinitionShape);
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PartOfProductDefinitionShape attribute.
	*
	* @return the value of PartOfProductDefinitionShape
	/**/
	public IfcProductDefinitionShape getPartOfProductDefinitionShape()
	{
		return this.PartOfProductDefinitionShape;
	}

	private void synchronizeInversesAddPartOfProductDefinitionShape(IfcProductDefinitionShape PartOfProductDefinitionShape)
	{
		if(PartOfProductDefinitionShape != null)
		{
				if(PartOfProductDefinitionShape.HasShapeAspects_Inverse == null)
				{
					PartOfProductDefinitionShape.HasShapeAspects_Inverse = new SET<IfcShapeAspect>();
				}
				PartOfProductDefinitionShape.HasShapeAspects_Inverse.add(this);
		}
	}

	private void synchronizeInversesRemovePartOfProductDefinitionShape(IfcProductDefinitionShape PartOfProductDefinitionShape)
	{
		if(PartOfProductDefinitionShape != null)
		{
				if(PartOfProductDefinitionShape.HasShapeAspects_Inverse != null)
				{
					PartOfProductDefinitionShape.HasShapeAspects_Inverse.remove(this);
				}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcShapeAspect ifcShapeAspect = new IfcShapeAspect();
		if(this.ShapeRepresentations != null)
			ifcShapeAspect.setShapeRepresentations((LIST<IfcShapeModel>)this.ShapeRepresentations.clone());
		if(this.Name != null)
			ifcShapeAspect.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcShapeAspect.setDescription((IfcText)this.Description.clone());
		if(this.ProductDefinitional != null)
			ifcShapeAspect.setProductDefinitional((LOGICAL)this.ProductDefinitional.clone());
		if(this.PartOfProductDefinitionShape != null)
			ifcShapeAspect.setPartOfProductDefinitionShape((IfcProductDefinitionShape)this.PartOfProductDefinitionShape.clone());
		return ifcShapeAspect;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcShapeAspect ifcShapeAspect = new IfcShapeAspect();
		if(this.ShapeRepresentations != null)
			ifcShapeAspect.setShapeRepresentations(this.ShapeRepresentations);
		if(this.Name != null)
			ifcShapeAspect.setName(this.Name);
		if(this.Description != null)
			ifcShapeAspect.setDescription(this.Description);
		if(this.ProductDefinitional != null)
			ifcShapeAspect.setProductDefinitional(this.ProductDefinitional);
		if(this.PartOfProductDefinitionShape != null)
			ifcShapeAspect.setPartOfProductDefinitionShape(this.PartOfProductDefinitionShape);
		return ifcShapeAspect;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
