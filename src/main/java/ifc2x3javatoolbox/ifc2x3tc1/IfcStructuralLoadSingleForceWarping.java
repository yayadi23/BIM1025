/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcStructuralLoadSingleForceWarping<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcStructuralLoadSingleForceWarping extends IfcStructuralLoadSingleForce implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcForceMeasure","IfcForceMeasure","IfcForceMeasure","IfcTorqueMeasure","IfcTorqueMeasure","IfcTorqueMeasure","IfcWarpingMomentMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** WarpingMoment is an OPTIONAL attribute**/
	protected IfcWarpingMomentMeasure WarpingMoment;
	/**
	* The default constructor.
	**/
	public IfcStructuralLoadSingleForceWarping(){}

	private static final String[] attributes = new String[]{"Name","ForceX","ForceY","ForceZ","MomentX","MomentY","MomentZ","WarpingMoment"};

	public String[] getAttributes(){
		return IfcStructuralLoadSingleForceWarping.attributes;
	}

	/**
	* Constructs a new IfcStructuralLoadSingleForceWarping object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param ForceX OPTIONAL parameter of type IfcForceMeasure
	* @param ForceY OPTIONAL parameter of type IfcForceMeasure
	* @param ForceZ OPTIONAL parameter of type IfcForceMeasure
	* @param MomentX OPTIONAL parameter of type IfcTorqueMeasure
	* @param MomentY OPTIONAL parameter of type IfcTorqueMeasure
	* @param MomentZ OPTIONAL parameter of type IfcTorqueMeasure
	* @param WarpingMoment OPTIONAL parameter of type IfcWarpingMomentMeasure
	**/
	public IfcStructuralLoadSingleForceWarping(IfcLabel Name, IfcForceMeasure ForceX, IfcForceMeasure ForceY, IfcForceMeasure ForceZ, IfcTorqueMeasure MomentX, IfcTorqueMeasure MomentY, IfcTorqueMeasure MomentZ, IfcWarpingMomentMeasure WarpingMoment)
	{
		this.Name = Name;
		this.ForceX = ForceX;
		this.ForceY = ForceY;
		this.ForceZ = ForceZ;
		this.MomentX = MomentX;
		this.MomentY = MomentY;
		this.MomentZ = MomentZ;
		this.WarpingMoment = WarpingMoment;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcStructuralLoadSingleForceWarping object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param ForceX OPTIONAL parameter of type IfcForceMeasure
	* @param ForceY OPTIONAL parameter of type IfcForceMeasure
	* @param ForceZ OPTIONAL parameter of type IfcForceMeasure
	* @param MomentX OPTIONAL parameter of type IfcTorqueMeasure
	* @param MomentY OPTIONAL parameter of type IfcTorqueMeasure
	* @param MomentZ OPTIONAL parameter of type IfcTorqueMeasure
	* @param WarpingMoment OPTIONAL parameter of type IfcWarpingMomentMeasure
	**/
	public void setParameters(IfcLabel Name, IfcForceMeasure ForceX, IfcForceMeasure ForceY, IfcForceMeasure ForceZ, IfcTorqueMeasure MomentX, IfcTorqueMeasure MomentY, IfcTorqueMeasure MomentZ, IfcWarpingMomentMeasure WarpingMoment)
	{
		this.Name = Name;
		this.ForceX = ForceX;
		this.ForceY = ForceY;
		this.ForceZ = ForceZ;
		this.MomentX = MomentX;
		this.MomentY = MomentY;
		this.MomentZ = MomentZ;
		this.WarpingMoment = WarpingMoment;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.ForceX = (IfcForceMeasure) parameters.get(1);
		this.ForceY = (IfcForceMeasure) parameters.get(2);
		this.ForceZ = (IfcForceMeasure) parameters.get(3);
		this.MomentX = (IfcTorqueMeasure) parameters.get(4);
		this.MomentY = (IfcTorqueMeasure) parameters.get(5);
		this.MomentZ = (IfcTorqueMeasure) parameters.get(6);
		this.WarpingMoment = (IfcWarpingMomentMeasure) parameters.get(7);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcStructuralLoadSingleForceWarping.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSTRUCTURALLOADSINGLEFORCEWARPING(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ForceX")) stepString = stepString.concat("*,");
		else{
		if(this.ForceX != null)		stepString = stepString.concat(((RootInterface)this.ForceX).getStepParameter(IfcForceMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ForceY")) stepString = stepString.concat("*,");
		else{
		if(this.ForceY != null)		stepString = stepString.concat(((RootInterface)this.ForceY).getStepParameter(IfcForceMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ForceZ")) stepString = stepString.concat("*,");
		else{
		if(this.ForceZ != null)		stepString = stepString.concat(((RootInterface)this.ForceZ).getStepParameter(IfcForceMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MomentX")) stepString = stepString.concat("*,");
		else{
		if(this.MomentX != null)		stepString = stepString.concat(((RootInterface)this.MomentX).getStepParameter(IfcTorqueMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MomentY")) stepString = stepString.concat("*,");
		else{
		if(this.MomentY != null)		stepString = stepString.concat(((RootInterface)this.MomentY).getStepParameter(IfcTorqueMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MomentZ")) stepString = stepString.concat("*,");
		else{
		if(this.MomentZ != null)		stepString = stepString.concat(((RootInterface)this.MomentZ).getStepParameter(IfcTorqueMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WarpingMoment")) stepString = stepString.concat("*);");
		else{
		if(this.WarpingMoment != null)		stepString = stepString.concat(((RootInterface)this.WarpingMoment).getStepParameter(IfcWarpingMomentMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the WarpingMoment attribute to the given value.
	*
	* @param WarpingMoment DEMANDED value to set - may not be null
	**/
	public void setWarpingMoment(IfcWarpingMomentMeasure WarpingMoment)
	{
		this.WarpingMoment = WarpingMoment;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the WarpingMoment attribute.
	*
	* @return the value of WarpingMoment
	/**/
	public IfcWarpingMomentMeasure getWarpingMoment()
	{
		return this.WarpingMoment;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcStructuralLoadSingleForceWarping ifcStructuralLoadSingleForceWarping = new IfcStructuralLoadSingleForceWarping();
		if(this.Name != null)
			ifcStructuralLoadSingleForceWarping.setName((IfcLabel)this.Name.clone());
		if(this.ForceX != null)
			ifcStructuralLoadSingleForceWarping.setForceX((IfcForceMeasure)this.ForceX.clone());
		if(this.ForceY != null)
			ifcStructuralLoadSingleForceWarping.setForceY((IfcForceMeasure)this.ForceY.clone());
		if(this.ForceZ != null)
			ifcStructuralLoadSingleForceWarping.setForceZ((IfcForceMeasure)this.ForceZ.clone());
		if(this.MomentX != null)
			ifcStructuralLoadSingleForceWarping.setMomentX((IfcTorqueMeasure)this.MomentX.clone());
		if(this.MomentY != null)
			ifcStructuralLoadSingleForceWarping.setMomentY((IfcTorqueMeasure)this.MomentY.clone());
		if(this.MomentZ != null)
			ifcStructuralLoadSingleForceWarping.setMomentZ((IfcTorqueMeasure)this.MomentZ.clone());
		if(this.WarpingMoment != null)
			ifcStructuralLoadSingleForceWarping.setWarpingMoment((IfcWarpingMomentMeasure)this.WarpingMoment.clone());
		return ifcStructuralLoadSingleForceWarping;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcStructuralLoadSingleForceWarping ifcStructuralLoadSingleForceWarping = new IfcStructuralLoadSingleForceWarping();
		if(this.Name != null)
			ifcStructuralLoadSingleForceWarping.setName(this.Name);
		if(this.ForceX != null)
			ifcStructuralLoadSingleForceWarping.setForceX(this.ForceX);
		if(this.ForceY != null)
			ifcStructuralLoadSingleForceWarping.setForceY(this.ForceY);
		if(this.ForceZ != null)
			ifcStructuralLoadSingleForceWarping.setForceZ(this.ForceZ);
		if(this.MomentX != null)
			ifcStructuralLoadSingleForceWarping.setMomentX(this.MomentX);
		if(this.MomentY != null)
			ifcStructuralLoadSingleForceWarping.setMomentY(this.MomentY);
		if(this.MomentZ != null)
			ifcStructuralLoadSingleForceWarping.setMomentZ(this.MomentZ);
		if(this.WarpingMoment != null)
			ifcStructuralLoadSingleForceWarping.setWarpingMoment(this.WarpingMoment);
		return ifcStructuralLoadSingleForceWarping;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
