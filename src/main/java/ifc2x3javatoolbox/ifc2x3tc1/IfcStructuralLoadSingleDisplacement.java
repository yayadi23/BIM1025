/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcStructuralLoadSingleDisplacement<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcStructuralLoadSingleDisplacement extends IfcStructuralLoadStatic implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcLengthMeasure","IfcLengthMeasure","IfcLengthMeasure","IfcPlaneAngleMeasure","IfcPlaneAngleMeasure","IfcPlaneAngleMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** DisplacementX is an OPTIONAL attribute**/
	protected IfcLengthMeasure DisplacementX;
	/** DisplacementY is an OPTIONAL attribute**/
	protected IfcLengthMeasure DisplacementY;
	/** DisplacementZ is an OPTIONAL attribute**/
	protected IfcLengthMeasure DisplacementZ;
	/** RotationalDisplacementRX is an OPTIONAL attribute**/
	protected IfcPlaneAngleMeasure RotationalDisplacementRX;
	/** RotationalDisplacementRY is an OPTIONAL attribute**/
	protected IfcPlaneAngleMeasure RotationalDisplacementRY;
	/** RotationalDisplacementRZ is an OPTIONAL attribute**/
	protected IfcPlaneAngleMeasure RotationalDisplacementRZ;
	/**
	* The default constructor.
	**/
	public IfcStructuralLoadSingleDisplacement(){}

	private static final String[] attributes = new String[]{"Name","DisplacementX","DisplacementY","DisplacementZ","RotationalDisplacementRX","RotationalDisplacementRY","RotationalDisplacementRZ"};

	public String[] getAttributes(){
		return IfcStructuralLoadSingleDisplacement.attributes;
	}


	/**
	* Constructs a new IfcStructuralLoadSingleDisplacement object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param DisplacementX OPTIONAL parameter of type IfcLengthMeasure
	* @param DisplacementY OPTIONAL parameter of type IfcLengthMeasure
	* @param DisplacementZ OPTIONAL parameter of type IfcLengthMeasure
	* @param RotationalDisplacementRX OPTIONAL parameter of type IfcPlaneAngleMeasure
	* @param RotationalDisplacementRY OPTIONAL parameter of type IfcPlaneAngleMeasure
	* @param RotationalDisplacementRZ OPTIONAL parameter of type IfcPlaneAngleMeasure
	**/
	public IfcStructuralLoadSingleDisplacement(IfcLabel Name, IfcLengthMeasure DisplacementX, IfcLengthMeasure DisplacementY, IfcLengthMeasure DisplacementZ, IfcPlaneAngleMeasure RotationalDisplacementRX, IfcPlaneAngleMeasure RotationalDisplacementRY, IfcPlaneAngleMeasure RotationalDisplacementRZ)
	{
		this.Name = Name;
		this.DisplacementX = DisplacementX;
		this.DisplacementY = DisplacementY;
		this.DisplacementZ = DisplacementZ;
		this.RotationalDisplacementRX = RotationalDisplacementRX;
		this.RotationalDisplacementRY = RotationalDisplacementRY;
		this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcStructuralLoadSingleDisplacement object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param DisplacementX OPTIONAL parameter of type IfcLengthMeasure
	* @param DisplacementY OPTIONAL parameter of type IfcLengthMeasure
	* @param DisplacementZ OPTIONAL parameter of type IfcLengthMeasure
	* @param RotationalDisplacementRX OPTIONAL parameter of type IfcPlaneAngleMeasure
	* @param RotationalDisplacementRY OPTIONAL parameter of type IfcPlaneAngleMeasure
	* @param RotationalDisplacementRZ OPTIONAL parameter of type IfcPlaneAngleMeasure
	**/
	public void setParameters(IfcLabel Name, IfcLengthMeasure DisplacementX, IfcLengthMeasure DisplacementY, IfcLengthMeasure DisplacementZ, IfcPlaneAngleMeasure RotationalDisplacementRX, IfcPlaneAngleMeasure RotationalDisplacementRY, IfcPlaneAngleMeasure RotationalDisplacementRZ)
	{
		this.Name = Name;
		this.DisplacementX = DisplacementX;
		this.DisplacementY = DisplacementY;
		this.DisplacementZ = DisplacementZ;
		this.RotationalDisplacementRX = RotationalDisplacementRX;
		this.RotationalDisplacementRY = RotationalDisplacementRY;
		this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.DisplacementX = (IfcLengthMeasure) parameters.get(1);
		this.DisplacementY = (IfcLengthMeasure) parameters.get(2);
		this.DisplacementZ = (IfcLengthMeasure) parameters.get(3);
		this.RotationalDisplacementRX = (IfcPlaneAngleMeasure) parameters.get(4);
		this.RotationalDisplacementRY = (IfcPlaneAngleMeasure) parameters.get(5);
		this.RotationalDisplacementRZ = (IfcPlaneAngleMeasure) parameters.get(6);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcStructuralLoadSingleDisplacement.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSTRUCTURALLOADSINGLEDISPLACEMENT(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DisplacementX")) stepString = stepString.concat("*,");
		else{
		if(this.DisplacementX != null)		stepString = stepString.concat(((RootInterface)this.DisplacementX).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DisplacementY")) stepString = stepString.concat("*,");
		else{
		if(this.DisplacementY != null)		stepString = stepString.concat(((RootInterface)this.DisplacementY).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DisplacementZ")) stepString = stepString.concat("*,");
		else{
		if(this.DisplacementZ != null)		stepString = stepString.concat(((RootInterface)this.DisplacementZ).getStepParameter(IfcLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RotationalDisplacementRX")) stepString = stepString.concat("*,");
		else{
		if(this.RotationalDisplacementRX != null)		stepString = stepString.concat(((RootInterface)this.RotationalDisplacementRX).getStepParameter(IfcPlaneAngleMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RotationalDisplacementRY")) stepString = stepString.concat("*,");
		else{
		if(this.RotationalDisplacementRY != null)		stepString = stepString.concat(((RootInterface)this.RotationalDisplacementRY).getStepParameter(IfcPlaneAngleMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RotationalDisplacementRZ")) stepString = stepString.concat("*);");
		else{
		if(this.RotationalDisplacementRZ != null)		stepString = stepString.concat(((RootInterface)this.RotationalDisplacementRZ).getStepParameter(IfcPlaneAngleMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the DisplacementX attribute to the given value.
	*
	* @param DisplacementX DEMANDED value to set - may not be null
	**/
	public void setDisplacementX(IfcLengthMeasure DisplacementX)
	{
		this.DisplacementX = DisplacementX;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the DisplacementX attribute.
	*
	* @return the value of DisplacementX
	/**/
	public IfcLengthMeasure getDisplacementX()
	{
		return this.DisplacementX;
	}

	/**
	* This method sets the DisplacementY attribute to the given value.
	*
	* @param DisplacementY DEMANDED value to set - may not be null
	**/
	public void setDisplacementY(IfcLengthMeasure DisplacementY)
	{
		this.DisplacementY = DisplacementY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the DisplacementY attribute.
	*
	* @return the value of DisplacementY
	/**/
	public IfcLengthMeasure getDisplacementY()
	{
		return this.DisplacementY;
	}

	/**
	* This method sets the DisplacementZ attribute to the given value.
	*
	* @param DisplacementZ DEMANDED value to set - may not be null
	**/
	public void setDisplacementZ(IfcLengthMeasure DisplacementZ)
	{
		this.DisplacementZ = DisplacementZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the DisplacementZ attribute.
	*
	* @return the value of DisplacementZ
	/**/
	public IfcLengthMeasure getDisplacementZ()
	{
		return this.DisplacementZ;
	}

	/**
	* This method sets the RotationalDisplacementRX attribute to the given value.
	*
	* @param RotationalDisplacementRX DEMANDED value to set - may not be null
	**/
	public void setRotationalDisplacementRX(IfcPlaneAngleMeasure RotationalDisplacementRX)
	{
		this.RotationalDisplacementRX = RotationalDisplacementRX;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RotationalDisplacementRX attribute.
	*
	* @return the value of RotationalDisplacementRX
	/**/
	public IfcPlaneAngleMeasure getRotationalDisplacementRX()
	{
		return this.RotationalDisplacementRX;
	}

	/**
	* This method sets the RotationalDisplacementRY attribute to the given value.
	*
	* @param RotationalDisplacementRY DEMANDED value to set - may not be null
	**/
	public void setRotationalDisplacementRY(IfcPlaneAngleMeasure RotationalDisplacementRY)
	{
		this.RotationalDisplacementRY = RotationalDisplacementRY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RotationalDisplacementRY attribute.
	*
	* @return the value of RotationalDisplacementRY
	/**/
	public IfcPlaneAngleMeasure getRotationalDisplacementRY()
	{
		return this.RotationalDisplacementRY;
	}

	/**
	* This method sets the RotationalDisplacementRZ attribute to the given value.
	*
	* @param RotationalDisplacementRZ DEMANDED value to set - may not be null
	**/
	public void setRotationalDisplacementRZ(IfcPlaneAngleMeasure RotationalDisplacementRZ)
	{
		this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RotationalDisplacementRZ attribute.
	*
	* @return the value of RotationalDisplacementRZ
	/**/
	public IfcPlaneAngleMeasure getRotationalDisplacementRZ()
	{
		return this.RotationalDisplacementRZ;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcStructuralLoadSingleDisplacement ifcStructuralLoadSingleDisplacement = new IfcStructuralLoadSingleDisplacement();
		if(this.Name != null)
			ifcStructuralLoadSingleDisplacement.setName((IfcLabel)this.Name.clone());
		if(this.DisplacementX != null)
			ifcStructuralLoadSingleDisplacement.setDisplacementX((IfcLengthMeasure)this.DisplacementX.clone());
		if(this.DisplacementY != null)
			ifcStructuralLoadSingleDisplacement.setDisplacementY((IfcLengthMeasure)this.DisplacementY.clone());
		if(this.DisplacementZ != null)
			ifcStructuralLoadSingleDisplacement.setDisplacementZ((IfcLengthMeasure)this.DisplacementZ.clone());
		if(this.RotationalDisplacementRX != null)
			ifcStructuralLoadSingleDisplacement.setRotationalDisplacementRX((IfcPlaneAngleMeasure)this.RotationalDisplacementRX.clone());
		if(this.RotationalDisplacementRY != null)
			ifcStructuralLoadSingleDisplacement.setRotationalDisplacementRY((IfcPlaneAngleMeasure)this.RotationalDisplacementRY.clone());
		if(this.RotationalDisplacementRZ != null)
			ifcStructuralLoadSingleDisplacement.setRotationalDisplacementRZ((IfcPlaneAngleMeasure)this.RotationalDisplacementRZ.clone());
		return ifcStructuralLoadSingleDisplacement;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcStructuralLoadSingleDisplacement ifcStructuralLoadSingleDisplacement = new IfcStructuralLoadSingleDisplacement();
		if(this.Name != null)
			ifcStructuralLoadSingleDisplacement.setName(this.Name);
		if(this.DisplacementX != null)
			ifcStructuralLoadSingleDisplacement.setDisplacementX(this.DisplacementX);
		if(this.DisplacementY != null)
			ifcStructuralLoadSingleDisplacement.setDisplacementY(this.DisplacementY);
		if(this.DisplacementZ != null)
			ifcStructuralLoadSingleDisplacement.setDisplacementZ(this.DisplacementZ);
		if(this.RotationalDisplacementRX != null)
			ifcStructuralLoadSingleDisplacement.setRotationalDisplacementRX(this.RotationalDisplacementRX);
		if(this.RotationalDisplacementRY != null)
			ifcStructuralLoadSingleDisplacement.setRotationalDisplacementRY(this.RotationalDisplacementRY);
		if(this.RotationalDisplacementRZ != null)
			ifcStructuralLoadSingleDisplacement.setRotationalDisplacementRZ(this.RotationalDisplacementRZ);
		return ifcStructuralLoadSingleDisplacement;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
