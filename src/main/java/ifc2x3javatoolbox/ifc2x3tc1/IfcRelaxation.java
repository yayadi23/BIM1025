/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcRelaxation<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcRelaxation extends InternalAccessClass implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcNormalisedRatioMeasure","IfcNormalisedRatioMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** RelaxationValue is an DEMANDED attribute - may not be null**/
	protected IfcNormalisedRatioMeasure RelaxationValue;
	/** InitialStress is an DEMANDED attribute - may not be null**/
	protected IfcNormalisedRatioMeasure InitialStress;
	/**
	* The default constructor.
	**/
	public IfcRelaxation(){}

	private static final String[] attributes = new String[]{"RelaxationValue","InitialStress"};

	public String[] getAttributes() {
		return IfcRelaxation.attributes;
	}

	/**
	* Constructs a new IfcRelaxation object using the given parameters.
	*
	* @param RelaxationValue DEMANDED parameter of type IfcNormalisedRatioMeasure - may not be null.
	* @param InitialStress DEMANDED parameter of type IfcNormalisedRatioMeasure - may not be null.
	**/
	public IfcRelaxation(IfcNormalisedRatioMeasure RelaxationValue, IfcNormalisedRatioMeasure InitialStress)
	{
		this.RelaxationValue = RelaxationValue;
		this.InitialStress = InitialStress;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcRelaxation object using the given parameters.
	*
	* @param RelaxationValue DEMANDED parameter of type IfcNormalisedRatioMeasure - may not be null.
	* @param InitialStress DEMANDED parameter of type IfcNormalisedRatioMeasure - may not be null.
	**/
	public void setParameters(IfcNormalisedRatioMeasure RelaxationValue, IfcNormalisedRatioMeasure InitialStress)
	{
		this.RelaxationValue = RelaxationValue;
		this.InitialStress = InitialStress;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.RelaxationValue = (IfcNormalisedRatioMeasure) parameters.get(0);
		this.InitialStress = (IfcNormalisedRatioMeasure) parameters.get(1);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcRelaxation.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCRELAXATION(");
		if(getRedefinedDerivedAttributeTypes().contains("RelaxationValue")) stepString = stepString.concat("*,");
		else{
		if(this.RelaxationValue != null)		stepString = stepString.concat(((RootInterface)this.RelaxationValue).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("InitialStress")) stepString = stepString.concat("*);");
		else{
		if(this.InitialStress != null)		stepString = stepString.concat(((RootInterface)this.InitialStress).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the RelaxationValue attribute to the given value.
	*
	* @param RelaxationValue OPTIONAL value to set
	**/
	public void setRelaxationValue(IfcNormalisedRatioMeasure RelaxationValue)
	{
		this.RelaxationValue = RelaxationValue;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RelaxationValue attribute.
	*
	* @return the value of RelaxationValue
	/**/
	public IfcNormalisedRatioMeasure getRelaxationValue()
	{
		return this.RelaxationValue;
	}

	/**
	* This method sets the InitialStress attribute to the given value.
	*
	* @param InitialStress OPTIONAL value to set
	**/
	public void setInitialStress(IfcNormalisedRatioMeasure InitialStress)
	{
		this.InitialStress = InitialStress;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the InitialStress attribute.
	*
	* @return the value of InitialStress
	/**/
	public IfcNormalisedRatioMeasure getInitialStress()
	{
		return this.InitialStress;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcRelaxation ifcRelaxation = new IfcRelaxation();
		if(this.RelaxationValue != null)
			ifcRelaxation.setRelaxationValue((IfcNormalisedRatioMeasure)this.RelaxationValue.clone());
		if(this.InitialStress != null)
			ifcRelaxation.setInitialStress((IfcNormalisedRatioMeasure)this.InitialStress.clone());
		return ifcRelaxation;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcRelaxation ifcRelaxation = new IfcRelaxation();
		if(this.RelaxationValue != null)
			ifcRelaxation.setRelaxationValue(this.RelaxationValue);
		if(this.InitialStress != null)
			ifcRelaxation.setInitialStress(this.InitialStress);
		return ifcRelaxation;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
