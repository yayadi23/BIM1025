/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc2x3javatoolbox.ifc2x3tc1;
/**
 * This is a default implementation of the entity IfcEnvironmentalImpactValue<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcEnvironmentalImpactValue extends IfcAppliedValue implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcText","IfcAppliedValueSelect","IfcMeasureWithUnit","IfcDateTimeSelect","IfcDateTimeSelect","IfcLabel","IfcEnvironmentalImpactCategoryEnum","IfcLabel"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** ImpactType is an DEMANDED attribute - may not be null**/
	protected IfcLabel ImpactType;
	/** Category is an DEMANDED attribute - may not be null**/
	protected IfcEnvironmentalImpactCategoryEnum Category;
	/** UserDefinedCategory is an OPTIONAL attribute**/
	protected IfcLabel UserDefinedCategory;
	/**
	* The default constructor.
	**/
	public IfcEnvironmentalImpactValue(){}

	private static final String[] attributes = new String[]{"Name","Description","AppliedValue","UnitBasis"
			,"ApplicableDate","FixedUntilDate","ImpactType","Category","UserDefinedCategory"};

	public String[] getAttributes() {
		return IfcEnvironmentalImpactValue.attributes;
	}

	/**
	* Constructs a new IfcEnvironmentalImpactValue object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param AppliedValue OPTIONAL parameter of type IfcAppliedValueSelect
	* @param UnitBasis OPTIONAL parameter of type IfcMeasureWithUnit
	* @param ApplicableDate OPTIONAL parameter of type IfcDateTimeSelect
	* @param FixedUntilDate OPTIONAL parameter of type IfcDateTimeSelect
	* @param ImpactType DEMANDED parameter of type IfcLabel - may not be null.
	* @param Category DEMANDED parameter of type IfcEnvironmentalImpactCategoryEnum - may not be null.
	* @param UserDefinedCategory OPTIONAL parameter of type IfcLabel
	**/
	public IfcEnvironmentalImpactValue(IfcLabel Name, IfcText Description, IfcAppliedValueSelect AppliedValue, IfcMeasureWithUnit UnitBasis, IfcDateTimeSelect ApplicableDate, IfcDateTimeSelect FixedUntilDate, IfcLabel ImpactType, IfcEnvironmentalImpactCategoryEnum Category, IfcLabel UserDefinedCategory)
	{
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		this.ImpactType = ImpactType;
		this.Category = Category;
		this.UserDefinedCategory = UserDefinedCategory;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcEnvironmentalImpactValue object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param AppliedValue OPTIONAL parameter of type IfcAppliedValueSelect
	* @param UnitBasis OPTIONAL parameter of type IfcMeasureWithUnit
	* @param ApplicableDate OPTIONAL parameter of type IfcDateTimeSelect
	* @param FixedUntilDate OPTIONAL parameter of type IfcDateTimeSelect
	* @param ImpactType DEMANDED parameter of type IfcLabel - may not be null.
	* @param Category DEMANDED parameter of type IfcEnvironmentalImpactCategoryEnum - may not be null.
	* @param UserDefinedCategory OPTIONAL parameter of type IfcLabel
	**/
	public void setParameters(IfcLabel Name, IfcText Description, IfcAppliedValueSelect AppliedValue, IfcMeasureWithUnit UnitBasis, IfcDateTimeSelect ApplicableDate, IfcDateTimeSelect FixedUntilDate, IfcLabel ImpactType, IfcEnvironmentalImpactCategoryEnum Category, IfcLabel UserDefinedCategory)
	{
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		this.ImpactType = ImpactType;
		this.Category = Category;
		this.UserDefinedCategory = UserDefinedCategory;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.Description = (IfcText) parameters.get(1);
		this.AppliedValue = (IfcAppliedValueSelect) parameters.get(2);
		this.UnitBasis = (IfcMeasureWithUnit) parameters.get(3);
		this.ApplicableDate = (IfcDateTimeSelect) parameters.get(4);
		this.FixedUntilDate = (IfcDateTimeSelect) parameters.get(5);
		this.ImpactType = (IfcLabel) parameters.get(6);
		this.Category = (IfcEnvironmentalImpactCategoryEnum) parameters.get(7);
		this.UserDefinedCategory = (IfcLabel) parameters.get(8);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcEnvironmentalImpactValue.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCENVIRONMENTALIMPACTVALUE(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AppliedValue")) stepString = stepString.concat("*,");
		else{
		if(this.AppliedValue != null)		stepString = stepString.concat(((RootInterface)this.AppliedValue).getStepParameter(IfcAppliedValueSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UnitBasis")) stepString = stepString.concat("*,");
		else{
		if(this.UnitBasis != null)		stepString = stepString.concat(((RootInterface)this.UnitBasis).getStepParameter(IfcMeasureWithUnit.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ApplicableDate")) stepString = stepString.concat("*,");
		else{
		if(this.ApplicableDate != null)		stepString = stepString.concat(((RootInterface)this.ApplicableDate).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FixedUntilDate")) stepString = stepString.concat("*,");
		else{
		if(this.FixedUntilDate != null)		stepString = stepString.concat(((RootInterface)this.FixedUntilDate).getStepParameter(IfcDateTimeSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ImpactType")) stepString = stepString.concat("*,");
		else{
		if(this.ImpactType != null)		stepString = stepString.concat(((RootInterface)this.ImpactType).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Category")) stepString = stepString.concat("*,");
		else{
		if(this.Category != null)		stepString = stepString.concat(((RootInterface)this.Category).getStepParameter(IfcEnvironmentalImpactCategoryEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UserDefinedCategory")) stepString = stepString.concat("*);");
		else{
		if(this.UserDefinedCategory != null)		stepString = stepString.concat(((RootInterface)this.UserDefinedCategory).getStepParameter(IfcLabel.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the ImpactType attribute to the given value.
	*
	* @param ImpactType OPTIONAL value to set
	**/
	public void setImpactType(IfcLabel ImpactType)
	{
		this.ImpactType = ImpactType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ImpactType attribute.
	*
	* @return the value of ImpactType
	/**/
	public IfcLabel getImpactType()
	{
		return this.ImpactType;
	}

	/**
	* This method sets the Category attribute to the given value.
	*
	* @param Category OPTIONAL value to set
	**/
	public void setCategory(IfcEnvironmentalImpactCategoryEnum Category)
	{
		this.Category = Category;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Category attribute.
	*
	* @return the value of Category
	/**/
	public IfcEnvironmentalImpactCategoryEnum getCategory()
	{
		return this.Category;
	}

	/**
	* This method sets the UserDefinedCategory attribute to the given value.
	*
	* @param UserDefinedCategory DEMANDED value to set - may not be null
	**/
	public void setUserDefinedCategory(IfcLabel UserDefinedCategory)
	{
		this.UserDefinedCategory = UserDefinedCategory;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the UserDefinedCategory attribute.
	*
	* @return the value of UserDefinedCategory
	/**/
	public IfcLabel getUserDefinedCategory()
	{
		return this.UserDefinedCategory;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcEnvironmentalImpactValue ifcEnvironmentalImpactValue = new IfcEnvironmentalImpactValue();
		if(this.Name != null)
			ifcEnvironmentalImpactValue.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcEnvironmentalImpactValue.setDescription((IfcText)this.Description.clone());
		if(this.AppliedValue != null)
			ifcEnvironmentalImpactValue.setAppliedValue((IfcAppliedValueSelect)this.AppliedValue.clone());
		if(this.UnitBasis != null)
			ifcEnvironmentalImpactValue.setUnitBasis((IfcMeasureWithUnit)this.UnitBasis.clone());
		if(this.ApplicableDate != null)
			ifcEnvironmentalImpactValue.setApplicableDate((IfcDateTimeSelect)this.ApplicableDate.clone());
		if(this.FixedUntilDate != null)
			ifcEnvironmentalImpactValue.setFixedUntilDate((IfcDateTimeSelect)this.FixedUntilDate.clone());
		if(this.ImpactType != null)
			ifcEnvironmentalImpactValue.setImpactType((IfcLabel)this.ImpactType.clone());
		if(this.Category != null)
			ifcEnvironmentalImpactValue.setCategory((IfcEnvironmentalImpactCategoryEnum)this.Category.clone());
		if(this.UserDefinedCategory != null)
			ifcEnvironmentalImpactValue.setUserDefinedCategory((IfcLabel)this.UserDefinedCategory.clone());
		return ifcEnvironmentalImpactValue;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcEnvironmentalImpactValue ifcEnvironmentalImpactValue = new IfcEnvironmentalImpactValue();
		if(this.Name != null)
			ifcEnvironmentalImpactValue.setName(this.Name);
		if(this.Description != null)
			ifcEnvironmentalImpactValue.setDescription(this.Description);
		if(this.AppliedValue != null)
			ifcEnvironmentalImpactValue.setAppliedValue(this.AppliedValue);
		if(this.UnitBasis != null)
			ifcEnvironmentalImpactValue.setUnitBasis(this.UnitBasis);
		if(this.ApplicableDate != null)
			ifcEnvironmentalImpactValue.setApplicableDate(this.ApplicableDate);
		if(this.FixedUntilDate != null)
			ifcEnvironmentalImpactValue.setFixedUntilDate(this.FixedUntilDate);
		if(this.ImpactType != null)
			ifcEnvironmentalImpactValue.setImpactType(this.ImpactType);
		if(this.Category != null)
			ifcEnvironmentalImpactValue.setCategory(this.Category);
		if(this.UserDefinedCategory != null)
			ifcEnvironmentalImpactValue.setUserDefinedCategory(this.UserDefinedCategory);
		return ifcEnvironmentalImpactValue;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}
